// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func init() {
	yyErrorVerbose = true
}

//line sql.y:57
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const TYPECAST = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const JSON_SUBOBJECT_OP = 57437
const JSON_UNQUOTE_SUBOBJECT_OP = 57438
const JSON_TXT_STR_EXISTS_OP = 57439
const JSON_ANY_KEYS_EXIST_OP = 57440
const JSON_ALL_KEYS_EXIST_OP = 57441
const JSON_LEFT_CONTAINS_RIGHT_OP = 57442
const JSON_RIGHT_CONTAINS_LEFT_OP = 57443
const FUNCTION_ARG_ASSIGNMENT = 57444
const CREATE = 57445
const ALTER = 57446
const DROP = 57447
const RENAME = 57448
const ANALYZE = 57449
const ADD = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const VIEW = 57454
const TO = 57455
const IGNORE = 57456
const IF = 57457
const UNIQUE = 57458
const PRIMARY = 57459
const COLUMN = 57460
const CONSTRAINT = 57461
const SPATIAL = 57462
const FULLTEXT = 57463
const FOREIGN = 57464
const KEY_BLOCK_SIZE = 57465
const SHOW = 57466
const DESCRIBE = 57467
const EXPLAIN = 57468
const DATE = 57469
const ESCAPE = 57470
const REPAIR = 57471
const OPTIMIZE = 57472
const TRUNCATE = 57473
const MAXVALUE = 57474
const PARTITION = 57475
const REORGANIZE = 57476
const LESS = 57477
const THAN = 57478
const PROCEDURE = 57479
const TRIGGER = 57480
const VINDEX = 57481
const VINDEXES = 57482
const STATUS = 57483
const VARIABLES = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const BIT = 57490
const TINYINT = 57491
const SMALLINT = 57492
const MEDIUMINT = 57493
const INT = 57494
const INTEGER = 57495
const BIGINT = 57496
const INTNUM = 57497
const REAL = 57498
const DOUBLE = 57499
const FLOAT_TYPE = 57500
const DECIMAL = 57501
const NUMERIC = 57502
const TIME = 57503
const TIMESTAMP = 57504
const DATETIME = 57505
const YEAR = 57506
const CHAR = 57507
const VARCHAR = 57508
const BOOL = 57509
const CHARACTER = 57510
const VARBINARY = 57511
const NCHAR = 57512
const TEXT = 57513
const TINYTEXT = 57514
const MEDIUMTEXT = 57515
const LONGTEXT = 57516
const BLOB = 57517
const TINYBLOB = 57518
const MEDIUMBLOB = 57519
const LONGBLOB = 57520
const JSON = 57521
const ENUM = 57522
const GEOMETRY = 57523
const POINT = 57524
const LINESTRING = 57525
const POLYGON = 57526
const GEOMETRYCOLLECTION = 57527
const MULTIPOINT = 57528
const MULTILINESTRING = 57529
const MULTIPOLYGON = 57530
const ARRAY = 57531
const NULLX = 57532
const AUTO_INCREMENT = 57533
const APPROXNUM = 57534
const SIGNED = 57535
const UNSIGNED = 57536
const ZEROFILL = 57537
const DATABASES = 57538
const TABLES = 57539
const VITESS_KEYSPACES = 57540
const VITESS_SHARDS = 57541
const VITESS_TABLETS = 57542
const VSCHEMA_TABLES = 57543
const EXTENDED = 57544
const FULL = 57545
const PROCESSLIST = 57546
const NAMES = 57547
const CHARSET = 57548
const GLOBAL = 57549
const SESSION = 57550
const ISOLATION = 57551
const LEVEL = 57552
const READ = 57553
const WRITE = 57554
const ONLY = 57555
const REPEATABLE = 57556
const COMMITTED = 57557
const UNCOMMITTED = 57558
const SERIALIZABLE = 57559
const CURRENT_TIMESTAMP = 57560
const DATABASE = 57561
const CURRENT_DATE = 57562
const CURRENT_TIME = 57563
const LOCALTIME = 57564
const LOCALTIMESTAMP = 57565
const UTC_DATE = 57566
const UTC_TIME = 57567
const UTC_TIMESTAMP = 57568
const REPLACE = 57569
const CONVERT = 57570
const CAST = 57571
const SUBSTR = 57572
const SUBSTRING = 57573
const GROUP_CONCAT = 57574
const SEPARATOR = 57575
const MATCH = 57576
const AGAINST = 57577
const BOOLEAN = 57578
const LANGUAGE = 57579
const WITH = 57580
const QUERY = 57581
const EXPANSION = 57582
const UNUSED = 57583

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"TYPECAST",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"FUNCTION_ARG_ASSIGNMENT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	158, 264,
	159, 264,
	-2, 254,
	-1, 240,
	109, 597,
	-2, 593,
	-1, 241,
	109, 598,
	-2, 594,
	-1, 311,
	79, 757,
	-2, 59,
	-1, 312,
	79, 718,
	-2, 60,
	-1, 317,
	79, 702,
	-2, 559,
	-1, 319,
	79, 739,
	-2, 561,
	-1, 590,
	52, 42,
	54, 42,
	-2, 44,
	-1, 723,
	109, 600,
	-2, 596,
	-1, 948,
	5, 29,
	-2, 405,
	-1, 973,
	5, 28,
	-2, 534,
	-1, 1183,
	5, 29,
	-2, 535,
	-1, 1225,
	5, 28,
	-2, 537,
	-1, 1287,
	5, 29,
	-2, 538,
}

const yyPrivate = 57344

const yyLast = 11045

var yyAct = [...]int{
	271, 48, 1278, 661, 800, 536, 1236, 884, 245, 1126,
	1098, 836, 818, 1099, 270, 840, 839, 801, 1034, 1189,
	773, 584, 582, 992, 864, 765, 976, 214, 54, 936,
	219, 759, 1095, 1037, 858, 770, 1025, 316, 850, 3,
	303, 600, 981, 789, 48, 460, 466, 878, 874, 48,
	725, 586, 414, 797, 310, 571, 297, 224, 599, 298,
	243, 764, 916, 302, 480, 228, 307, 305, 1079, 472,
	939, 931, 53, 215, 216, 217, 184, 1307, 1297, 1305,
	1285, 232, 1303, 885, 1296, 296, 1090, 1177, 218, 247,
	775, 1284, 418, 551, 459, 182, 178, 179, 180, 1000,
	1245, 601, 999, 602, 306, 1001, 1121, 1122, 1120, 417,
	832, 833, 831, 454, 1016, 857, 1260, 498, 497, 507,
	508, 500, 501, 502, 503, 504, 505, 506, 499, 58,
	439, 514, 1201, 2, 865, 513, 942, 509, 510, 511,
	512, 1132, 1133, 1134, 690, 51, 515, 941, 1137, 1135,
	728, 691, 301, 772, 730, 60, 61, 62, 63, 64,
	211, 450, 451, 1304, 1302, 1279, 1058, 798, 427, 1237,
	241, 819, 821, 428, 421, 176, 175, 212, 176, 669,
	660, 1239, 991, 990, 989, 416, 424, 190, 177, 1265,
	1186, 1066, 837, 956, 928, 445, 445, 445, 445, 1243,
	445, 441, 77, 443, 697, 181, 187, 445, 852, 187,
	484, 434, 852, 1055, 48, 930, 425, 1141, 426, 1057,
	478, 477, 852, 911, 433, 48, 694, 1094, 440, 442,
	479, 435, 1062, 187, 187, 77, 415, 479, 1270, 187,
	524, 77, 1151, 526, 502, 503, 504, 505, 506, 499,
	1010, 468, 514, 820, 478, 477, 513, 1238, 509, 510,
	511, 512, 979, 790, 469, 603, 1142, 515, 1092, 664,
	534, 479, 538, 526, 540, 541, 542, 543, 544, 545,
	546, 547, 1261, 550, 552, 552, 552, 552, 552, 552,
	552, 552, 560, 561, 562, 563, 1283, 1164, 729, 939,
	477, 912, 1273, 583, 1244, 1242, 1014, 1061, 851, 734,
	438, 535, 851, 849, 847, 854, 479, 848, 1136, 1056,
	855, 1054, 851, 732, 733, 731, 474, 790, 196, 963,
	1289, 1207, 525, 1206, 444, 766, 566, 767, 174, 952,
	1029, 951, 535, 953, 1290, 590, 187, 457, 187, 430,
	431, 432, 206, 1028, 187, 470, 478, 477, 925, 926,
	927, 187, 539, 696, 1017, 77, 77, 77, 77, 1271,
	77, 1221, 591, 479, 420, 597, 1204, 77, 553, 554,
	555, 556, 557, 558, 559, 1159, 499, 700, 701, 514,
	478, 477, 301, 513, 1026, 509, 510, 511, 512, 695,
	295, 191, 514, 22, 515, 77, 513, 479, 509, 510,
	511, 512, 1293, 459, 478, 477, 193, 515, 445, 1229,
	1276, 977, 1268, 199, 195, 513, 445, 509, 510, 511,
	512, 479, 478, 477, 1229, 459, 515, 445, 445, 445,
	445, 445, 445, 445, 445, 1229, 1230, 422, 423, 479,
	197, 445, 445, 201, 715, 717, 718, 1198, 1197, 716,
	223, 1117, 459, 459, 666, 667, 187, 1129, 670, 1185,
	459, 673, 678, 187, 187, 187, 1128, 611, 1011, 77,
	1002, 192, 1148, 1147, 775, 77, 260, 259, 262, 263,
	264, 265, 269, 887, 261, 266, 692, 676, 769, 702,
	1144, 1145, 726, 1144, 1143, 946, 459, 726, 726, 194,
	675, 202, 203, 204, 205, 209, 711, 674, 24, 665,
	208, 207, 723, 663, 75, 568, 459, 48, 775, 459,
	447, 448, 449, 658, 452, 436, 704, 610, 609, 538,
	429, 456, 971, 738, 739, 972, 719, 721, 458, 594,
	415, 1249, 737, 782, 785, 1248, 1138, 315, 1096, 791,
	978, 977, 978, 419, 55, 51, 535, 1181, 568, 302,
	302, 302, 302, 302, 1150, 567, 802, 727, 777, 1146,
	24, 1069, 727, 727, 583, 825, 822, 593, 77, 1003,
	595, 24, 593, 302, 187, 187, 77, 794, 187, 568,
	958, 187, 568, 946, 977, 187, 799, 77, 77, 77,
	77, 77, 77, 77, 77, 826, 238, 787, 1224, 830,
	946, 77, 77, 777, 946, 803, 187, 51, 806, 804,
	805, 596, 807, 955, 827, 815, 698, 225, 51, 823,
	51, 1211, 77, 957, 824, 859, 187, 1111, 866, 867,
	868, 828, 77, 860, 861, 862, 863, 829, 301, 301,
	301, 301, 301, 844, 445, 1006, 445, 982, 983, 871,
	872, 873, 879, 301, 445, 662, 954, 875, 870, 869,
	66, 882, 301, 1045, 51, 1131, 1096, 315, 315, 315,
	315, 1030, 315, 985, 778, 779, 672, 455, 710, 315,
	786, 883, 812, 876, 877, 880, 814, 813, 577, 578,
	907, 1043, 988, 908, 793, 987, 795, 796, 573, 576,
	577, 578, 574, 929, 575, 579, 810, 482, 982, 983,
	809, 811, 808, 229, 230, 723, 187, 1301, 1295, 187,
	187, 187, 187, 187, 1065, 917, 726, 913, 918, 1300,
	923, 187, 659, 922, 187, 473, 461, 1021, 187, 608,
	668, 437, 1013, 187, 187, 1212, 1275, 77, 462, 471,
	1274, 679, 680, 681, 682, 683, 684, 685, 686, 1222,
	77, 1007, 932, 1044, 1179, 687, 688, 889, 1049, 1046,
	1039, 1040, 1047, 1042, 1041, 1045, 940, 671, 974, 975,
	581, 315, 226, 227, 473, 1048, 220, 605, 1254, 921,
	221, 1051, 573, 576, 577, 578, 574, 920, 575, 579,
	55, 727, 1253, 1043, 1214, 978, 302, 446, 475, 1262,
	1202, 187, 962, 693, 77, 57, 77, 973, 59, 592,
	187, 52, 1, 187, 77, 886, 1033, 895, 995, 986,
	1277, 994, 1235, 996, 1125, 1004, 846, 838, 413, 65,
	1269, 845, 1241, 924, 1200, 527, 528, 529, 530, 531,
	532, 533, 997, 853, 1015, 856, 1020, 1130, 1022, 1023,
	1024, 1272, 1012, 615, 445, 1018, 1019, 1008, 1009, 613,
	614, 612, 313, 617, 616, 1044, 198, 308, 580, 604,
	1049, 1046, 1039, 1040, 1047, 1042, 1041, 1027, 881, 445,
	315, 476, 67, 1053, 1052, 301, 891, 1048, 315, 1036,
	1060, 689, 910, 1038, 453, 945, 200, 1050, 523, 315,
	315, 315, 315, 315, 315, 315, 315, 1074, 919, 998,
	314, 960, 1103, 315, 315, 699, 465, 1252, 1213, 961,
	548, 788, 246, 714, 258, 255, 257, 256, 705, 970,
	1067, 486, 1073, 1075, 706, 1072, 244, 1081, 236, 300,
	564, 572, 570, 1101, 482, 48, 1097, 315, 1083, 569,
	802, 984, 980, 1082, 299, 1084, 802, 1100, 1068, 1091,
	1113, 1114, 1115, 77, 723, 1107, 187, 1176, 888, 1105,
	890, 1259, 709, 26, 56, 1106, 231, 19, 909, 18,
	77, 17, 20, 21, 1102, 16, 15, 14, 703, 30,
	1123, 1124, 1119, 1118, 13, 12, 11, 10, 9, 8,
	1139, 1140, 7, 6, 234, 5, 4, 783, 783, 222,
	23, 0, 0, 783, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 77, 0, 77, 0, 0, 0,
	783, 0, 0, 0, 0, 1152, 0, 0, 0, 0,
	302, 1149, 0, 0, 0, 0, 0, 0, 1154, 77,
	0, 1157, 187, 187, 774, 776, 0, 0, 0, 315,
	187, 1175, 1162, 1156, 0, 1161, 0, 0, 0, 77,
	0, 792, 315, 724, 0, 0, 735, 736, 0, 0,
	0, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	1180, 817, 768, 1191, 1192, 1193, 313, 1188, 1194, 1004,
	901, 0, 0, 0, 0, 77, 77, 0, 0, 1196,
	445, 0, 0, 0, 900, 0, 315, 0, 315, 301,
	0, 0, 1199, 0, 0, 0, 315, 1210, 1203, 1209,
	1205, 0, 0, 0, 77, 0, 77, 77, 0, 0,
	0, 905, 1101, 0, 0, 1226, 0, 0, 0, 899,
	315, 0, 0, 0, 0, 1223, 1100, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 1234, 1240, 77,
	0, 0, 0, 1251, 0, 1246, 0, 1247, 1032, 0,
	0, 0, 77, 187, 1225, 1101, 0, 48, 0, 77,
	0, 1250, 0, 0, 464, 1263, 0, 77, 0, 1100,
	187, 0, 1267, 1059, 0, 0, 896, 893, 894, 0,
	892, 0, 0, 0, 0, 463, 467, 0, 0, 0,
	1281, 0, 0, 0, 0, 0, 1264, 1286, 0, 0,
	185, 802, 485, 210, 0, 903, 906, 0, 0, 0,
	1291, 0, 77, 0, 77, 77, 77, 187, 77, 0,
	0, 0, 0, 0, 77, 235, 1299, 185, 185, 1298,
	0, 0, 0, 185, 0, 1306, 537, 0, 0, 0,
	898, 0, 722, 0, 0, 993, 549, 0, 943, 944,
	77, 77, 77, 0, 0, 0, 948, 949, 950, 0,
	0, 0, 315, 897, 0, 959, 0, 0, 0, 0,
	965, 0, 966, 967, 968, 969, 0, 0, 0, 933,
	934, 935, 0, 0, 0, 0, 77, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	902, 0, 0, 0, 0, 1031, 315, 0, 315, 0,
	1174, 0, 77, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 24, 25, 49, 27, 28, 0, 0, 0,
	77, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 44, 185, 0, 0, 0, 29, 0, 185, 0,
	0, 315, 0, 0, 313, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 77, 841, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	77, 498, 497, 507, 508, 500, 501, 502, 503, 504,
	505, 506, 499, 0, 783, 514, 0, 1104, 993, 513,
	783, 509, 510, 511, 512, 0, 0, 0, 0, 0,
	515, 0, 0, 0, 1208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 315, 0, 315, 1127,
	0, 0, 0, 0, 0, 0, 31, 32, 34, 33,
	213, 0, 712, 713, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 37, 45, 43,
	185, 1153, 46, 47, 35, 0, 0, 185, 588, 185,
	0, 1116, 0, 0, 1155, 0, 39, 40, 0, 41,
	42, 1158, 0, 0, 1077, 1078, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 1086, 537, 1088, 1089, 0, 780, 781, 0,
	498, 497, 507, 508, 500, 501, 502, 503, 504, 505,
	506, 499, 0, 0, 514, 0, 0, 0, 513, 0,
	509, 510, 511, 512, 1190, 0, 1190, 1190, 1190, 515,
	1195, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 1163, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 1166, 1167, 1168, 1169, 937, 0, 1172, 835, 0,
	0, 0, 315, 315, 315, 0, 0, 0, 0, 0,
	1182, 1183, 1184, 0, 1187, 0, 0, 0, 185, 185,
	0, 0, 185, 0, 0, 185, 0, 841, 0, 677,
	0, 0, 0, 0, 0, 0, 0, 0, 1227, 1228,
	507, 508, 500, 501, 502, 503, 504, 505, 506, 499,
	185, 1127, 514, 1165, 0, 0, 513, 0, 509, 510,
	511, 512, 0, 632, 1190, 0, 0, 515, 0, 0,
	185, 0, 0, 1035, 0, 0, 0, 0, 0, 677,
	0, 0, 1266, 0, 0, 1220, 0, 0, 0, 0,
	914, 915, 0, 467, 0, 0, 0, 0, 0, 0,
	1231, 1232, 1233, 500, 501, 502, 503, 504, 505, 506,
	499, 0, 0, 514, 0, 783, 1071, 513, 1288, 509,
	510, 511, 512, 0, 1255, 1256, 1257, 1258, 515, 235,
	0, 0, 1294, 0, 0, 235, 235, 0, 620, 784,
	784, 235, 0, 0, 1087, 784, 0, 1215, 1216, 0,
	1217, 1218, 1219, 0, 0, 235, 235, 235, 235, 0,
	185, 0, 784, 185, 185, 185, 185, 185, 1282, 0,
	947, 0, 0, 1287, 0, 816, 0, 633, 185, 0,
	0, 0, 588, 0, 0, 964, 1292, 185, 185, 0,
	0, 841, 0, 841, 0, 0, 0, 0, 646, 647,
	648, 649, 650, 651, 652, 0, 653, 654, 655, 656,
	657, 634, 635, 636, 637, 618, 619, 1310, 1311, 621,
	761, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 638, 639, 640, 641, 642, 643, 644, 645, 0,
	0, 0, 0, 762, 763, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1071, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 185, 0, 0,
	24, 25, 49, 27, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 760, 0, 0, 44,
	0, 0, 677, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	0, 841, 0, 38, 0, 0, 0, 51, 24, 25,
	49, 27, 28, 0, 0, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 1035, 841,
	0, 0, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 38, 0, 0, 0, 51, 235, 0, 0, 0,
	0, 0, 0, 1108, 1109, 0, 0, 1110, 0, 0,
	1112, 0, 235, 0, 31, 32, 34, 33, 36, 0,
	0, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 37, 45, 43, 0, 0,
	46, 47, 35, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 39, 40, 0, 41, 42, 0,
	0, 0, 31, 32, 34, 33, 36, 0, 632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 45, 43, 0, 1160, 46, 47,
	35, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 40, 0, 41, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1178,
	1173, 459, 0, 0, 0, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 1064, 50, 0,
	0, 0, 0, 620, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 235, 0, 498, 497, 507, 508,
	500, 501, 502, 503, 504, 505, 506, 499, 0, 0,
	514, 235, 0, 0, 513, 0, 509, 510, 511, 512,
	0, 677, 633, 0, 0, 515, 50, 0, 0, 0,
	0, 1171, 0, 0, 0, 0, 784, 0, 0, 0,
	0, 0, 784, 646, 647, 648, 649, 650, 651, 652,
	0, 653, 654, 655, 656, 657, 634, 635, 636, 637,
	618, 619, 0, 0, 621, 0, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 638, 639, 640, 641,
	642, 643, 644, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 498, 497, 507, 508, 500, 501, 502, 503,
	504, 505, 506, 499, 0, 0, 514, 185, 1280, 537,
	513, 0, 509, 510, 511, 512, 0, 488, 0, 496,
	0, 515, 0, 0, 185, 516, 517, 518, 519, 520,
	521, 522, 0, 489, 490, 487, 498, 497, 507, 508,
	500, 501, 502, 503, 504, 505, 506, 499, 0, 0,
	514, 0, 0, 0, 513, 0, 509, 510, 511, 512,
	491, 492, 493, 494, 495, 515, 0, 0, 0, 0,
	0, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 402, 392, 0, 364,
	404, 342, 356, 412, 357, 358, 385, 328, 372, 126,
	354, 0, 345, 323, 351, 324, 343, 366, 94, 369,
	341, 394, 375, 108, 410, 110, 380, 0, 143, 119,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 76, 0, 842,
	843, 0, 0, 0, 0, 87, 0, 382, 401, 353,
	384, 321, 381, 0, 326, 329, 411, 399, 348, 349,
	1005, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 347, 388, 0, 320, 391, 397, 362,
	188, 400, 360, 359, 403, 132, 0, 784, 146, 99,
	98, 107, 395, 344, 352, 90, 350, 138, 128, 158,
	377, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 340, 398, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 78, 0, 109, 170, 134, 96, 161,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 126, 354, 0, 345, 323, 351, 324,
	343, 366, 94, 369, 341, 394, 375, 108, 410, 110,
	380, 0, 143, 119, 0, 0, 368, 396, 370, 390,
	363, 386, 333, 379, 405, 355, 383, 406, 0, 0,
	0, 76, 0, 842, 843, 0, 0, 0, 0, 87,
	0, 382, 401, 353, 384, 321, 381, 0, 326, 329,
	411, 399, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 367, 371, 387, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 378, 0, 0, 0, 330,
	327, 0, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 347, 388, 0,
	320, 391, 397, 362, 188, 400, 360, 359, 403, 132,
	0, 0, 146, 99, 98, 107, 395, 344, 352, 90,
	350, 138, 128, 158, 377, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 322, 0, 325, 0, 144, 160, 173, 340, 398,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	336, 339, 334, 335, 373, 374, 407, 408, 409, 389,
	331, 0, 337, 338, 0, 393, 376, 78, 0, 109,
	170, 134, 96, 161, 402, 392, 0, 364, 404, 342,
	356, 412, 357, 358, 385, 328, 372, 126, 354, 0,
	345, 323, 351, 324, 343, 366, 94, 369, 341, 394,
	375, 108, 410, 110, 380, 0, 143, 119, 0, 0,
	368, 396, 370, 390, 363, 386, 333, 379, 405, 355,
	383, 406, 51, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 382, 401, 353, 384, 321,
	381, 0, 326, 329, 411, 399, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 367, 371, 387, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 378,
	0, 0, 0, 330, 327, 0, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 347, 388, 0, 320, 391, 397, 362, 188, 400,
	360, 359, 403, 132, 0, 0, 146, 99, 98, 107,
	395, 344, 352, 90, 350, 138, 128, 158, 377, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 322, 0, 325, 0, 144,
	160, 173, 340, 398, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 336, 339, 334, 335, 373, 374,
	407, 408, 409, 389, 331, 0, 337, 338, 0, 393,
	376, 78, 0, 109, 170, 134, 96, 161, 402, 392,
	0, 364, 404, 342, 356, 412, 357, 358, 385, 328,
	372, 126, 354, 0, 345, 323, 351, 324, 343, 366,
	94, 369, 341, 394, 375, 108, 410, 110, 380, 0,
	143, 119, 0, 0, 368, 396, 370, 390, 363, 386,
	333, 379, 405, 355, 383, 406, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 382,
	401, 353, 384, 321, 381, 0, 326, 329, 411, 399,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 367,
	371, 387, 361, 0, 0, 0, 0, 0, 0, 1070,
	0, 346, 0, 378, 0, 0, 0, 330, 327, 0,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 347, 388, 0, 320, 391,
	397, 362, 188, 400, 360, 359, 403, 132, 0, 0,
	146, 99, 98, 107, 395, 344, 352, 90, 350, 138,
	128, 158, 377, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 322,
	0, 325, 0, 144, 160, 173, 340, 398, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 336, 339,
	334, 335, 373, 374, 407, 408, 409, 389, 331, 0,
	337, 338, 0, 393, 376, 78, 0, 109, 170, 134,
	96, 161, 402, 392, 0, 364, 404, 342, 356, 412,
	357, 358, 385, 328, 372, 126, 354, 0, 345, 323,
	351, 324, 343, 366, 94, 369, 341, 394, 375, 108,
	410, 110, 380, 0, 143, 119, 0, 0, 368, 396,
	370, 390, 363, 386, 333, 379, 405, 355, 383, 406,
	0, 0, 0, 240, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 382, 401, 353, 384, 321, 381, 0,
	326, 329, 411, 399, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 367, 371, 387, 361, 0, 0, 0,
	0, 0, 0, 720, 0, 346, 0, 378, 0, 0,
	0, 330, 327, 0, 365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 347,
	388, 0, 320, 391, 397, 362, 188, 400, 360, 359,
	403, 132, 0, 0, 146, 99, 98, 107, 395, 344,
	352, 90, 350, 138, 128, 158, 377, 129, 137, 111,
	150, 133, 157, 189, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 322, 0, 325, 0, 144, 160, 173,
	340, 398, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 336, 339, 334, 335, 373, 374, 407, 408,
	409, 389, 331, 0, 337, 338, 0, 393, 376, 78,
	0, 109, 170, 134, 96, 161, 402, 392, 0, 364,
	404, 342, 356, 412, 357, 358, 385, 328, 372, 126,
	354, 0, 345, 323, 351, 324, 343, 366, 94, 369,
	341, 394, 375, 108, 410, 110, 380, 0, 143, 119,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 382, 401, 353,
	384, 321, 381, 0, 326, 329, 411, 399, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 347, 388, 0, 320, 391, 397, 362,
	188, 400, 360, 359, 403, 132, 0, 0, 146, 99,
	98, 107, 395, 344, 352, 90, 350, 138, 128, 158,
	377, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 340, 398, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 78, 0, 109, 170, 134, 96, 161,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 126, 354, 0, 345, 323, 351, 324,
	343, 366, 94, 369, 341, 394, 375, 108, 410, 110,
	380, 0, 143, 119, 0, 0, 368, 396, 370, 390,
	363, 386, 333, 379, 405, 355, 383, 406, 0, 0,
	0, 240, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 382, 401, 353, 384, 321, 381, 0, 326, 329,
	411, 399, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 367, 371, 387, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 378, 0, 0, 0, 330,
	327, 0, 365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 347, 388, 0,
	320, 391, 397, 362, 188, 400, 360, 359, 403, 132,
	0, 0, 146, 99, 98, 107, 395, 344, 352, 90,
	350, 138, 128, 158, 377, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 322, 0, 325, 0, 144, 160, 173, 340, 398,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	336, 339, 334, 335, 373, 374, 407, 408, 409, 389,
	331, 0, 337, 338, 0, 393, 376, 78, 0, 109,
	170, 134, 96, 161, 402, 392, 0, 364, 404, 342,
	356, 412, 357, 358, 385, 328, 372, 126, 354, 0,
	345, 323, 351, 324, 343, 366, 94, 369, 341, 394,
	375, 108, 410, 110, 380, 0, 143, 119, 0, 0,
	368, 396, 370, 390, 363, 386, 333, 379, 405, 355,
	383, 406, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 382, 401, 353, 384, 321,
	381, 0, 326, 329, 411, 399, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 367, 371, 387, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 378,
	0, 0, 0, 330, 327, 0, 365, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	0, 347, 388, 0, 320, 391, 397, 362, 188, 400,
	360, 359, 403, 132, 0, 0, 146, 99, 98, 107,
	395, 344, 352, 90, 350, 138, 128, 158, 377, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 318, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 322, 0, 325, 0, 144,
	160, 173, 340, 398, 166, 167, 168, 169, 0, 0,
	0, 319, 317, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 336, 339, 334, 335, 373, 374,
	407, 408, 409, 389, 331, 0, 337, 338, 0, 393,
	376, 78, 0, 109, 170, 134, 96, 161, 402, 392,
	0, 364, 404, 342, 356, 412, 357, 358, 385, 328,
	372, 126, 354, 0, 345, 323, 351, 324, 343, 366,
	94, 369, 341, 394, 375, 108, 410, 110, 380, 0,
	143, 119, 0, 0, 368, 396, 370, 390, 363, 386,
	333, 379, 405, 355, 383, 406, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 382,
	401, 353, 384, 321, 381, 0, 326, 329, 411, 399,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 367,
	371, 387, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 378, 0, 0, 0, 330, 327, 0,
	365, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 0, 347, 388, 0, 320, 391,
	397, 362, 188, 400, 360, 359, 403, 132, 0, 0,
	146, 99, 98, 107, 395, 344, 352, 90, 350, 138,
	128, 158, 377, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 322,
	0, 325, 0, 144, 160, 173, 340, 398, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 336, 339,
	334, 335, 373, 374, 407, 408, 409, 389, 331, 0,
	337, 338, 0, 393, 376, 78, 0, 109, 170, 134,
	96, 161, 402, 392, 0, 364, 404, 342, 356, 412,
	357, 358, 385, 328, 372, 126, 354, 0, 345, 323,
	351, 324, 343, 366, 94, 369, 341, 394, 375, 108,
	410, 110, 380, 0, 143, 119, 0, 0, 368, 396,
	370, 390, 363, 386, 333, 379, 405, 355, 383, 406,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 382, 401, 353, 384, 321, 381, 0,
	326, 329, 411, 399, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 367, 371, 387, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 378, 0, 0,
	0, 330, 327, 0, 365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 0, 347,
	388, 0, 320, 391, 397, 362, 188, 400, 360, 359,
	403, 132, 0, 0, 146, 99, 98, 107, 395, 344,
	352, 90, 350, 138, 128, 158, 377, 129, 137, 111,
	150, 133, 157, 189, 165, 148, 164, 79, 147, 598,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 318, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 322, 0, 325, 0, 144, 160, 173,
	340, 398, 166, 167, 168, 169, 0, 0, 0, 319,
	317, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 336, 339, 334, 335, 373, 374, 407, 408,
	409, 389, 331, 0, 337, 338, 0, 393, 376, 78,
	0, 109, 170, 134, 96, 161, 402, 392, 0, 364,
	404, 342, 356, 412, 357, 358, 385, 328, 372, 126,
	354, 0, 345, 323, 351, 324, 343, 366, 94, 369,
	341, 394, 375, 108, 410, 110, 380, 0, 143, 119,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 382, 401, 353,
	384, 321, 381, 0, 326, 329, 411, 399, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 347, 388, 0, 320, 391, 397, 362,
	188, 400, 360, 359, 403, 132, 0, 0, 146, 99,
	98, 107, 395, 344, 352, 90, 350, 138, 128, 158,
	377, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 309, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 318, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 340, 398, 166, 167, 168, 169,
	0, 0, 0, 319, 317, 312, 311, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 78, 0, 109, 170, 134, 96, 161,
	126, 0, 0, 771, 0, 242, 0, 0, 0, 94,
	0, 239, 0, 0, 108, 282, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 273, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 240, 260,
	259, 262, 263, 264, 265, 0, 87, 261, 266, 267,
	268, 0, 0, 237, 253, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 251, 233, 0,
	0, 0, 293, 0, 252, 0, 0, 248, 249, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 291, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 272, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 275, 276, 277,
	278, 280, 0, 279, 78, 0, 109, 170, 134, 96,
	161, 126, 0, 0, 0, 0, 242, 0, 0, 0,
	94, 0, 239, 0, 0, 108, 282, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 459, 240,
	260, 259, 262, 263, 264, 265, 0, 87, 261, 266,
	267, 268, 0, 0, 237, 253, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 0,
	0, 0, 0, 293, 0, 252, 0, 0, 248, 249,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 291, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 272,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 283, 292,
	289, 290, 287, 288, 286, 285, 284, 294, 275, 276,
	277, 278, 280, 0, 279, 78, 0, 109, 170, 134,
	96, 161, 126, 0, 0, 0, 0, 242, 0, 0,
	0, 94, 0, 239, 0, 0, 108, 282, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	240, 260, 259, 262, 263, 264, 265, 0, 87, 261,
	266, 267, 268, 0, 0, 237, 253, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 251,
	233, 0, 0, 0, 293, 0, 252, 0, 0, 248,
	249, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 291, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	272, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 283,
	292, 289, 290, 287, 288, 286, 285, 284, 294, 275,
	276, 277, 278, 280, 0, 279, 78, 0, 109, 170,
	134, 96, 161, 126, 0, 0, 0, 0, 242, 0,
	0, 0, 94, 0, 239, 0, 0, 108, 282, 110,
	0, 0, 143, 119, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 0, 0, 834, 0, 51, 0,
	0, 240, 260, 259, 262, 263, 264, 265, 0, 87,
	261, 266, 267, 268, 0, 0, 237, 253, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 0, 0, 0, 0, 293, 0, 252, 0, 0,
	248, 249, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 291, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 272, 0, 0, 0, 144, 160, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	275, 276, 277, 278, 280, 24, 279, 78, 0, 109,
	170, 134, 96, 161, 0, 0, 0, 126, 0, 0,
	0, 0, 242, 0, 0, 0, 94, 0, 239, 0,
	0, 108, 282, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 273, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 240, 260, 259, 262, 263,
	264, 265, 0, 87, 261, 266, 267, 268, 0, 0,
	237, 253, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 0, 0, 0, 0, 293,
	0, 252, 0, 0, 248, 249, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 291, 0, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 0, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 272, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 283, 292, 289, 290, 287, 288,
	286, 285, 284, 294, 275, 276, 277, 278, 280, 0,
	279, 78, 0, 109, 170, 134, 96, 161, 126, 0,
	0, 0, 0, 242, 0, 0, 0, 94, 0, 239,
	0, 0, 108, 282, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 273, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 240, 260, 259, 262,
	263, 264, 265, 0, 87, 261, 266, 267, 268, 0,
	0, 237, 253, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 251, 0, 0, 0, 0,
	293, 0, 252, 0, 0, 248, 249, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 291, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 272, 0, 0, 0,
	144, 160, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 283, 292, 289, 290, 287,
	288, 286, 285, 284, 294, 275, 276, 277, 278, 280,
	126, 279, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 0, 0, 0, 108, 282, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 273, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 240, 260,
	259, 262, 263, 264, 265, 0, 87, 261, 266, 267,
	268, 0, 0, 0, 253, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 251, 0, 0,
	0, 0, 293, 0, 252, 0, 0, 248, 249, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 291, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 1309, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 272, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 275, 276, 277,
	278, 280, 126, 279, 78, 0, 109, 170, 134, 96,
	161, 94, 0, 0, 0, 0, 108, 282, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	240, 260, 259, 262, 263, 264, 265, 0, 87, 261,
	266, 267, 268, 0, 0, 0, 253, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 251,
	0, 0, 0, 0, 293, 0, 252, 0, 0, 248,
	249, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 291, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	272, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 283,
	292, 289, 290, 287, 288, 286, 285, 284, 294, 275,
	276, 277, 278, 280, 0, 279, 78, 0, 109, 170,
	134, 96, 161, 126, 1076, 0, 0, 481, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 108, 0, 110,
	1170, 459, 143, 119, 498, 497, 507, 508, 500, 501,
	502, 503, 504, 505, 506, 499, 0, 0, 514, 0,
	0, 76, 513, 483, 509, 510, 511, 512, 0, 87,
	0, 459, 0, 515, 478, 477, 498, 497, 507, 508,
	500, 501, 502, 503, 504, 505, 506, 499, 0, 0,
	514, 479, 0, 0, 513, 0, 509, 510, 511, 512,
	0, 0, 0, 0, 0, 515, 498, 497, 507, 508,
	500, 501, 502, 503, 504, 505, 506, 499, 0, 0,
	514, 0, 0, 0, 513, 0, 509, 510, 511, 512,
	0, 0, 0, 0, 188, 515, 0, 0, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 0, 0, 0, 144, 160, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 938, 78, 0, 109,
	170, 134, 96, 161, 94, 0, 0, 0, 0, 108,
	0, 110, 0, 0, 143, 119, 498, 497, 507, 508,
	500, 501, 502, 503, 504, 505, 506, 499, 0, 0,
	514, 0, 0, 76, 513, 0, 509, 510, 511, 512,
	0, 87, 0, 0, 0, 515, 69, 498, 497, 507,
	508, 500, 501, 502, 503, 504, 505, 506, 499, 0,
	0, 514, 0, 0, 0, 513, 0, 509, 510, 511,
	512, 0, 0, 0, 0, 0, 515, 497, 507, 508,
	500, 501, 502, 503, 504, 505, 506, 499, 0, 0,
	514, 0, 0, 0, 513, 0, 509, 510, 511, 512,
	0, 0, 0, 72, 73, 515, 68, 0, 0, 0,
	74, 132, 0, 0, 146, 99, 98, 107, 0, 0,
	0, 90, 0, 138, 128, 158, 0, 129, 137, 111,
	150, 133, 157, 70, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 0, 0, 0, 0, 144, 160, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 109, 170, 134, 96, 161, 126, 0, 0, 0,
	587, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 589, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 0, 144, 160,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	78, 0, 109, 170, 134, 96, 161, 94, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 0,
	144, 160, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 0, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 0, 0, 0, 108, 0, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 78, 0, 109, 170, 134, 96,
	161, 94, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 707, 0, 0, 708, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 78, 0, 109, 170,
	134, 96, 161, 94, 0, 607, 0, 0, 108, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 606, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	109, 170, 134, 96, 161, 126, 0, 0, 0, 587,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 108,
	0, 110, 0, 0, 143, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 589, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 132, 0, 0, 146, 99, 98, 107, 0, 0,
	0, 90, 0, 138, 128, 158, 0, 585, 137, 111,
	150, 133, 157, 189, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 0, 0, 0, 0, 144, 160, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 78,
	0, 109, 170, 134, 96, 161, 94, 0, 0, 0,
	0, 108, 0, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 0, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 0, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 78, 0, 109, 170, 134, 96, 161, 94, 0,
	0, 0, 0, 108, 0, 110, 0, 0, 143, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 0, 589,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 132, 0, 0, 146, 99,
	98, 107, 0, 0, 0, 90, 0, 138, 128, 158,
	0, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 0, 0, 0,
	0, 144, 160, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 78, 0, 109, 170, 134, 96, 161,
	94, 0, 0, 0, 0, 108, 0, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 483, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 78, 0, 109, 170, 134,
	96, 161, 565, 94, 0, 0, 0, 0, 108, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 0, 0, 0, 0, 126, 0, 78, 0,
	109, 170, 134, 96, 161, 94, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 0, 144, 160,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	78, 0, 109, 170, 134, 96, 161, 94, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 188,
	0, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 0,
	144, 160, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 0, 0, 0, 108, 0, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 78, 0, 109, 170, 134, 96,
	161, 94, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 78, 0, 109, 170,
	134, 96, 161, 94, 0, 0, 0, 0, 108, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	109, 170, 134, 96, 161,
}

var yyPact = [...]int{
	1952, -1000, -187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 805, 830, -1000, -1000, -1000, -1000, -1000, -1000,
	627, 7287, 47, 61, -31, 10090, 60, 296, 10786, -1000,
	-2, -1000, -1000, 1386, -1000, -1000, -1000, -1000, 574, -1000,
	-1000, -1000, -1000, -1000, 789, 794, 631, 782, 694, -1000,
	5624, 44, 8929, 9858, 4901, -1000, 494, 57, 10786, -152,
	10322, 42, 42, 42, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 59, 10786, -1000, 10786, 41, 484,
	41, 41, 41, 10786, -1000, 102, -1000, -1000, -1000, -1000,
	10786, 479, 731, 74, 2869, 2869, 2869, 2869, 3, 2869,
	-107, 646, -1000, -1000, -1000, -1000, 2869, -1000, -1000, -1000,
	-1000, -1000, -1000, 1904, -1000, -1000, -1000, -1000, 408, 737,
	6350, 6350, 805, -1000, 574, -1000, -1000, -1000, 734, -1000,
	-1000, 263, 817, -1000, 7055, 101, -1000, 6350, 2226, 587,
	-1000, -1000, 587, -1000, -1000, -1000, -1000, -1000, 6814, 6814,
	6814, 6814, 6814, 6814, 6814, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 587,
	-1000, 6109, 587, 587, 587, 587, 587, 587, 587, 587,
	587, 6350, 587, 587, 587, 587, 587, 587, 587, 587,
	587, 587, 587, 587, 587, 9626, 545, 771, -1000, -1000,
	-1000, 778, 7992, 8697, 10786, 538, -1000, 577, 4647, -125,
	-1000, -1000, -1000, 186, 8456, -1000, -1000, -1000, 729, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 483, -1000, 2048, 477, 2869, 51, 623,
	467, 198, 463, 10786, 10786, 2869, 49, 10786, 774, 645,
	10786, 461, 454, -1000, 4393, -1000, 2869, 2869, 2869, 2869,
	2869, 2869, 2869, 2869, -1000, -1000, -1000, -1000, -1000, -1000,
	2869, 2869, -1000, -70, -1000, 10786, -1000, -1000, -1000, -1000,
	-1000, 824, 137, 345, 95, 582, -1000, 363, 789, 408,
	694, 8224, 656, -1000, -1000, 10786, -1000, 6350, 6350, 388,
	-1000, 9393, -1000, -1000, 3377, 144, 6814, 92, 236, 6814,
	6814, 429, 92, 92, 6814, 6814, 6814, 6814, 6814, 6814,
	6814, 6814, 6814, 6814, 6814, 6814, 6814, 6814, 6814, 6814,
	6814, 6814, 6814, 1673, 279, 6814, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 442, -1000, 574, 298, 298, 298,
	298, 298, 298, 317, 5142, 408, 474, 185, 6109, -1000,
	5624, 5624, 6350, 6350, 10554, 10554, 5624, 783, 188, 185,
	10554, -1000, 408, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5624, 5624, 5624, 5624, 17, 10786, -1000, 10554, 8929, 8929,
	8929, 8929, 8929, -1000, 691, 689, -1000, 685, 661, 665,
	10786, -1000, 471, 7992, 122, 587, -1000, 9161, -1000, -1000,
	17, 533, 8929, 10786, -1000, -1000, 4139, 577, -125, 565,
	-1000, -115, -119, 5865, 88, -1000, -1000, -1000, -1000, 2615,
	180, 249, -96, -1000, -1000, -1000, 592, -1000, 592, 592,
	592, 592, -51, -51, -51, -51, -1000, -1000, -1000, -1000,
	-1000, 626, 625, -1000, 592, 592, 592, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 624, 624, 624, 619, 619, 629, -1000,
	10786, -172, 437, 2869, 764, 2869, -1000, 1125, -1000, 10786,
	-1000, -1000, 10786, 2869, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 212,
	-1000, -1000, -1000, -1000, 710, 6350, 6350, 3885, 6350, -1000,
	-1000, -1000, 737, -1000, 783, 798, -1000, 720, 717, 5624,
	-1000, -1000, 144, 230, -1000, -1000, 292, -1000, -1000, -1000,
	-1000, 85, 587, -1000, 7267, -1000, -1000, -1000, 107, -189,
	-1000, 92, 6814, 6814, 6814, 1490, 7267, -1000, -1000, -1000,
	7267, 7267, 7236, 1588, 7296, 298, 148, 148, 285, 285,
	285, 285, 285, 1649, 1649, 7267, 7267, 7267, 7267, -190,
	-1000, 592, -23, -34, -1000, -1000, -1000, -1000, 7267, 408,
	408, 5624, 566, -1000, -1000, 6350, -1000, 408, 451, 451,
	287, 321, 622, -1000, 84, 589, 451, 5624, 252, -1000,
	6350, 408, -1000, 451, 408, 451, 451, 512, 587, -1000,
	550, -1000, 183, 771, 616, 642, 677, -1000, -1000, -1000,
	-1000, 674, -1000, 671, -1000, -1000, -1000, -1000, -1000, 56,
	55, 54, 10322, -1000, 813, 8929, 548, -1000, -1000, 565,
	-125, -129, -1000, -1000, -1000, 185, -1000, 424, 535, 2361,
	-1000, -1000, -1000, -1000, -1000, -1000, 612, 753, 184, 194,
	422, -1000, -1000, 733, -1000, 240, -98, -1000, -1000, 305,
	-51, -51, -1000, -1000, 88, 727, 88, 88, 88, 336,
	336, -1000, -1000, -1000, -1000, 294, -1000, -1000, -1000, 281,
	-1000, 640, 10322, 2869, -1000, 3631, -1000, -1000, -1000, -1000,
	-1000, -1000, 767, 655, 191, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16, -1000, 2869, -1000,
	220, 10786, 10786, 706, 185, 185, 82, -1000, -1000, 10786,
	-1000, -1000, -1000, -1000, 570, -1000, -1000, -1000, 3123, 5624,
	1673, 6350, -1000, 1490, 7267, 7004, -1000, 6814, 6814, -193,
	-1000, -1000, -1000, -1000, -1000, 451, 5624, 185, -1000, -1000,
	-1000, 1673, 279, 1673, 6814, 6814, 3885, 6814, 6814, -166,
	549, 190, -1000, 6350, 151, -1000, -1000, -1000, -1000, -1000,
	635, 10554, 587, -1000, 7760, 10322, 805, 10554, 6350, 6350,
	-1000, -1000, 6350, 594, -1000, 6350, -1000, -1000, -1000, 587,
	587, 587, 407, -1000, 805, 548, -1000, -1000, -1000, -120,
	-126, -1000, -1000, 2615, -1000, 2615, 10322, -1000, 420, 411,
	-1000, -1000, 634, 83, -1000, -1000, -1000, 501, 88, 88,
	-1000, 161, -1000, -1000, -1000, 449, -1000, 446, 525, 428,
	10786, -1000, -1000, 520, -1000, 163, -1000, -1000, 10322, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10322, 10786, -1000, -1000, -1000, -1000, -1000, 10322, -1000,
	-1000, 327, 6350, -1000, -1000, -1000, 3631, -1000, 813, 8929,
	-1000, -1000, 408, -190, 36, -1000, 6814, 7267, 7267, -1000,
	-1000, -1000, 39, 408, 39, 7036, 2182, -1000, 2076, 1361,
	587, -163, -1000, 185, 6350, -1000, 757, 507, 513, -1000,
	-1000, 5383, 408, 415, 81, 407, 789, -1000, 185, 185,
	185, 10322, 185, 10322, 10322, 10322, 7528, 10322, 789, -1000,
	-1000, -1000, -1000, 2361, -1000, 403, -1000, 592, -1000, -1000,
	-76, 821, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -51, 318, -51, 274, -1000, 272, 2869,
	3631, 2615, -1000, 588, -1000, -1000, -1000, -1000, 739, -1000,
	185, 811, 514, -1000, -1000, 7267, -1000, -1000, -1000, -1000,
	6814, 6814, -1000, 6814, 6814, 6814, 408, 313, 185, 751,
	-1000, 587, -1000, -1000, 585, 10322, 10322, -1000, -1000, 391,
	-1000, 380, 380, 380, 122, -1000, -1000, 117, 10322, -1000,
	171, -1000, -135, 88, -1000, 88, 500, 496, -1000, -1000,
	-1000, 10322, 587, 808, 792, 7066, 7066, 7066, 7066, 27,
	-1000, -1000, 820, -1000, 587, -1000, 574, 80, -1000, 10322,
	-1000, -1000, -1000, -1000, -1000, 117, -1000, 366, 159, 311,
	-1000, 238, 742, -1000, 738, -1000, -1000, -1000, -1000, -1000,
	365, 15, -1000, 6350, 6350, -1000, -1000, -1000, -1000, 408,
	43, -176, 10554, 513, 408, 10322, -1000, -1000, -1000, 271,
	-1000, -1000, -1000, 286, -1000, -1000, 623, 358, -1000, 10322,
	185, 430, -1000, 700, -170, -179, 367, -1000, -1000, -1000,
	-1000, -172, -1000, 15, 716, -1000, 699, -1000, -1000, -1000,
	12, -173, 10, -177, 587, -180, 6582, -1000, 7066, 408,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 133, 39, 403, 1040, 1039, 1036, 1035, 1033, 1032,
	1029, 1028, 1027, 1026, 1025, 1024, 1019, 1017, 1016, 1015,
	1013, 1012, 1011, 1009, 1007, 129, 1006, 1004, 1003, 69,
	1002, 65, 1001, 997, 29, 153, 35, 20, 1034, 988,
	22, 56, 59, 984, 42, 982, 981, 67, 979, 55,
	972, 971, 40, 970, 969, 12, 26, 968, 966, 961,
	959, 60, 616, 958, 957, 956, 955, 954, 953, 50,
	5, 10, 14, 13, 952, 89, 8, 951, 43, 950,
	949, 948, 947, 28, 946, 46, 945, 30, 45, 942,
	19, 53, 23, 32, 4, 66, 58, 940, 17, 54,
	41, 939, 938, 338, 928, 926, 924, 922, 921, 920,
	168, 374, 916, 914, 913, 912, 37, 170, 492, 827,
	64, 911, 908, 899, 1234, 62, 51, 21, 898, 27,
	334, 25, 897, 896, 31, 61, 894, 893, 891, 890,
	889, 883, 34, 882, 881, 877, 24, 11, 875, 874,
	48, 47, 873, 864, 862, 36, 52, 861, 38, 860,
	859, 858, 857, 16, 15, 856, 9, 854, 6, 852,
	850, 2, 847, 18, 846, 7, 845, 3, 33, 842,
	841, 0, 548, 839, 838, 93,
}

var yyR1 = [...]int{
	0, 179, 180, 180, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 28, 28, 8, 9, 9, 9,
	183, 183, 47, 47, 91, 91, 10, 10, 10, 10,
	96, 96, 100, 100, 100, 101, 101, 101, 101, 132,
	132, 11, 11, 11, 11, 11, 11, 11, 177, 177,
	176, 175, 175, 174, 174, 173, 16, 160, 161, 161,
	161, 156, 135, 135, 135, 135, 138, 138, 136, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	141, 141, 141, 141, 141, 141, 141, 141, 155, 155,
	142, 142, 150, 150, 151, 151, 151, 148, 148, 149,
	149, 152, 152, 152, 143, 143, 143, 143, 143, 143,
	143, 145, 145, 153, 153, 146, 146, 146, 147, 147,
	154, 154, 154, 154, 154, 144, 144, 157, 157, 169,
	169, 168, 168, 168, 159, 159, 165, 165, 165, 165,
	165, 158, 158, 167, 167, 166, 162, 162, 162, 163,
	163, 163, 164, 164, 164, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 172, 170, 170, 171, 171,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 108, 108, 105, 105, 106, 106, 107, 107,
	107, 109, 109, 109, 133, 133, 133, 19, 19, 22,
	22, 23, 24, 21, 21, 20, 20, 20, 20, 184,
	25, 26, 26, 27, 27, 27, 31, 31, 31, 29,
	29, 30, 30, 36, 36, 35, 35, 37, 37, 37,
	37, 121, 121, 121, 120, 120, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 54, 54, 90, 90, 92,
	92, 43, 43, 43, 43, 44, 44, 45, 45, 46,
	46, 128, 128, 127, 127, 127, 126, 126, 48, 48,
	48, 50, 49, 49, 49, 49, 51, 51, 53, 53,
	52, 52, 55, 55, 55, 55, 56, 56, 38, 38,
	38, 38, 38, 38, 38, 104, 104, 58, 58, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 68, 68, 68, 68, 68, 68,
	59, 59, 59, 59, 59, 59, 59, 34, 34, 69,
	69, 69, 69, 69, 69, 75, 70, 70, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 66, 66, 66, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	185, 185, 67, 67, 67, 67, 32, 32, 32, 32,
	32, 131, 131, 134, 134, 134, 134, 134, 134, 134,
	134, 79, 79, 33, 33, 77, 77, 78, 80, 80,
	76, 76, 76, 61, 61, 61, 61, 61, 61, 61,
	61, 63, 63, 63, 81, 81, 82, 82, 83, 83,
	84, 84, 85, 86, 86, 86, 87, 87, 87, 87,
	88, 88, 88, 60, 60, 60, 60, 60, 60, 89,
	89, 89, 89, 93, 93, 71, 71, 73, 73, 72,
	74, 94, 94, 98, 95, 95, 99, 99, 99, 97,
	97, 97, 123, 123, 123, 102, 102, 110, 110, 111,
	111, 103, 103, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 113, 113, 113, 114, 114, 115, 115,
	115, 122, 122, 118, 118, 119, 119, 124, 124, 125,
	125, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 181, 182, 129, 130, 130, 130,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 8, 4, 6, 5, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 1, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 2, 2, 2, 2,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 3, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 3, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 3, 3, 3, 3,
	3, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 3, 4, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 4, 5, 6, 2, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 1, 2, 1, 2, 1, 2, 3,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -179, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -22, -23, -24,
	-21, -20, -3, -4, 6, 7, -28, 9, 10, 30,
	-16, 120, 121, 123, 122, 148, 124, 141, 49, 160,
	161, 163, 164, 143, 25, 142, 146, 147, -181, 8,
	244, 53, -180, 259, -83, 15, -27, 5, -25, -184,
	-25, -25, -25, -25, -25, -160, 53, -115, 129, 69,
	156, 236, 126, 127, 133, -118, 56, -117, 252, 160,
	171, 165, 192, 184, 182, 185, 223, 64, 163, 232,
	144, 180, 176, 174, 27, 197, 257, 175, 139, 138,
	198, 202, 224, 169, 170, 226, 196, 140, 32, 254,
	34, 152, 227, 200, 195, 191, 194, 168, 190, 38,
	204, 203, 205, 222, 187, 177, 18, 230, 147, 150,
	199, 201, 134, 154, 256, 228, 173, 151, 146, 231,
	164, 225, 234, 37, 210, 167, 137, 161, 158, 188,
	153, 178, 179, 193, 166, 189, 162, 155, 148, 233,
	211, 258, 186, 183, 159, 157, 215, 216, 217, 218,
	255, 229, 181, 212, -103, 129, 131, 127, 127, 128,
	129, 236, 126, 127, -52, -124, 56, -117, 129, 156,
	127, 105, 185, 120, 213, 128, 32, 154, -133, 127,
	-105, 157, 215, 216, 217, 218, 56, 225, 224, 219,
	-124, 162, -1, 124, -129, -129, -129, -129, -2, -87,
	17, 16, -5, -3, -181, 6, 20, 21, -31, 39,
	40, -26, -37, 96, -38, -124, -57, 71, -62, 29,
	56, -117, 23, -61, -58, -76, -74, -75, 105, 106,
	94, 95, 102, 72, 107, -66, -64, -65, -67, 58,
	57, 65, 59, 60, 61, 62, 66, 67, 68, -118,
	-72, -181, 206, 43, 44, 245, 246, 247, 248, 251,
	249, 74, 33, 235, 243, 242, 241, 239, 240, 237,
	238, 132, 236, 100, 244, -103, -40, -41, -42, -43,
	-54, -75, -181, -52, 11, -47, -52, -95, -132, 162,
	-99, 225, 224, -119, -97, -118, -116, 223, 185, 222,
	125, 70, 206, 22, 24, 208, 73, 105, 16, 74,
	104, 245, 120, 47, 237, 238, 235, 247, 248, 236,
	213, 29, 10, 25, 142, 21, 98, 122, 77, 78,
	145, 23, 143, 68, 19, 50, 11, 13, 14, 132,
	131, 89, 128, 45, 8, 107, 26, 86, 41, 28,
	43, 87, 17, 239, 240, 31, 251, 149, 100, 48,
	35, 71, 66, 51, 69, 15, 46, 88, 123, 244,
	44, 126, 6, 250, 30, 141, 42, 127, 214, 76,
	130, 67, 5, 133, 9, 49, 52, 241, 242, 243,
	33, 75, 12, -161, -156, 56, 128, -52, 244, -118,
	-111, 132, -111, -111, 127, -52, -52, -110, 132, 56,
	-110, -110, -110, -52, 109, -52, 56, 30, 236, 56,
	154, 127, 155, 129, -130, -181, -119, -130, -130, -130,
	158, 159, -130, -106, 220, 51, -130, -1, -182, 55,
	-88, 19, 31, -38, -124, -84, -85, -38, -83, -2,
	-25, 35, -29, 21, 63, 11, -121, 70, 69, 86,
	-120, 22, -118, 58, 109, -38, -59, 89, 71, 87,
	88, 114, 115, 116, 117, 118, 73, 91, 90, 101,
	94, 95, 96, 97, 98, 99, 100, 92, 93, 110,
	111, 112, 113, 108, 104, 119, 79, 80, 81, 82,
	83, 84, 85, -104, -181, -75, -181, -62, -62, -62,
	-62, -62, -62, -62, -181, -2, -70, -38, -181, -75,
	-181, -181, -181, -181, -181, -181, -181, -181, -79, -38,
	-181, -185, -181, -185, -185, -185, -185, -185, -185, -185,
	-181, -181, -181, -181, -53, 26, -52, 30, 54, -48,
	-50, -49, -51, 41, 45, 47, 42, 43, 44, 48,
	-128, 22, -40, -181, -127, 150, -126, 22, -124, 58,
	-52, -47, -183, 54, 11, 52, 54, -95, 162, -96,
	-100, 226, 228, 79, -123, -118, 58, 29, 30, 55,
	54, -135, -138, -140, -139, -141, -136, -137, 182, 183,
	105, 186, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 30, 144, 178, 179, 180, 181, 198, 199,
	200, 201, 202, 203, 204, 205, 165, 166, 167, 168,
	169, 170, 171, 173, 174, 175, 176, 177, 56, -130,
	129, -177, 52, 56, 71, 56, -52, -52, -130, 130,
	-52, 23, 51, -52, 56, 56, -125, -124, -116, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -108,
	214, 221, -52, 9, 89, 54, 18, 109, 54, -86,
	24, 25, -87, -182, -31, -63, -118, 59, 62, -30,
	42, -52, -38, -38, -68, 66, 71, 67, 68, -120,
	96, -125, -119, -116, -62, -69, -72, -75, 58, 206,
	62, 89, 87, 88, 73, -62, -62, -61, -69, -69,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -134,
	253, 187, 210, 211, -135, -131, 56, 58, -62, 56,
	-36, 21, -35, -37, -182, 54, -182, -2, -35, -35,
	-38, -38, -76, -118, -124, -76, -35, -29, -77, -78,
	75, -76, -182, -35, -36, -35, -35, -91, 150, -52,
	-94, -98, -76, -41, -42, -42, -41, -42, 41, 41,
	41, 46, 41, 46, 41, -49, -124, -182, -55, 49,
	131, 50, -181, -126, -91, 52, -40, -52, -99, -96,
	54, 227, 229, 230, 51, -38, -147, 104, -162, -163,
	-164, -119, 58, 59, -156, -157, -165, 134, 137, 133,
	-158, 128, 28, -152, 66, 71, -148, 211, -142, 53,
	-142, -142, -142, -142, -146, 185, -146, -146, -146, 53,
	53, -142, -142, -142, -150, 53, -150, -150, -151, 53,
	-151, -122, 52, -52, -175, 255, -176, 56, -130, 23,
	-130, -112, 125, 122, 123, -172, 121, 208, 185, 64,
	29, 15, 245, 150, 258, 56, 151, -52, -52, -130,
	-107, 11, 89, 37, -38, -38, -125, -85, -88, -102,
	19, 11, 33, 33, -35, 66, 67, 68, 109, -181,
	108, 260, -69, -62, -62, -62, -34, 145, 70, 260,
	-142, 170, 170, -182, -182, -35, 54, -38, -182, -182,
	-182, 54, 52, 22, 54, 11, 109, 54, 11, -182,
	-35, -80, -78, 77, -38, -182, -182, -182, -182, -182,
	-60, 30, 33, -2, -181, -181, -56, 54, 12, 79,
	-45, -44, 51, 52, -46, 51, -44, 41, 41, 128,
	128, 128, -92, -118, -56, -40, -56, -100, -101, 231,
	228, 234, 56, 54, -164, 79, 53, 28, -158, -158,
	56, 56, -143, 29, 66, -149, 212, 59, -146, -146,
	-147, 30, -147, -147, -147, -155, 58, -155, 59, 59,
	51, -118, -130, -174, -173, -119, -129, -178, 156, 135,
	136, 139, 138, 56, 128, 28, 134, 137, 150, 133,
	-178, 156, -113, -114, 130, 22, 128, 28, 150, -130,
	-109, 87, 12, -124, -124, 38, 109, -52, -39, 11,
	96, -119, -36, -134, -70, -34, 70, -62, -62, 261,
	-182, -37, -134, -131, -134, -62, -62, -119, -62, -62,
	252, -83, 78, -38, 76, -93, 51, -94, -71, -73,
	-72, -181, -2, -89, -118, -92, -83, -98, -38, -38,
	-38, 53, -38, -181, -181, -181, -182, 54, -83, -56,
	228, 232, 233, -163, -164, -167, -166, -118, 56, 56,
	-145, 51, 58, 59, 60, 66, 235, 65, 55, -147,
	-147, 56, 105, 55, 54, 55, 54, 55, 54, -52,
	54, 79, -129, -118, -129, -118, -52, -129, -118, 58,
	-38, -56, -40, -182, 261, -62, -182, -182, -182, -182,
	54, 19, -182, 54, 19, -181, -33, 250, -38, 27,
	-93, 54, -182, -182, -182, 54, 109, -182, -87, -90,
	-118, -90, -90, -90, -127, -118, -87, 55, 54, -142,
	-153, 208, 9, -146, 58, -146, 59, 59, -130, -173,
	-164, 53, 26, -81, 13, -62, -62, -62, -62, -62,
	-182, 58, 28, -73, 33, -2, -181, -118, -118, 54,
	55, -182, -182, -182, -55, -169, -168, 52, 140, 64,
	-166, -154, 134, 28, 133, 235, -147, -147, 55, 55,
	-90, -181, -82, 14, 16, -182, -182, -182, -182, -32,
	89, 255, 9, -71, -2, 109, -118, -168, 56, -159,
	79, 58, -144, 64, 28, 28, 55, -170, -171, 150,
	-38, -70, -182, 253, 48, 256, -94, -182, -118, 59,
	58, -177, -182, 54, -118, 38, 254, 257, -175, -171,
	33, 38, 152, 255, 153, 256, -181, 257, -62, 149,
	-182, -182,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 518, 0, 279, 279, 279, 279, 279, 279,
	0, 588, 571, 0, 0, 0, 0, -2, 268, 269,
	0, 271, 272, 0, 794, 794, 794, 794, 0, 34,
	35, 792, 1, 3, 526, 0, 0, 283, 286, 281,
	0, 571, 0, 0, 0, 61, 0, 0, 781, 0,
	782, 569, 569, 569, 589, 590, 593, 594, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 0, 0, 572, 0, 567, 0,
	567, 567, 567, 0, 227, 350, 597, 598, 781, 782,
	0, 0, 0, 0, 795, 795, 795, 795, 0, 795,
	256, 245, 247, 248, 249, 250, 795, 265, 266, 255,
	267, 270, 273, 0, 275, 276, 277, 278, 28, 530,
	0, 0, 518, 30, 0, 279, 284, 285, 289, 287,
	288, 280, 0, 297, 301, 0, 358, 0, 363, 365,
	-2, -2, 0, 408, 409, 410, 411, 412, 0, 0,
	0, 0, 0, 0, 0, 439, 440, 441, 442, 503,
	504, 505, 506, 507, 508, 509, 510, 367, 368, 500,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 470, 470, 470, 470, 470, 470, 470,
	470, 0, 0, 0, 0, 0, 0, 308, 310, 311,
	312, 331, 0, 333, 0, 0, 42, 46, 0, 772,
	554, -2, -2, 0, 0, 595, 596, -2, 701, -2,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 0, 78, 0, 0, 795, 0, 68,
	0, 0, 0, 0, 0, 795, 0, 0, 0, 0,
	0, 0, 0, 226, 0, 228, 795, 795, 795, 795,
	795, 795, 795, 795, 237, 796, 797, 238, 239, 240,
	795, 795, 242, 0, 257, 0, 251, 274, 29, 793,
	23, 0, 0, 527, 0, 519, 520, 523, 526, 28,
	286, 0, 291, 290, 282, 0, 298, 0, 0, 0,
	302, 0, 304, 305, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 390, 391, 392, 393,
	394, 395, 396, 364, 0, 383, 0, 432, 433, 434,
	435, 436, 437, 438, 293, 28, 0, 406, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 492,
	0, 462, 0, 463, 464, 465, 466, 467, 468, 469,
	0, 293, 0, 0, 44, 0, 349, 0, 0, 0,
	0, 0, 0, 338, 0, 0, 341, 0, 0, 0,
	0, 332, 0, 0, 352, 745, 334, 0, 336, 337,
	-2, 0, 0, 0, 40, 41, 0, 47, 772, 49,
	50, 0, 0, 0, 158, 562, 563, 564, 560, 186,
	0, 141, 137, 83, 84, 85, 130, 87, 130, 130,
	130, 130, 155, 155, 155, 155, 113, 114, 115, 116,
	117, 0, 0, 100, 130, 130, 130, 104, 120, 121,
	122, 123, 124, 125, 126, 127, 88, 89, 90, 91,
	92, 93, 94, 132, 132, 132, 134, 134, 591, 63,
	0, 71, 0, 795, 0, 795, 76, 0, 202, 0,
	221, 568, 0, 795, 224, 225, 351, 599, 600, 229,
	230, 231, 232, 233, 234, 235, 236, 241, 244, 258,
	252, 253, 246, 531, 0, 0, 0, 0, 0, 522,
	524, 525, 530, 31, 289, 0, 511, 0, 0, 0,
	292, 26, 359, 360, 362, 384, 0, 386, 388, 303,
	299, 0, 501, -2, 369, 370, 399, 400, 403, 0,
	404, 0, 0, 0, 0, 397, 374, 376, 377, 378,
	379, 380, 0, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	483, 130, 485, 487, 490, 430, 481, 482, 431, 0,
	0, 0, 294, 295, 405, 0, 549, 28, 0, 0,
	0, 0, 0, 500, 0, 0, 0, 0, 498, 495,
	0, 0, 471, 0, 0, 0, 0, 0, 0, 348,
	356, 551, 0, 309, 327, 329, 0, 324, 339, 340,
	342, 0, 344, 0, 346, 347, 313, 314, 315, 0,
	0, 0, 0, 335, 356, 0, 356, 43, 555, 48,
	0, 0, 53, 54, 556, 557, 558, 0, 77, 187,
	189, 192, 193, 194, 79, 80, 0, 0, 0, 0,
	0, 181, 182, 144, 142, 0, 139, 138, 86, 0,
	155, 155, 107, 108, 158, 0, 158, 158, 158, 0,
	0, 101, 102, 103, 95, 0, 96, 97, 98, 0,
	99, 0, 0, 795, 65, 0, 69, 70, 66, 570,
	67, 794, 0, 0, 583, 203, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 0, 220, 795, 223,
	261, 0, 0, 0, 528, 529, 0, 521, 24, 0,
	565, 566, 512, 513, 306, 385, 387, 389, 0, 293,
	0, 0, 371, 397, 375, 0, 372, 0, 0, 0,
	484, 486, 488, 366, 443, 0, 0, 407, -2, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 496, 0, 0, 461, 472, 473, 474, 475,
	543, 0, 0, -2, 0, 0, 518, 0, 0, 0,
	321, 328, 0, 0, 322, 0, 323, 343, 345, 0,
	0, 0, 0, 319, 518, 356, 39, 51, 52, 0,
	0, 58, 159, 0, 190, 0, 0, 176, 0, 0,
	179, 180, 151, 0, 143, 82, 140, 0, 158, 158,
	109, 0, 110, 111, 112, 0, 128, 0, 0, 0,
	0, 592, 64, 72, 73, 0, 195, 794, 0, 204,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	794, 0, 0, 794, 584, 585, 586, 587, 0, 222,
	243, 0, 0, 259, 260, 532, 0, 25, 356, 0,
	300, 502, 0, 401, 0, 373, 0, 398, 381, 489,
	444, 296, 0, 0, 0, 0, 0, 501, 0, 0,
	0, 493, 460, 499, 0, 32, 0, 543, 533, 545,
	547, 0, 28, 0, 539, 0, 526, 552, 357, 553,
	325, 0, 330, 0, 0, 0, 333, 0, 526, 38,
	55, 56, 57, 188, 191, 0, 183, 130, 177, 178,
	153, 0, 145, 146, 147, 148, 149, 150, 131, 105,
	106, 156, 157, 155, 0, 155, 0, 135, 0, 795,
	0, 0, 196, 0, 197, 199, 200, 201, 0, 262,
	263, 514, 307, 445, 402, 382, 449, 451, 450, 452,
	0, 0, 455, 0, 0, 0, 0, 0, 497, 0,
	33, 0, 548, -2, 0, 0, 0, 45, 36, 0,
	317, 0, 0, 0, 352, 320, 37, 168, 0, 185,
	160, 154, 0, 158, 129, 158, 0, 0, 62, 74,
	75, 0, 0, 516, 0, 0, 0, 0, 0, 476,
	459, 494, 0, 546, 0, -2, 0, 541, 540, 0,
	326, 353, 354, 355, 316, 167, 169, 0, 174, 0,
	184, 165, 0, 162, 164, 152, 118, 119, 133, 136,
	0, 0, 27, 0, 0, 453, 454, 456, 457, 0,
	0, 0, 0, 536, 28, 0, 318, 170, 171, 0,
	175, 173, 81, 0, 161, 163, 68, 0, 216, 0,
	517, 515, 458, 0, 0, 0, 544, -2, 542, 172,
	166, 71, 215, 0, 0, 477, 0, 480, 198, 217,
	0, 478, 0, 0, 0, 0, 0, 479, 0, 0,
	218, 219,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	53, 55, 96, 94, 54, 95, 109, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 259,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 260, 3, 261, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:316
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:321
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:322
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:326
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:350
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:358
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:362
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:368
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:375
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:381
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:395
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:402
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:414
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:426
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:430
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:436
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:442
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:456
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:464
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:469
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:473
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:497
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:501
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:507
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:521
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:549
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:554
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:559
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:563
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:567
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:584
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:588
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:594
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:599
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:604
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:610
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:615
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:621
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:627
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:641
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:646
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:650
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:656
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:667
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:678
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:875
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:880
		{
			yyVAL.optVal = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:884
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:889
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:893
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:901
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:905
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:911
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:919
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:928
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:938
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:942
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:946
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:951
		{
			yyVAL.optVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:955
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:959
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:963
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:971
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:975
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:980
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:989
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:993
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:998
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1002
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1006
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1011
		{
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1015
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1020
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1024
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1028
		{
			yyVAL.colKeyOpt = colKey
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1032
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1036
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.optVal = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1051
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1055
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1071
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1080
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1086
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1090
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1100
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1108
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1143
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1151
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = yyDollar[1].str
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1173
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1187
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1191
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1195
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1199
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1212
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1222
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1227
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1232
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1236
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1255
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1265
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1271
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1275
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1281
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1287
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1295
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1300
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1318
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1322
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1327
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1333
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1337
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1390
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1440
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1444
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1450
		{
			yyVAL.str = ""
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1454
		{
			yyVAL.str = "extended "
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1460
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = "full "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1470
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1474
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1478
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1484
		{
			yyVAL.showFilter = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1488
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1492
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1502
		{
			yyVAL.str = SessionStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1506
		{
			yyVAL.str = GlobalStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Begin{}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Begin{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Commit{}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Rollback{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &Explain{stmt: yyDollar[2].statement}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &Explain{stmt: yyDollar[3].statement, analyze: true}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &OtherRead{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1571
		{
			setAllowComments(yylex, true)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1581
		{
			yyVAL.bytes2 = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1585
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1591
		{
			yyVAL.str = UnionStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1595
		{
			yyVAL.str = UnionAllStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1599
		{
			yyVAL.str = UnionDistinctStr
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1604
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1608
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = SQLCacheStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1617
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1621
		{
			yyVAL.str = DistinctStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1626
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1630
		{
			yyVAL.str = StraightJoinHint
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1635
		{
			yyVAL.selectExprs = nil
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1639
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1649
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1659
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1663
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1667
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1672
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1687
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1692
		{
			yyVAL.tableExprs = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1696
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1706
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1716
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1720
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1724
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1734
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1740
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1744
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1754
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1767
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1771
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1775
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1779
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1785
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1787
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1793
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1797
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1799
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1802
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1804
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1807
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1815
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1828
		{
			yyVAL.str = JoinStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1832
		{
			yyVAL.str = JoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1836
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1842
		{
			yyVAL.str = StraightJoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1848
		{
			yyVAL.str = LeftJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = LeftJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = RightJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = RightJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1866
		{
			yyVAL.str = NaturalJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1870
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1880
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1894
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1899
		{
			yyVAL.indexHints = nil
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1903
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1907
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1911
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1916
		{
			yyVAL.expr = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1920
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1926
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1938
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1942
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1950
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1956
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1976
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1980
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1984
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1988
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1992
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1996
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2000
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2006
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2010
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2014
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2022
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2026
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2030
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2034
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = IsNullStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2044
		{
			yyVAL.str = IsNotNullStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = IsTrueStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = IsNotTrueStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = IsFalseStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = IsNotFalseStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = EqualStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = LessThanStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = GreaterThanStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2078
		{
			yyVAL.str = LessEqualStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.str = GreaterEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = NotEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2095
		{
			yyVAL.expr = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2099
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2113
		{
			yyVAL.colTuple = &ConvertExpr{Expr: NewStrVal(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2117
		{
			yyVAL.colTuple = Array(yyDollar[3].exprs)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			// this is an array literal ('{a,b,c}', etc)
			// TODO this is weird and ugly but I need those quotes to be passed through
			tmp := make([]byte, len(yyDollar[1].bytes)+2)
			tmp[0] = '\''
			tmp[len(yyDollar[1].bytes)+1] = '\''
			copy(tmp[1:], yyDollar[1].bytes)
			yyVAL.colTuple = ListArg(tmp)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			// this is a positional parameter ($1, etc)
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2148
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2170
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2178
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2186
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2190
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2194
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2198
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &FunctionArgAssignmentExpr{Argument: yyDollar[1].expr, Operator: FuncArgAssignStr, Value: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2258
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2288
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2324
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("array"), Exprs: SelectExprs{&AliasedExpr{Expr: yyDollar[2].subquery}}}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2328
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 457:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 458:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 459:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2458
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2462
		{
			yyVAL.str = BooleanModeStr
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2466
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = QueryExpansionStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2480
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2484
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2490
		{
			yyVAL.convertType = &ConvertType{Type: "boolean"}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2494
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2514
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].convertType.Type + "[]"}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = nil
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2527
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2532
		{
			yyVAL.str = string("")
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2542
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2552
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = nil
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2567
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2571
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2575
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &NullVal{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2615
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2633
		{
			yyVAL.exprs = nil
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2637
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2651
		{
			yyVAL.orderBy = nil
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2655
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2665
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2671
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2676
		{
			yyVAL.str = AscScr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2680
		{
			yyVAL.str = AscScr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2684
		{
			yyVAL.str = DescScr
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2689
		{
			yyVAL.limit = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2693
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2697
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2701
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2706
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.str = ForUpdateStr
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = ShareModeStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2727
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2731
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2735
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2740
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2744
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2748
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2755
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2759
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2763
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2767
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2772
		{
			yyVAL.updateExprs = nil
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2776
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2782
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2786
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2802
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2818
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2822
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2828
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2838
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2844
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2848
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2852
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.bytes = []byte("charset")
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &Default{}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2883
		{
			yyVAL.byt = 0
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.byt = 1
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2888
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2893
		{
			yyVAL.str = ""
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			yyVAL.str = IgnoreStr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2905
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2907
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2911
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2917
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2920
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2924
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2928
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2933
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2935
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2937
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2940
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2942
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2957
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2963
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3191
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			decNesting(yylex)
		}
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3205
		{
			forceEOF(yylex)
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3210
		{
			forceEOF(yylex)
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			forceEOF(yylex)
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
