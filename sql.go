// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func init() {
	yyErrorVerbose = true
}

//line sql.y:57
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	onConflict        *OnConflict
	conflictTarget    *ConflictTarget
	conflictAction    *ConflictAction
	insertOptions     InsertOptions
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const CONFLICT = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const NOTHING = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const DO = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const INTERVAL = 57436
const TYPECAST = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const JSON_SUBOBJECT_OP = 57440
const JSON_UNQUOTE_SUBOBJECT_OP = 57441
const JSON_TXT_STR_EXISTS_OP = 57442
const JSON_ANY_KEYS_EXIST_OP = 57443
const JSON_ALL_KEYS_EXIST_OP = 57444
const JSON_LEFT_CONTAINS_RIGHT_OP = 57445
const JSON_RIGHT_CONTAINS_LEFT_OP = 57446
const FUNCTION_ARG_ASSIGNMENT = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const UNIQUE = 57461
const PRIMARY = 57462
const COLUMN = 57463
const CONSTRAINT = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const SHOW = 57469
const DESCRIBE = 57470
const EXPLAIN = 57471
const DATE = 57472
const ESCAPE = 57473
const REPAIR = 57474
const OPTIMIZE = 57475
const TRUNCATE = 57476
const MAXVALUE = 57477
const PARTITION = 57478
const REORGANIZE = 57479
const LESS = 57480
const THAN = 57481
const PROCEDURE = 57482
const TRIGGER = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const ARRAY = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const DATABASES = 57541
const TABLES = 57542
const VITESS_KEYSPACES = 57543
const VITESS_SHARDS = 57544
const VITESS_TABLETS = 57545
const VSCHEMA_TABLES = 57546
const EXTENDED = 57547
const FULL = 57548
const PROCESSLIST = 57549
const NAMES = 57550
const CHARSET = 57551
const GLOBAL = 57552
const SESSION = 57553
const ISOLATION = 57554
const LEVEL = 57555
const READ = 57556
const WRITE = 57557
const ONLY = 57558
const REPEATABLE = 57559
const COMMITTED = 57560
const UNCOMMITTED = 57561
const SERIALIZABLE = 57562
const CURRENT_TIMESTAMP = 57563
const DATABASE = 57564
const CURRENT_DATE = 57565
const CURRENT_TIME = 57566
const LOCALTIME = 57567
const LOCALTIMESTAMP = 57568
const UTC_DATE = 57569
const UTC_TIME = 57570
const UTC_TIMESTAMP = 57571
const REPLACE = 57572
const CONVERT = 57573
const CAST = 57574
const SUBSTR = 57575
const SUBSTRING = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const MATCH = 57579
const AGAINST = 57580
const BOOLEAN = 57581
const LANGUAGE = 57582
const WITH = 57583
const QUERY = 57584
const EXPANSION = 57585
const UNUSED = 57586

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"CONFLICT",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NOTHING",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"DO",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"TYPECAST",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"FUNCTION_ARG_ASSIGNMENT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	161, 266,
	162, 266,
	-2, 256,
	-1, 241,
	112, 608,
	-2, 604,
	-1, 242,
	112, 609,
	-2, 605,
	-1, 312,
	82, 770,
	-2, 61,
	-1, 313,
	82, 731,
	-2, 62,
	-1, 318,
	82, 714,
	-2, 570,
	-1, 320,
	82, 752,
	-2, 572,
	-1, 592,
	54, 44,
	57, 44,
	-2, 46,
	-1, 725,
	112, 611,
	-2, 607,
	-1, 950,
	5, 29,
	-2, 407,
	-1, 975,
	5, 28,
	-2, 536,
	-1, 1186,
	5, 29,
	-2, 537,
	-1, 1230,
	5, 28,
	-2, 539,
	-1, 1302,
	5, 29,
	-2, 540,
}

const yyPrivate = 57344

const yyLast = 11361

var yyAct = [...]int16{
	272, 48, 886, 1288, 838, 1192, 538, 978, 1241, 220,
	3, 663, 1101, 1100, 271, 1128, 842, 820, 866, 1036,
	586, 803, 584, 215, 1097, 841, 994, 761, 938, 767,
	446, 1039, 1027, 54, 246, 802, 775, 852, 772, 602,
	317, 791, 462, 983, 48, 468, 876, 880, 416, 48,
	601, 311, 727, 573, 799, 244, 474, 225, 588, 219,
	482, 299, 229, 303, 308, 918, 298, 766, 1081, 216,
	217, 218, 306, 941, 933, 53, 1330, 1312, 1327, 1295,
	1324, 887, 1311, 1092, 1179, 297, 420, 1002, 1250, 441,
	1001, 777, 860, 1003, 1122, 461, 1294, 233, 456, 183,
	179, 180, 181, 1123, 1124, 834, 835, 833, 553, 774,
	603, 692, 604, 1018, 859, 1204, 867, 51, 693, 944,
	943, 212, 730, 429, 2, 1326, 732, 452, 453, 1323,
	1289, 1265, 500, 499, 509, 510, 502, 503, 504, 505,
	506, 507, 508, 501, 1060, 800, 516, 1299, 58, 430,
	515, 423, 511, 512, 513, 514, 854, 176, 1248, 177,
	443, 517, 445, 1134, 1135, 1136, 1242, 177, 213, 671,
	1139, 1137, 662, 993, 60, 61, 62, 63, 64, 1244,
	992, 991, 418, 634, 426, 242, 417, 442, 444, 191,
	248, 1275, 178, 1189, 1068, 958, 447, 447, 447, 447,
	1057, 447, 930, 699, 486, 436, 854, 1059, 447, 182,
	854, 932, 1143, 839, 696, 48, 1280, 77, 821, 823,
	481, 188, 480, 479, 188, 1153, 48, 449, 450, 451,
	981, 454, 913, 605, 792, 479, 471, 1064, 458, 481,
	1012, 526, 1094, 666, 528, 480, 479, 1283, 188, 188,
	77, 481, 1096, 302, 188, 1243, 77, 470, 853, 1016,
	622, 1144, 481, 851, 849, 1249, 1247, 850, 476, 440,
	731, 536, 1304, 540, 528, 542, 543, 544, 545, 546,
	547, 548, 549, 537, 552, 554, 554, 554, 554, 554,
	554, 554, 554, 562, 563, 564, 565, 1266, 1166, 635,
	941, 822, 1293, 736, 585, 432, 433, 434, 853, 1058,
	1210, 1056, 853, 914, 537, 1063, 422, 734, 735, 733,
	648, 649, 650, 651, 652, 653, 654, 1209, 655, 656,
	657, 658, 659, 636, 637, 638, 639, 620, 621, 459,
	1138, 623, 763, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 640, 641, 642, 643, 644, 645, 646,
	647, 792, 188, 965, 188, 764, 765, 1031, 856, 954,
	188, 1030, 953, 857, 599, 472, 1019, 188, 593, 1305,
	955, 77, 77, 77, 77, 1281, 77, 480, 479, 424,
	425, 1224, 1207, 77, 555, 556, 557, 558, 559, 560,
	561, 927, 928, 929, 481, 175, 1047, 768, 762, 769,
	504, 505, 506, 507, 508, 501, 1161, 1028, 516, 1278,
	447, 77, 515, 1131, 511, 512, 513, 514, 447, 1130,
	480, 479, 1013, 517, 527, 1004, 1045, 1234, 1317, 447,
	447, 447, 447, 447, 447, 447, 447, 481, 1308, 461,
	661, 1234, 1286, 447, 447, 1234, 461, 515, 670, 511,
	512, 513, 514, 889, 541, 771, 698, 296, 517, 681,
	682, 683, 684, 685, 686, 687, 688, 680, 1234, 1235,
	704, 677, 188, 689, 690, 613, 1201, 1200, 461, 188,
	188, 188, 270, 676, 302, 77, 667, 702, 703, 1119,
	461, 77, 678, 665, 728, 697, 1188, 461, 1046, 728,
	728, 660, 438, 1051, 1048, 1041, 1042, 1049, 1044, 1043,
	480, 479, 1150, 1149, 75, 1146, 1147, 725, 431, 48,
	1050, 1146, 1145, 948, 461, 706, 1053, 481, 417, 537,
	1254, 540, 1253, 979, 721, 480, 479, 740, 741, 739,
	1140, 779, 723, 980, 717, 719, 720, 316, 501, 718,
	777, 516, 481, 421, 596, 515, 55, 511, 512, 513,
	514, 303, 303, 303, 303, 303, 517, 570, 461, 777,
	461, 784, 787, 612, 611, 516, 585, 793, 824, 515,
	1184, 511, 512, 513, 514, 303, 779, 1098, 979, 570,
	517, 979, 796, 1152, 804, 77, 789, 597, 948, 980,
	595, 188, 188, 77, 1071, 188, 960, 828, 188, 957,
	24, 1148, 188, 24, 77, 77, 77, 77, 77, 77,
	77, 77, 1005, 806, 807, 817, 809, 805, 77, 77,
	808, 832, 24, 188, 868, 869, 870, 826, 825, 1229,
	830, 831, 780, 781, 570, 948, 598, 569, 788, 77,
	948, 846, 959, 188, 700, 956, 447, 973, 447, 77,
	51, 974, 795, 51, 797, 798, 447, 51, 1214, 827,
	729, 1047, 595, 570, 22, 729, 729, 226, 316, 316,
	316, 316, 51, 316, 861, 1113, 890, 1008, 892, 881,
	316, 877, 872, 878, 879, 871, 911, 882, 664, 66,
	1297, 1045, 1133, 862, 863, 864, 865, 884, 261, 260,
	263, 264, 265, 266, 1098, 931, 262, 267, 484, 873,
	874, 875, 575, 578, 579, 580, 576, 51, 577, 581,
	725, 224, 984, 985, 984, 985, 919, 920, 728, 1032,
	987, 674, 457, 188, 712, 990, 188, 188, 188, 188,
	188, 302, 302, 302, 302, 302, 989, 814, 188, 812,
	811, 188, 815, 810, 813, 188, 302, 466, 230, 231,
	188, 188, 239, 1046, 77, 302, 934, 1321, 1051, 1048,
	1041, 1042, 1049, 1044, 1043, 1310, 816, 77, 579, 580,
	976, 977, 316, 1067, 915, 1050, 475, 1320, 607, 925,
	975, 1040, 1314, 186, 924, 1322, 211, 1023, 463, 610,
	439, 926, 473, 575, 578, 579, 580, 576, 303, 577,
	581, 464, 964, 1285, 996, 1015, 998, 1313, 236, 1284,
	186, 186, 1227, 460, 448, 1009, 186, 1226, 188, 1182,
	997, 77, 988, 77, 1215, 891, 942, 188, 1006, 673,
	188, 77, 583, 227, 228, 475, 221, 1259, 923, 222,
	55, 1022, 999, 1024, 1025, 1026, 922, 1258, 1217, 980,
	477, 1020, 1021, 947, 1272, 1205, 447, 695, 1010, 1011,
	57, 59, 594, 52, 1, 888, 1035, 897, 1287, 962,
	1240, 1127, 848, 840, 415, 1029, 65, 1279, 847, 314,
	1246, 447, 316, 1203, 855, 1017, 1034, 1038, 858, 1132,
	316, 1282, 1014, 617, 729, 615, 616, 1052, 614, 619,
	618, 316, 316, 316, 316, 316, 316, 316, 316, 199,
	1076, 1061, 309, 582, 606, 316, 316, 883, 478, 67,
	1055, 235, 1054, 893, 186, 1062, 186, 691, 912, 304,
	1075, 455, 186, 201, 1077, 525, 708, 921, 1000, 186,
	1074, 315, 1268, 1267, 1296, 1103, 484, 48, 1225, 316,
	1181, 1084, 1105, 1086, 1085, 1083, 701, 1104, 467, 1102,
	1257, 1216, 1115, 1116, 1117, 185, 1093, 963, 550, 725,
	790, 1109, 247, 716, 1107, 1121, 259, 256, 804, 1099,
	77, 258, 1108, 188, 804, 257, 707, 972, 302, 488,
	245, 237, 301, 307, 1126, 1141, 1142, 77, 419, 566,
	1120, 1125, 529, 530, 531, 532, 533, 534, 535, 785,
	785, 574, 572, 571, 986, 785, 500, 499, 509, 510,
	502, 503, 504, 505, 506, 507, 508, 501, 982, 300,
	516, 1070, 785, 1154, 515, 1178, 511, 512, 513, 514,
	77, 77, 303, 77, 186, 517, 1156, 1264, 1163, 1159,
	711, 186, 590, 186, 26, 56, 232, 19, 18, 17,
	20, 316, 21, 1177, 1164, 16, 77, 15, 14, 188,
	188, 939, 30, 13, 316, 12, 11, 188, 10, 9,
	8, 7, 6, 5, 4, 223, 77, 23, 1191, 0,
	0, 1194, 1195, 1196, 1183, 0, 0, 0, 0, 0,
	1199, 0, 0, 0, 0, 0, 427, 0, 428, 1197,
	0, 0, 1006, 0, 435, 0, 0, 0, 0, 0,
	0, 437, 447, 0, 314, 0, 0, 0, 316, 0,
	316, 0, 77, 77, 1206, 0, 1208, 0, 316, 0,
	1213, 0, 1212, 465, 469, 0, 0, 0, 0, 0,
	0, 0, 1211, 0, 0, 1103, 0, 0, 1231, 0,
	487, 77, 316, 77, 77, 0, 0, 1228, 1230, 1102,
	0, 0, 0, 186, 186, 0, 0, 186, 0, 0,
	186, 1251, 0, 1252, 679, 1239, 1256, 1245, 188, 0,
	1255, 0, 1202, 0, 539, 0, 77, 0, 0, 0,
	1103, 0, 48, 0, 551, 186, 0, 0, 0, 77,
	188, 0, 1274, 1273, 1102, 0, 77, 0, 0, 1277,
	0, 0, 0, 0, 77, 186, 568, 188, 0, 0,
	0, 0, 302, 0, 679, 592, 1291, 0, 0, 0,
	0, 726, 0, 1298, 737, 738, 0, 1300, 0, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 1306, 77,
	770, 77, 77, 77, 188, 77, 1315, 804, 1301, 1318,
	0, 77, 1319, 0, 236, 705, 0, 995, 0, 0,
	236, 236, 0, 0, 786, 786, 236, 1329, 0, 0,
	786, 724, 0, 1328, 316, 0, 0, 77, 77, 77,
	236, 236, 236, 236, 0, 186, 0, 786, 186, 186,
	186, 186, 186, 0, 0, 0, 0, 804, 1325, 0,
	818, 0, 0, 186, 0, 0, 0, 590, 0, 0,
	0, 0, 186, 186, 77, 77, 0, 1033, 316, 0,
	316, 776, 778, 0, 0, 668, 669, 77, 0, 672,
	0, 0, 675, 0, 0, 0, 0, 0, 794, 0,
	77, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 694, 0, 0,
	77, 903, 0, 316, 0, 0, 0, 0, 819, 0,
	0, 714, 715, 0, 0, 0, 902, 713, 0, 0,
	186, 0, 0, 314, 0, 0, 0, 0, 0, 186,
	0, 316, 186, 0, 0, 0, 843, 77, 0, 0,
	0, 77, 0, 0, 0, 907, 785, 0, 0, 1106,
	995, 0, 785, 901, 0, 77, 0, 679, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 236,
	0, 0, 539, 0, 0, 0, 782, 783, 316, 0,
	316, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 936, 937,
	0, 0, 0, 0, 0, 0, 0, 801, 0, 0,
	898, 895, 896, 1155, 894, 0, 0, 0, 0, 1175,
	461, 0, 0, 0, 724, 0, 1157, 0, 0, 0,
	0, 236, 0, 1160, 0, 829, 0, 837, 0, 905,
	908, 316, 0, 0, 0, 0, 0, 236, 0, 0,
	0, 0, 0, 0, 0, 500, 499, 509, 510, 502,
	503, 504, 505, 506, 507, 508, 501, 0, 0, 516,
	0, 0, 0, 515, 900, 511, 512, 513, 514, 0,
	0, 0, 0, 0, 517, 186, 1193, 0, 1193, 1193,
	1193, 0, 1198, 0, 0, 945, 946, 899, 316, 0,
	0, 0, 885, 950, 951, 952, 0, 0, 0, 0,
	0, 909, 961, 0, 910, 0, 0, 967, 0, 968,
	969, 970, 971, 0, 316, 316, 316, 0, 0, 916,
	917, 0, 469, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 906, 24, 25,
	49, 27, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 1232, 1233, 0, 0, 0, 843, 44, 0, 0,
	0, 1065, 1066, 29, 1129, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 1193, 0, 236,
	0, 0, 0, 38, 0, 0, 0, 0, 51, 1270,
	0, 0, 1079, 1080, 0, 0, 236, 1276, 0, 949,
	0, 0, 1037, 0, 0, 0, 679, 0, 0, 1087,
	1088, 0, 1090, 1091, 966, 0, 0, 0, 0, 0,
	0, 786, 0, 0, 0, 0, 0, 786, 0, 0,
	0, 0, 0, 0, 1193, 785, 0, 0, 1303, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 1309, 0, 0, 31, 32, 34, 33, 214,
	0, 1082, 1316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 37, 45, 43, 0,
	186, 46, 47, 35, 0, 785, 0, 502, 503, 504,
	505, 506, 507, 508, 501, 39, 40, 516, 41, 42,
	0, 515, 186, 511, 512, 513, 514, 0, 1118, 0,
	0, 0, 517, 0, 24, 25, 49, 27, 28, 186,
	843, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 1167, 0, 44, 0, 0, 0, 0, 0, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 539, 0, 0, 0, 38,
	0, 0, 0, 0, 51, 0, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 1073, 0, 0, 0, 1095, 1165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1168, 1169,
	1170, 1171, 1110, 1111, 1174, 0, 1112, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 0, 1185, 1186, 1187,
	0, 1190, 0, 0, 0, 1218, 1219, 0, 1220, 1221,
	1222, 31, 32, 34, 33, 36, 0, 0, 191, 0,
	843, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 37, 45, 43, 0, 0, 46, 47, 35,
	0, 0, 1151, 0, 0, 0, 0, 1037, 843, 0,
	0, 39, 40, 0, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 1158, 0, 1162, 0, 0, 0,
	0, 0, 1223, 0, 0, 0, 0, 0, 0, 0,
	1172, 461, 0, 0, 0, 0, 0, 0, 1236, 1237,
	1238, 0, 0, 0, 0, 0, 0, 0, 1180, 0,
	786, 0, 0, 0, 0, 539, 0, 0, 0, 0,
	0, 0, 1260, 1261, 1262, 1263, 500, 499, 509, 510,
	502, 503, 504, 505, 506, 507, 508, 501, 0, 0,
	516, 0, 0, 0, 515, 50, 511, 512, 513, 514,
	0, 0, 0, 0, 0, 517, 0, 0, 0, 0,
	786, 0, 0, 0, 0, 0, 0, 0, 1292, 0,
	0, 0, 1331, 0, 0, 0, 404, 394, 1302, 365,
	406, 343, 357, 414, 358, 359, 387, 329, 373, 127,
	355, 1307, 346, 324, 352, 325, 344, 367, 95, 90,
	370, 342, 396, 376, 109, 381, 412, 111, 382, 0,
	144, 120, 0, 0, 369, 398, 371, 392, 364, 388,
	334, 380, 407, 356, 385, 408, 0, 0, 0, 0,
	76, 0, 844, 845, 0, 1333, 1334, 0, 87, 0,
	384, 403, 354, 386, 322, 383, 0, 327, 330, 413,
	401, 349, 350, 1007, 0, 0, 0, 0, 0, 0,
	368, 372, 389, 362, 0, 0, 0, 0, 0, 0,
	1290, 539, 347, 0, 379, 0, 0, 0, 331, 328,
	0, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 0, 348, 390, 0, 321,
	393, 399, 363, 189, 402, 361, 360, 405, 133, 0,
	0, 147, 100, 99, 108, 397, 345, 353, 91, 351,
	139, 129, 159, 378, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 79, 148, 157, 88, 141, 81,
	155, 146, 118, 104, 105, 80, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 84, 164, 83, 85,
	163, 125, 150, 156, 119, 116, 82, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	323, 0, 326, 0, 145, 161, 174, 341, 400, 167,
	168, 169, 170, 0, 0, 0, 124, 86, 103, 142,
	106, 113, 136, 172, 128, 140, 89, 160, 143, 337,
	340, 335, 336, 374, 375, 409, 410, 411, 391, 332,
	0, 338, 339, 0, 395, 377, 78, 0, 110, 171,
	135, 97, 162, 404, 394, 0, 365, 406, 343, 357,
	414, 358, 359, 387, 329, 373, 127, 355, 0, 346,
	324, 352, 325, 344, 367, 95, 90, 370, 342, 396,
	376, 109, 381, 412, 111, 382, 0, 144, 120, 0,
	0, 369, 398, 371, 392, 364, 388, 334, 380, 407,
	356, 385, 408, 0, 0, 0, 0, 76, 0, 844,
	845, 0, 0, 0, 0, 87, 0, 384, 403, 354,
	386, 322, 383, 0, 327, 330, 413, 401, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 368, 372, 389,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	0, 379, 0, 0, 0, 331, 328, 0, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 348, 390, 0, 321, 393, 399, 363,
	189, 402, 361, 360, 405, 133, 0, 0, 147, 100,
	99, 108, 397, 345, 353, 91, 351, 139, 129, 159,
	378, 130, 138, 112, 151, 134, 158, 190, 166, 149,
	165, 79, 148, 157, 88, 141, 81, 155, 146, 118,
	104, 105, 80, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 84, 164, 83, 85, 163, 125, 150,
	156, 119, 116, 82, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 323, 0, 326,
	0, 145, 161, 174, 341, 400, 167, 168, 169, 170,
	0, 0, 0, 124, 86, 103, 142, 106, 113, 136,
	172, 128, 140, 89, 160, 143, 337, 340, 335, 336,
	374, 375, 409, 410, 411, 391, 332, 0, 338, 339,
	0, 395, 377, 78, 0, 110, 171, 135, 97, 162,
	404, 394, 0, 365, 406, 343, 357, 414, 358, 359,
	387, 329, 373, 127, 355, 0, 346, 324, 352, 325,
	344, 367, 95, 90, 370, 342, 396, 376, 109, 381,
	412, 111, 382, 0, 144, 120, 0, 0, 369, 398,
	371, 392, 364, 388, 334, 380, 407, 356, 385, 408,
	0, 51, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 384, 403, 354, 386, 322, 383,
	0, 327, 330, 413, 401, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 368, 372, 389, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 379, 0,
	0, 0, 331, 328, 0, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 0,
	348, 390, 0, 321, 393, 399, 363, 189, 402, 361,
	360, 405, 133, 0, 0, 147, 100, 99, 108, 397,
	345, 353, 91, 351, 139, 129, 159, 378, 130, 138,
	112, 151, 134, 158, 190, 166, 149, 165, 79, 148,
	157, 88, 141, 81, 155, 146, 118, 104, 105, 80,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	84, 164, 83, 85, 163, 125, 150, 156, 119, 116,
	82, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 323, 0, 326, 0, 145, 161,
	174, 341, 400, 167, 168, 169, 170, 0, 0, 0,
	124, 86, 103, 142, 106, 113, 136, 172, 128, 140,
	89, 160, 143, 337, 340, 335, 336, 374, 375, 409,
	410, 411, 391, 332, 0, 338, 339, 0, 395, 377,
	78, 0, 110, 171, 135, 97, 162, 404, 394, 0,
	365, 406, 343, 357, 414, 358, 359, 387, 329, 373,
	127, 355, 0, 346, 324, 352, 325, 344, 367, 95,
	90, 370, 342, 396, 376, 109, 381, 412, 111, 382,
	0, 144, 120, 0, 0, 369, 398, 371, 392, 364,
	388, 334, 380, 407, 356, 385, 408, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 384, 403, 354, 386, 322, 383, 0, 327, 330,
	413, 401, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 368, 372, 389, 362, 0, 0, 0, 0, 0,
	0, 1072, 0, 347, 0, 379, 0, 0, 0, 331,
	328, 0, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 348, 390, 0,
	321, 393, 399, 363, 189, 402, 361, 360, 405, 133,
	0, 0, 147, 100, 99, 108, 397, 345, 353, 91,
	351, 139, 129, 159, 378, 130, 138, 112, 151, 134,
	158, 190, 166, 149, 165, 79, 148, 157, 88, 141,
	81, 155, 146, 118, 104, 105, 80, 0, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 84, 164, 83,
	85, 163, 125, 150, 156, 119, 116, 82, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 323, 0, 326, 0, 145, 161, 174, 341, 400,
	167, 168, 169, 170, 0, 0, 0, 124, 86, 103,
	142, 106, 113, 136, 172, 128, 140, 89, 160, 143,
	337, 340, 335, 336, 374, 375, 409, 410, 411, 391,
	332, 0, 338, 339, 0, 395, 377, 78, 0, 110,
	171, 135, 97, 162, 404, 394, 0, 365, 406, 343,
	357, 414, 358, 359, 387, 329, 373, 127, 355, 0,
	346, 324, 352, 325, 344, 367, 95, 90, 370, 342,
	396, 376, 109, 381, 412, 111, 382, 0, 144, 120,
	0, 0, 369, 398, 371, 392, 364, 388, 334, 380,
	407, 356, 385, 408, 0, 0, 0, 0, 241, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 384, 403,
	354, 386, 322, 383, 0, 327, 330, 413, 401, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 368, 372,
	389, 362, 0, 0, 0, 0, 0, 0, 722, 0,
	347, 0, 379, 0, 0, 0, 331, 328, 0, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 0, 348, 390, 0, 321, 393, 399,
	363, 189, 402, 361, 360, 405, 133, 0, 0, 147,
	100, 99, 108, 397, 345, 353, 91, 351, 139, 129,
	159, 378, 130, 138, 112, 151, 134, 158, 190, 166,
	149, 165, 79, 148, 157, 88, 141, 81, 155, 146,
	118, 104, 105, 80, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 84, 164, 83, 85, 163, 125,
	150, 156, 119, 116, 82, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 323, 0,
	326, 0, 145, 161, 174, 341, 400, 167, 168, 169,
	170, 0, 0, 0, 124, 86, 103, 142, 106, 113,
	136, 172, 128, 140, 89, 160, 143, 337, 340, 335,
	336, 374, 375, 409, 410, 411, 391, 332, 0, 338,
	339, 0, 395, 377, 78, 0, 110, 171, 135, 97,
	162, 404, 394, 0, 365, 406, 343, 357, 414, 358,
	359, 387, 329, 373, 127, 355, 0, 346, 324, 352,
	325, 344, 367, 95, 90, 370, 342, 396, 376, 109,
	381, 412, 111, 382, 0, 144, 120, 0, 0, 369,
	398, 371, 392, 364, 388, 334, 380, 407, 356, 385,
	408, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 384, 403, 354, 386, 322,
	383, 0, 327, 330, 413, 401, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 368, 372, 389, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 0, 379,
	0, 0, 0, 331, 328, 0, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	0, 348, 390, 0, 321, 393, 399, 363, 189, 402,
	361, 360, 405, 133, 0, 0, 147, 100, 99, 108,
	397, 345, 353, 91, 351, 139, 129, 159, 378, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 79,
	148, 157, 88, 141, 81, 155, 146, 118, 104, 105,
	80, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 84, 164, 83, 85, 163, 125, 150, 156, 119,
	116, 82, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 323, 0, 326, 0, 145,
	161, 174, 341, 400, 167, 168, 169, 170, 0, 0,
	0, 124, 86, 103, 142, 106, 113, 136, 172, 128,
	140, 89, 160, 143, 337, 340, 335, 336, 374, 375,
	409, 410, 411, 391, 332, 0, 338, 339, 0, 395,
	377, 78, 0, 110, 171, 135, 97, 162, 404, 394,
	0, 365, 406, 343, 357, 414, 358, 359, 387, 329,
	373, 127, 355, 0, 346, 324, 352, 325, 344, 367,
	95, 90, 370, 342, 396, 376, 109, 381, 412, 111,
	382, 0, 144, 120, 0, 0, 369, 398, 371, 392,
	364, 388, 334, 380, 407, 356, 385, 408, 0, 0,
	0, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 384, 403, 354, 386, 322, 383, 0, 327,
	330, 413, 401, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 368, 372, 389, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 379, 0, 0, 0,
	331, 328, 0, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 348, 390,
	0, 321, 393, 399, 363, 189, 402, 361, 360, 405,
	133, 0, 0, 147, 100, 99, 108, 397, 345, 353,
	91, 351, 139, 129, 159, 378, 130, 138, 112, 151,
	134, 158, 190, 166, 149, 165, 79, 148, 157, 88,
	141, 81, 155, 146, 118, 104, 105, 80, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 84, 164,
	83, 85, 163, 125, 150, 156, 119, 116, 82, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 323, 0, 326, 0, 145, 161, 174, 341,
	400, 167, 168, 169, 170, 0, 0, 0, 124, 86,
	103, 142, 106, 113, 136, 172, 128, 140, 89, 160,
	143, 337, 340, 335, 336, 374, 375, 409, 410, 411,
	391, 332, 0, 338, 339, 0, 395, 377, 78, 0,
	110, 171, 135, 97, 162, 404, 394, 0, 365, 406,
	343, 357, 414, 358, 359, 387, 329, 373, 127, 355,
	0, 346, 324, 352, 325, 344, 367, 95, 90, 370,
	342, 396, 376, 109, 381, 412, 111, 382, 0, 144,
	120, 0, 0, 369, 398, 371, 392, 364, 388, 334,
	380, 407, 356, 385, 408, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 384,
	403, 354, 386, 322, 383, 0, 327, 330, 413, 401,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 368,
	372, 389, 362, 0, 0, 0, 0, 0, 0, 0,
	0, 347, 0, 379, 0, 0, 0, 331, 328, 0,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 333, 0, 348, 390, 0, 321, 393,
	399, 363, 189, 402, 361, 360, 405, 133, 0, 0,
	147, 100, 99, 108, 397, 345, 353, 91, 351, 139,
	129, 159, 378, 130, 138, 112, 151, 134, 158, 190,
	166, 149, 165, 79, 148, 157, 88, 141, 81, 155,
	146, 118, 104, 105, 80, 0, 137, 94, 98, 93,
	126, 152, 153, 92, 173, 84, 164, 83, 319, 163,
	125, 150, 156, 119, 116, 82, 154, 117, 115, 107,
	96, 101, 131, 114, 132, 102, 122, 121, 123, 323,
	0, 326, 0, 145, 161, 174, 341, 400, 167, 168,
	169, 170, 0, 0, 0, 320, 318, 103, 142, 106,
	113, 136, 172, 128, 140, 89, 160, 143, 337, 340,
	335, 336, 374, 375, 409, 410, 411, 391, 332, 0,
	338, 339, 0, 395, 377, 78, 0, 110, 171, 135,
	97, 162, 404, 394, 0, 365, 406, 343, 357, 414,
	358, 359, 387, 329, 373, 127, 355, 0, 346, 324,
	352, 325, 344, 367, 95, 90, 370, 342, 396, 376,
	109, 381, 412, 111, 382, 0, 144, 120, 0, 0,
	369, 398, 371, 392, 364, 388, 334, 380, 407, 356,
	385, 408, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 384, 403, 354, 386,
	322, 383, 0, 327, 330, 413, 401, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 368, 372, 389, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	379, 0, 0, 0, 331, 328, 0, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 348, 390, 0, 321, 393, 399, 363, 189,
	402, 361, 360, 405, 133, 0, 0, 147, 100, 99,
	108, 397, 345, 353, 91, 351, 139, 129, 159, 378,
	130, 138, 112, 151, 134, 158, 190, 166, 149, 165,
	79, 148, 157, 88, 141, 81, 155, 146, 118, 104,
	105, 80, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 84, 164, 83, 85, 163, 125, 150, 156,
	119, 116, 82, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 323, 0, 326, 0,
	145, 161, 174, 341, 400, 167, 168, 169, 170, 0,
	0, 0, 124, 86, 103, 142, 106, 113, 136, 172,
	128, 140, 89, 160, 143, 337, 340, 335, 336, 374,
	375, 409, 410, 411, 391, 332, 0, 338, 339, 0,
	395, 377, 78, 0, 110, 171, 135, 97, 162, 404,
	394, 0, 365, 406, 343, 357, 414, 358, 359, 387,
	329, 373, 127, 355, 0, 346, 324, 352, 325, 344,
	367, 95, 90, 370, 342, 396, 376, 109, 381, 412,
	111, 382, 0, 144, 120, 0, 0, 369, 398, 371,
	392, 364, 388, 334, 380, 407, 356, 385, 408, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 384, 403, 354, 386, 322, 383, 0,
	327, 330, 413, 401, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 368, 372, 389, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 0, 379, 0, 0,
	0, 331, 328, 0, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 348,
	390, 0, 321, 393, 399, 363, 189, 402, 361, 360,
	405, 133, 0, 0, 147, 100, 99, 108, 397, 345,
	353, 91, 351, 139, 129, 159, 378, 130, 138, 112,
	151, 134, 158, 190, 166, 149, 165, 79, 148, 600,
	88, 141, 81, 155, 146, 118, 104, 105, 80, 0,
	137, 94, 98, 93, 126, 152, 153, 92, 173, 84,
	164, 83, 319, 163, 125, 150, 156, 119, 116, 82,
	154, 117, 115, 107, 96, 101, 131, 114, 132, 102,
	122, 121, 123, 323, 0, 326, 0, 145, 161, 174,
	341, 400, 167, 168, 169, 170, 0, 0, 0, 320,
	318, 103, 142, 106, 113, 136, 172, 128, 140, 89,
	160, 143, 337, 340, 335, 336, 374, 375, 409, 410,
	411, 391, 332, 0, 338, 339, 0, 395, 377, 78,
	0, 110, 171, 135, 97, 162, 404, 394, 0, 365,
	406, 343, 357, 414, 358, 359, 387, 329, 373, 127,
	355, 0, 346, 324, 352, 325, 344, 367, 95, 90,
	370, 342, 396, 376, 109, 381, 412, 111, 382, 0,
	144, 120, 0, 0, 369, 398, 371, 392, 364, 388,
	334, 380, 407, 356, 385, 408, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	384, 403, 354, 386, 322, 383, 0, 327, 330, 413,
	401, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	368, 372, 389, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 379, 0, 0, 0, 331, 328,
	0, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 0, 348, 390, 0, 321,
	393, 399, 363, 189, 402, 361, 360, 405, 133, 0,
	0, 147, 100, 99, 108, 397, 345, 353, 91, 351,
	139, 129, 159, 378, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 79, 148, 310, 88, 141, 81,
	155, 146, 118, 104, 105, 80, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 84, 164, 83, 319,
	163, 125, 150, 156, 119, 116, 82, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	323, 0, 326, 0, 145, 161, 174, 341, 400, 167,
	168, 169, 170, 0, 0, 0, 320, 318, 313, 312,
	106, 113, 136, 172, 128, 140, 89, 160, 143, 337,
	340, 335, 336, 374, 375, 409, 410, 411, 391, 332,
	0, 338, 339, 0, 395, 377, 78, 0, 110, 171,
	135, 97, 162, 127, 0, 0, 773, 0, 243, 0,
	0, 0, 95, 90, 0, 240, 0, 0, 109, 0,
	283, 111, 0, 0, 144, 120, 0, 0, 0, 0,
	274, 275, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 241, 261, 260, 263, 264, 265,
	266, 0, 87, 262, 267, 268, 269, 0, 0, 238,
	254, 0, 282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 234, 0, 0, 0, 294, 0,
	253, 0, 0, 249, 250, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	292, 0, 133, 0, 0, 147, 100, 99, 108, 0,
	0, 0, 91, 0, 139, 129, 159, 0, 130, 138,
	112, 151, 134, 158, 190, 166, 149, 165, 79, 148,
	157, 88, 141, 81, 155, 146, 118, 104, 105, 80,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	84, 164, 83, 85, 163, 125, 150, 156, 119, 116,
	82, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 273, 0, 0, 0, 145, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	124, 86, 103, 142, 106, 113, 136, 172, 128, 140,
	89, 160, 143, 284, 293, 290, 291, 288, 289, 287,
	286, 285, 295, 276, 277, 278, 279, 281, 0, 280,
	78, 0, 110, 171, 135, 97, 162, 127, 0, 0,
	0, 0, 243, 0, 0, 0, 95, 90, 0, 240,
	0, 0, 109, 0, 283, 111, 0, 0, 144, 120,
	0, 0, 0, 0, 274, 275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 461, 241, 261,
	260, 263, 264, 265, 266, 0, 87, 262, 267, 268,
	269, 0, 0, 238, 254, 0, 282, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 0, 0,
	0, 0, 294, 0, 253, 0, 0, 249, 250, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 0, 0, 292, 0, 133, 0, 0, 147,
	100, 99, 108, 0, 0, 0, 91, 0, 139, 129,
	159, 0, 130, 138, 112, 151, 134, 158, 190, 166,
	149, 165, 79, 148, 157, 88, 141, 81, 155, 146,
	118, 104, 105, 80, 0, 137, 94, 98, 93, 126,
	152, 153, 92, 173, 84, 164, 83, 85, 163, 125,
	150, 156, 119, 116, 82, 154, 117, 115, 107, 96,
	101, 131, 114, 132, 102, 122, 121, 123, 273, 0,
	0, 0, 145, 161, 174, 0, 0, 167, 168, 169,
	170, 0, 0, 0, 124, 86, 103, 142, 106, 113,
	136, 172, 128, 140, 89, 160, 143, 284, 293, 290,
	291, 288, 289, 287, 286, 285, 295, 276, 277, 278,
	279, 281, 0, 280, 78, 0, 110, 171, 135, 97,
	162, 127, 0, 0, 0, 0, 243, 0, 0, 0,
	95, 90, 0, 240, 0, 0, 109, 0, 283, 111,
	0, 0, 144, 120, 0, 0, 0, 0, 274, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 241, 261, 260, 263, 264, 265, 266, 0,
	87, 262, 267, 268, 269, 0, 0, 238, 254, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 234, 0, 0, 0, 294, 0, 253, 0,
	0, 249, 250, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 292, 0,
	133, 0, 0, 147, 100, 99, 108, 0, 0, 0,
	91, 0, 139, 129, 159, 0, 130, 138, 112, 151,
	134, 158, 190, 166, 149, 165, 79, 148, 157, 88,
	141, 81, 155, 146, 118, 104, 105, 80, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 84, 164,
	83, 85, 163, 125, 150, 156, 119, 116, 82, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 273, 0, 0, 0, 145, 161, 174, 0,
	0, 167, 168, 169, 170, 0, 0, 0, 124, 86,
	103, 142, 106, 113, 136, 172, 128, 140, 89, 160,
	143, 284, 293, 290, 291, 288, 289, 287, 286, 285,
	295, 276, 277, 278, 279, 281, 0, 280, 78, 0,
	110, 171, 135, 97, 162, 127, 0, 0, 0, 0,
	243, 0, 0, 0, 95, 90, 0, 240, 0, 0,
	109, 0, 283, 111, 0, 0, 144, 120, 0, 0,
	0, 0, 274, 275, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 51, 0, 0, 241, 261, 260, 263,
	264, 265, 266, 0, 87, 262, 267, 268, 269, 0,
	0, 238, 254, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 0, 0, 0, 0,
	294, 0, 253, 0, 0, 249, 250, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	0, 0, 292, 0, 133, 0, 0, 147, 100, 99,
	108, 0, 0, 0, 91, 0, 139, 129, 159, 0,
	130, 138, 112, 151, 134, 158, 190, 166, 149, 165,
	79, 148, 157, 88, 141, 81, 155, 146, 118, 104,
	105, 80, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 84, 164, 83, 85, 163, 125, 150, 156,
	119, 116, 82, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 273, 0, 0, 0,
	145, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 124, 86, 103, 142, 106, 113, 136, 172,
	128, 140, 89, 160, 143, 284, 293, 290, 291, 288,
	289, 287, 286, 285, 295, 276, 277, 278, 279, 281,
	24, 280, 78, 0, 110, 171, 135, 97, 162, 0,
	0, 0, 127, 0, 0, 0, 0, 243, 0, 0,
	0, 95, 90, 0, 240, 0, 0, 109, 0, 283,
	111, 0, 0, 144, 120, 0, 0, 0, 0, 274,
	275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 241, 261, 260, 263, 264, 265, 266,
	0, 87, 262, 267, 268, 269, 0, 0, 238, 254,
	0, 282, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 0, 0, 0, 0, 294, 0, 253,
	0, 0, 249, 250, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 0, 0, 292,
	0, 133, 0, 0, 147, 100, 99, 108, 0, 0,
	0, 91, 0, 139, 129, 159, 0, 130, 138, 112,
	151, 134, 158, 190, 166, 149, 165, 79, 148, 157,
	88, 141, 81, 155, 146, 118, 104, 105, 80, 0,
	137, 94, 98, 93, 126, 152, 153, 92, 173, 84,
	164, 83, 85, 163, 125, 150, 156, 119, 116, 82,
	154, 117, 115, 107, 96, 101, 131, 114, 132, 102,
	122, 121, 123, 273, 0, 0, 0, 145, 161, 174,
	0, 0, 167, 168, 169, 170, 0, 0, 0, 124,
	86, 103, 142, 106, 113, 136, 172, 128, 140, 89,
	160, 143, 284, 293, 290, 291, 288, 289, 287, 286,
	285, 295, 276, 277, 278, 279, 281, 0, 280, 78,
	0, 110, 171, 135, 97, 162, 127, 0, 0, 0,
	0, 243, 0, 0, 0, 95, 90, 0, 240, 0,
	0, 109, 0, 283, 111, 0, 0, 144, 120, 0,
	0, 0, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 241, 261, 260,
	263, 264, 265, 266, 0, 87, 262, 267, 268, 269,
	0, 0, 238, 254, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 0, 0, 0,
	0, 294, 0, 253, 0, 0, 249, 250, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 292, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 130, 138, 112, 151, 134, 158, 190, 166, 149,
	165, 79, 148, 157, 88, 141, 81, 155, 146, 118,
	104, 105, 80, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 84, 164, 83, 85, 163, 125, 150,
	156, 119, 116, 82, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 273, 0, 0,
	0, 145, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 124, 86, 103, 142, 106, 113, 136,
	172, 128, 140, 89, 160, 143, 284, 293, 290, 291,
	288, 289, 287, 286, 285, 295, 276, 277, 278, 279,
	281, 127, 280, 78, 0, 110, 171, 135, 97, 162,
	95, 90, 0, 0, 0, 0, 109, 0, 283, 111,
	0, 0, 144, 120, 0, 0, 0, 0, 274, 275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 241, 261, 260, 263, 264, 265, 266, 0,
	87, 262, 267, 268, 269, 0, 0, 0, 254, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 0, 0, 0, 0, 294, 0, 253, 0,
	0, 249, 250, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 0, 0, 292, 0,
	133, 0, 0, 147, 100, 99, 108, 0, 0, 0,
	91, 0, 139, 129, 159, 1332, 130, 138, 112, 151,
	134, 158, 190, 166, 149, 165, 79, 148, 157, 88,
	141, 81, 155, 146, 118, 104, 105, 80, 0, 137,
	94, 98, 93, 126, 152, 153, 92, 173, 84, 164,
	83, 85, 163, 125, 150, 156, 119, 116, 82, 154,
	117, 115, 107, 96, 101, 131, 114, 132, 102, 122,
	121, 123, 273, 0, 0, 0, 145, 161, 174, 0,
	0, 167, 168, 169, 170, 0, 0, 0, 124, 86,
	103, 142, 106, 113, 136, 172, 128, 140, 89, 160,
	143, 284, 293, 290, 291, 288, 289, 287, 286, 285,
	295, 276, 277, 278, 279, 281, 127, 280, 78, 0,
	110, 171, 135, 97, 162, 95, 90, 0, 0, 0,
	0, 109, 0, 283, 111, 0, 0, 144, 120, 0,
	0, 0, 0, 274, 275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 241, 261, 260,
	263, 264, 265, 266, 0, 87, 262, 267, 268, 269,
	0, 0, 0, 254, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 0, 0, 0,
	0, 294, 0, 253, 0, 0, 249, 250, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 0, 0, 292, 0, 133, 0, 0, 147, 100,
	99, 108, 0, 0, 0, 91, 0, 139, 129, 159,
	0, 130, 138, 112, 151, 134, 158, 190, 166, 149,
	165, 79, 148, 157, 88, 141, 81, 155, 146, 118,
	104, 105, 80, 0, 137, 94, 98, 93, 126, 152,
	153, 92, 173, 84, 164, 83, 85, 163, 125, 150,
	156, 119, 116, 82, 154, 117, 115, 107, 96, 101,
	131, 114, 132, 102, 122, 121, 123, 273, 0, 0,
	1176, 145, 161, 174, 0, 0, 167, 168, 169, 170,
	0, 0, 0, 124, 86, 103, 142, 106, 113, 136,
	172, 128, 140, 89, 160, 143, 284, 293, 290, 291,
	288, 289, 287, 286, 285, 295, 276, 277, 278, 279,
	281, 0, 280, 78, 0, 110, 171, 135, 97, 162,
	127, 0, 0, 0, 483, 0, 0, 0, 0, 95,
	90, 0, 0, 0, 0, 109, 0, 0, 111, 0,
	0, 144, 120, 0, 500, 499, 509, 510, 502, 503,
	504, 505, 506, 507, 508, 501, 0, 0, 516, 0,
	0, 76, 515, 485, 511, 512, 513, 514, 0, 87,
	0, 0, 0, 517, 480, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 490, 0, 498, 0, 0, 0,
	0, 481, 518, 519, 520, 521, 522, 523, 524, 0,
	491, 492, 489, 500, 499, 509, 510, 502, 503, 504,
	505, 506, 507, 508, 501, 0, 0, 516, 0, 0,
	0, 515, 0, 511, 512, 513, 514, 493, 494, 495,
	496, 497, 517, 0, 189, 0, 0, 0, 0, 133,
	0, 0, 147, 100, 99, 108, 0, 0, 0, 91,
	0, 139, 129, 159, 0, 130, 138, 112, 151, 134,
	158, 190, 166, 149, 165, 79, 148, 157, 88, 141,
	81, 155, 146, 118, 104, 105, 80, 634, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 84, 164, 83,
	85, 163, 125, 150, 156, 119, 116, 82, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 0, 0, 0, 0, 145, 161, 174, 0, 0,
	167, 168, 169, 170, 0, 0, 0, 124, 86, 103,
	142, 106, 113, 136, 172, 128, 140, 89, 160, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 127, 0, 78, 0, 110,
	171, 135, 97, 162, 95, 90, 0, 0, 0, 0,
	109, 0, 0, 111, 0, 0, 144, 120, 499, 509,
	510, 502, 503, 504, 505, 506, 507, 508, 501, 0,
	0, 516, 0, 635, 0, 515, 76, 511, 512, 513,
	514, 0, 0, 0, 87, 0, 517, 0, 0, 69,
	0, 0, 0, 0, 648, 649, 650, 651, 652, 653,
	654, 0, 655, 656, 657, 658, 659, 636, 637, 638,
	639, 620, 621, 0, 0, 623, 0, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 640, 641, 642,
	643, 644, 645, 646, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 73, 0, 68,
	0, 0, 0, 74, 133, 0, 0, 147, 100, 99,
	108, 0, 0, 0, 91, 0, 139, 129, 159, 0,
	130, 138, 112, 151, 134, 158, 70, 166, 149, 165,
	79, 148, 157, 88, 141, 81, 155, 146, 118, 104,
	105, 80, 0, 137, 94, 98, 93, 126, 152, 153,
	92, 173, 84, 164, 83, 85, 163, 125, 150, 156,
	119, 116, 82, 154, 117, 115, 107, 96, 101, 131,
	114, 132, 102, 122, 121, 123, 0, 0, 0, 0,
	145, 161, 174, 0, 0, 167, 168, 169, 170, 0,
	0, 0, 124, 86, 103, 142, 106, 113, 136, 172,
	128, 140, 89, 160, 143, 0, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 78, 0, 110, 171, 135, 97, 162, 95,
	90, 0, 1173, 0, 0, 109, 461, 0, 111, 0,
	0, 144, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1269, 0, 0, 1271, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 500, 499, 509, 510, 502, 503, 504, 505, 506,
	507, 508, 501, 0, 0, 516, 0, 0, 0, 515,
	0, 511, 512, 513, 514, 0, 0, 0, 0, 0,
	517, 0, 0, 0, 0, 0, 500, 499, 509, 510,
	502, 503, 504, 505, 506, 507, 508, 501, 0, 0,
	516, 0, 0, 0, 515, 0, 511, 512, 513, 514,
	0, 0, 0, 0, 189, 517, 0, 0, 0, 133,
	0, 0, 147, 100, 99, 108, 0, 0, 0, 91,
	0, 139, 129, 159, 0, 130, 138, 112, 151, 134,
	158, 190, 166, 149, 165, 79, 148, 157, 88, 141,
	81, 155, 146, 118, 104, 105, 80, 0, 137, 94,
	98, 93, 126, 152, 153, 92, 173, 84, 164, 83,
	85, 163, 125, 150, 156, 119, 116, 82, 154, 117,
	115, 107, 96, 101, 131, 114, 132, 102, 122, 121,
	123, 0, 0, 0, 0, 145, 161, 174, 0, 0,
	167, 168, 169, 170, 0, 0, 0, 124, 86, 103,
	142, 106, 113, 136, 172, 128, 140, 89, 160, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 110,
	171, 135, 97, 162, 127, 0, 0, 0, 589, 0,
	0, 0, 0, 95, 90, 0, 0, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 591, 0, 0,
	0, 0, 0, 87, 500, 499, 509, 510, 502, 503,
	504, 505, 506, 507, 508, 501, 940, 0, 516, 0,
	0, 0, 515, 0, 511, 512, 513, 514, 0, 0,
	0, 0, 0, 517, 0, 0, 500, 499, 509, 510,
	502, 503, 504, 505, 506, 507, 508, 501, 0, 0,
	516, 0, 0, 0, 515, 0, 511, 512, 513, 514,
	0, 0, 0, 0, 0, 517, 0, 0, 189, 0,
	0, 0, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 79,
	148, 157, 88, 141, 81, 155, 146, 118, 104, 105,
	80, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 84, 164, 83, 85, 163, 125, 150, 156, 119,
	116, 82, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 124, 86, 103, 142, 106, 113, 136, 172, 128,
	140, 89, 160, 143, 0, 0, 0, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 78, 0, 110, 171, 135, 97, 162, 95, 90,
	0, 0, 0, 0, 109, 0, 0, 111, 0, 0,
	144, 120, 0, 0, 500, 499, 509, 510, 502, 503,
	504, 505, 506, 507, 508, 501, 0, 51, 516, 0,
	76, 0, 515, 0, 511, 512, 513, 514, 87, 0,
	0, 0, 0, 517, 509, 510, 502, 503, 504, 505,
	506, 507, 508, 501, 0, 0, 516, 0, 0, 0,
	515, 0, 511, 512, 513, 514, 0, 0, 0, 0,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 79, 148, 157, 88, 141, 81,
	155, 146, 118, 104, 105, 80, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 84, 164, 83, 85,
	163, 125, 150, 156, 119, 116, 82, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 86, 103, 142,
	106, 113, 136, 172, 128, 140, 89, 160, 143, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 78, 0, 110, 171,
	135, 97, 162, 95, 90, 0, 0, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 79,
	148, 157, 88, 141, 81, 155, 146, 118, 104, 105,
	80, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 84, 164, 83, 85, 163, 125, 150, 156, 119,
	116, 82, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 124, 86, 103, 142, 106, 113, 136, 172, 128,
	140, 89, 160, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 78, 0, 110, 171, 135, 97, 162, 95, 90,
	0, 0, 0, 0, 109, 0, 0, 111, 0, 0,
	144, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 709, 0, 0, 710, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 79, 148, 157, 88, 141, 81,
	155, 146, 118, 104, 105, 80, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 84, 164, 83, 85,
	163, 125, 150, 156, 119, 116, 82, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 86, 103, 142,
	106, 113, 136, 172, 128, 140, 89, 160, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 78, 0, 110, 171,
	135, 97, 162, 95, 90, 0, 609, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 608, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 79,
	148, 157, 88, 141, 81, 155, 146, 118, 104, 105,
	80, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 84, 164, 83, 85, 163, 125, 150, 156, 119,
	116, 82, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 124, 86, 103, 142, 106, 113, 136, 172, 128,
	140, 89, 160, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 110, 171, 135, 97, 162, 127, 0,
	0, 0, 589, 0, 0, 0, 0, 95, 90, 0,
	0, 0, 0, 109, 0, 0, 111, 0, 0, 144,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 591, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 133, 0, 0,
	147, 100, 99, 108, 0, 0, 0, 91, 0, 139,
	129, 159, 0, 587, 138, 112, 151, 134, 158, 190,
	166, 149, 165, 79, 148, 157, 88, 141, 81, 155,
	146, 118, 104, 105, 80, 0, 137, 94, 98, 93,
	126, 152, 153, 92, 173, 84, 164, 83, 85, 163,
	125, 150, 156, 119, 116, 82, 154, 117, 115, 107,
	96, 101, 131, 114, 132, 102, 122, 121, 123, 0,
	0, 0, 0, 145, 161, 174, 0, 0, 167, 168,
	169, 170, 0, 0, 0, 124, 86, 103, 142, 106,
	113, 136, 172, 128, 140, 89, 160, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 78, 0, 110, 171, 135,
	97, 162, 95, 90, 0, 0, 0, 0, 109, 0,
	0, 111, 0, 0, 144, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 187, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 133, 0, 0, 147, 100, 99, 108, 0,
	0, 0, 91, 0, 139, 129, 159, 0, 130, 138,
	112, 151, 134, 158, 190, 166, 149, 165, 79, 148,
	157, 88, 141, 81, 155, 146, 118, 104, 105, 80,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	84, 164, 83, 85, 163, 125, 150, 156, 119, 116,
	82, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 0, 0, 0, 145, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	124, 86, 103, 142, 106, 113, 136, 172, 128, 140,
	89, 160, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	78, 0, 110, 171, 135, 97, 162, 95, 90, 0,
	0, 0, 0, 109, 0, 0, 111, 0, 0, 144,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 591, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 133, 0, 0,
	147, 100, 99, 108, 0, 0, 0, 91, 0, 139,
	129, 159, 0, 130, 138, 112, 151, 134, 158, 190,
	166, 149, 165, 79, 148, 157, 88, 141, 81, 155,
	146, 118, 104, 105, 80, 0, 137, 94, 98, 93,
	126, 152, 153, 92, 173, 84, 164, 83, 85, 163,
	125, 150, 156, 119, 116, 82, 154, 117, 115, 107,
	96, 101, 131, 114, 132, 102, 122, 121, 123, 0,
	0, 0, 0, 145, 161, 174, 0, 0, 167, 168,
	169, 170, 0, 0, 0, 124, 86, 103, 142, 106,
	113, 136, 172, 128, 140, 89, 160, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 78, 0, 110, 171, 135,
	97, 162, 95, 90, 0, 0, 0, 0, 109, 0,
	0, 111, 0, 0, 144, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 485, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 133, 0, 0, 147, 100, 99, 108, 0,
	0, 0, 91, 0, 139, 129, 159, 0, 130, 138,
	112, 151, 134, 158, 190, 166, 149, 165, 79, 148,
	157, 88, 141, 81, 155, 146, 118, 104, 105, 80,
	0, 137, 94, 98, 93, 126, 152, 153, 92, 173,
	84, 164, 83, 85, 163, 125, 150, 156, 119, 116,
	82, 154, 117, 115, 107, 96, 101, 131, 114, 132,
	102, 122, 121, 123, 0, 0, 0, 0, 145, 161,
	174, 0, 0, 167, 168, 169, 170, 0, 0, 0,
	124, 86, 103, 142, 106, 113, 136, 172, 128, 140,
	89, 160, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	78, 0, 110, 171, 135, 97, 162, 567, 95, 90,
	0, 0, 0, 0, 109, 0, 0, 111, 0, 0,
	144, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 79, 148, 157, 88, 141, 81,
	155, 146, 118, 104, 105, 80, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 84, 164, 83, 85,
	163, 125, 150, 156, 119, 116, 82, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 86, 103, 142,
	106, 113, 136, 172, 128, 140, 89, 160, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 305, 0, 0,
	0, 0, 0, 0, 127, 0, 78, 0, 110, 171,
	135, 97, 162, 95, 90, 0, 0, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 79,
	148, 157, 88, 141, 81, 155, 146, 118, 104, 105,
	80, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 84, 164, 83, 85, 163, 125, 150, 156, 119,
	116, 82, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 124, 86, 103, 142, 106, 113, 136, 172, 128,
	140, 89, 160, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 78, 0, 110, 171, 135, 97, 162, 95, 90,
	0, 0, 0, 0, 109, 0, 0, 111, 0, 0,
	144, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 189, 0, 0, 0, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 79, 148, 157, 88, 141, 81,
	155, 146, 118, 104, 105, 80, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 84, 164, 83, 85,
	163, 125, 150, 156, 119, 116, 82, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 86, 103, 142,
	106, 113, 136, 172, 128, 140, 89, 160, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 78, 0, 110, 171,
	135, 97, 162, 95, 90, 0, 0, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 79,
	148, 157, 88, 141, 81, 155, 146, 118, 104, 105,
	80, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 84, 164, 83, 85, 163, 125, 150, 156, 119,
	116, 82, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 0, 0,
	0, 124, 86, 103, 142, 106, 113, 136, 172, 128,
	140, 89, 160, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 78, 0, 110, 171, 135, 97, 162, 95, 90,
	0, 0, 0, 0, 109, 0, 0, 111, 0, 0,
	144, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 133, 0,
	0, 147, 100, 99, 108, 0, 0, 0, 91, 0,
	139, 129, 159, 0, 130, 138, 112, 151, 134, 158,
	190, 166, 149, 165, 79, 148, 157, 88, 141, 81,
	155, 146, 118, 104, 105, 80, 0, 137, 94, 98,
	93, 126, 152, 153, 92, 173, 84, 164, 83, 85,
	163, 125, 150, 156, 119, 116, 82, 154, 117, 115,
	107, 96, 101, 131, 114, 132, 102, 122, 121, 123,
	0, 0, 0, 0, 145, 161, 174, 0, 0, 167,
	168, 169, 170, 0, 0, 0, 124, 86, 103, 142,
	106, 113, 136, 172, 128, 140, 89, 160, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 78, 0, 110, 171,
	135, 97, 162, 95, 90, 0, 0, 0, 0, 109,
	0, 0, 111, 0, 0, 144, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 133, 0, 0, 147, 100, 99, 108,
	0, 0, 0, 91, 0, 139, 129, 159, 0, 130,
	138, 112, 151, 134, 158, 190, 166, 149, 165, 79,
	148, 157, 88, 141, 81, 155, 146, 118, 104, 105,
	80, 0, 137, 94, 98, 93, 126, 152, 153, 92,
	173, 84, 164, 83, 85, 163, 125, 150, 156, 119,
	116, 82, 154, 117, 115, 107, 96, 101, 131, 114,
	132, 102, 122, 121, 123, 0, 0, 0, 0, 145,
	161, 174, 0, 0, 167, 168, 169, 170, 197, 0,
	0, 124, 86, 103, 142, 106, 113, 136, 172, 128,
	140, 89, 160, 143, 0, 0, 0, 0, 0, 24,
	25, 49, 27, 28, 207, 0, 0, 0, 0, 0,
	0, 78, 0, 110, 171, 135, 97, 162, 44, 0,
	0, 0, 0, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 0, 51,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 194, 0,
	0, 0, 0, 0, 0, 200, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 31, 32, 34, 33,
	36, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 37, 45, 43,
	0, 0, 46, 47, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 40, 0, 41,
	42, 195, 0, 203, 204, 205, 206, 210, 0, 0,
	0, 0, 209, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50,
}

var yyPact = [...]int16{
	11113, -1000, -187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 855, 885, -1000, -1000, -1000, -1000, -1000, -1000,
	653, 7097, 25, 62, -30, 10171, 59, 11065, 10876, -1000,
	-44, -1000, -1000, 1662, -1000, -1000, -1000, -1000, 617, -1000,
	-1000, -1000, -1000, -1000, 849, 853, 681, 843, 737, -1000,
	5413, 33, 8995, 9936, 4681, -1000, 479, 51, 10876, -161,
	10641, 16, 16, 16, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 54, 10876, -1000, 10876, 14,
	469, 14, 14, 14, 10876, -1000, 93, -1000, -1000, -1000,
	-1000, 10876, 453, 789, 30, 2625, 2625, 2625, 2625, -34,
	2625, -125, 699, -1000, -1000, -1000, -1000, 2625, -1000, -1000,
	-1000, -1000, -1000, -1000, 1838, -1000, -1000, -1000, -1000, 430,
	799, 6148, 6148, 855, -1000, 617, -1000, -1000, -1000, 785,
	-1000, -1000, 202, 869, -1000, 6862, 92, -1000, 6148, 6870,
	621, -1000, -1000, 621, -1000, -1000, -1000, -1000, -1000, 6618,
	6618, 6618, 6618, 6618, 6618, 6618, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	621, -1000, 5904, 621, 621, 621, 621, 621, 621, 621,
	621, 621, 6148, 621, 621, 621, 621, 621, 621, 621,
	621, 621, 621, 621, 621, 621, 9701, 626, 780, -1000,
	-1000, -1000, 840, 8046, 8760, 10876, 553, -1000, 599, 4424,
	-119, -1000, -1000, -1000, 151, 8516, -1000, -1000, -1000, 788,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 526, -1000, 7006, 452, 2625,
	40, 654, 444, 169, 437, 10876, 10876, 2625, 36, 10876,
	836, 698, 10876, 434, 422, -1000, 4167, -1000, 2625, 2625,
	2625, 2625, 2625, 2625, 2625, 2625, -1000, -1000, -1000, -1000,
	-1000, -1000, 2625, 2625, -1000, -106, -1000, 10876, -1000, -1000,
	-1000, -1000, -1000, 878, 122, 448, 91, 607, -1000, 473,
	849, 430, 737, 8281, 710, -1000, -1000, 10876, -1000, 6148,
	6148, 485, -1000, 9465, -1000, -1000, 3139, 131, 6618, 61,
	227, 6618, 6618, 658, 61, 61, 6618, 6618, 6618, 6618,
	6618, 6618, 6618, 6618, 6618, 6618, 6618, 6618, 6618, 6618,
	6618, 6618, 6618, 6618, 6618, 152, 348, 6618, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 406, -1000, 617, 478,
	478, 478, 478, 478, 478, 346, 4925, 430, 522, 150,
	5904, -1000, 5413, 5413, 6148, 6148, 10406, 10406, 5413, 844,
	156, 150, 10406, -1000, 430, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5413, 5413, 5413, 5413, -8, 10876, -1000, 10406,
	8995, 8995, 8995, 8995, 8995, -1000, 730, 727, -1000, 726,
	724, 753, 10876, -1000, 520, 8046, 167, 621, -1000, 9230,
	-1000, -1000, -8, 625, 8995, 10876, -1000, -1000, 3910, 599,
	-119, 584, -1000, -123, -127, 5657, 106, -1000, -1000, -1000,
	-1000, 2368, 127, 299, -100, -1000, -1000, -1000, 638, -1000,
	638, 638, 638, 638, -72, -72, -72, -72, -1000, -1000,
	-1000, -1000, -1000, 649, 646, -1000, 638, 638, 638, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 645, 645, 645, 643, 643,
	663, -1000, 10876, -177, 404, 2625, 832, 2625, -1000, 1406,
	-1000, 10876, -1000, -1000, 10876, 2625, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 221, -1000, -1000, -1000, -1000, 765, 6148, 6148, 3653,
	6148, -1000, -1000, -1000, 799, -1000, 844, 857, -1000, 779,
	774, 5413, -1000, -1000, 131, 162, -1000, -1000, 332, -1000,
	-1000, -1000, -1000, 90, 621, -1000, 7761, -1000, -1000, -1000,
	100, -189, -1000, 61, 6618, 6618, 6618, 953, 7761, -1000,
	-1000, -1000, 7761, 7761, 7583, 7789, 7044, 478, 311, 311,
	454, 454, 454, 454, 454, 1720, 1720, 7761, 7761, 7761,
	7761, -190, -1000, 638, -53, -54, -1000, -1000, -1000, -1000,
	7761, 430, 430, 5413, 598, -1000, -1000, 6148, -1000, 430,
	476, 476, 315, 358, 608, -1000, 83, 605, 476, 5413,
	283, -1000, 6148, 430, -1000, 476, 430, 476, 476, 636,
	621, -1000, 541, -1000, 148, 780, 691, 697, 689, -1000,
	-1000, -1000, -1000, 723, -1000, 712, -1000, -1000, -1000, -1000,
	-1000, 50, 49, 42, 10641, -1000, 867, 8995, 597, -1000,
	-1000, 584, -119, -144, -1000, -1000, -1000, 150, -1000, 376,
	575, 2111, -1000, -1000, -1000, -1000, -1000, -1000, 641, 816,
	177, 181, 373, -1000, -1000, 805, -1000, 190, -102, -1000,
	-1000, 314, -72, -72, -1000, -1000, 106, 786, 106, 106,
	106, 356, 356, -1000, -1000, -1000, -1000, 309, -1000, -1000,
	-1000, 305, -1000, 696, 10641, 2625, -1000, 3396, -1000, -1000,
	-1000, -1000, -1000, -1000, 652, 377, 178, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -9, -1000,
	2625, -1000, 225, 10876, 10876, 763, 150, 150, 82, -1000,
	-1000, 10876, -1000, -1000, -1000, -1000, 603, -1000, -1000, -1000,
	2882, 5413, 152, 6148, -1000, 953, 7761, 7551, -1000, 6618,
	6618, -196, -1000, -1000, -1000, -1000, -1000, 476, 5413, 150,
	-1000, -1000, -1000, 152, 348, 152, 6618, 6618, 3653, 6618,
	6618, -172, 551, 161, -1000, 6148, 173, -1000, -1000, -1000,
	-1000, -1000, 671, 10406, 621, -1000, 7811, 10641, 855, 10406,
	6148, 6148, -1000, -1000, 6148, 639, -1000, 6148, -1000, -1000,
	-1000, 621, 621, 621, 442, -1000, 855, 597, -1000, -1000,
	-1000, -137, -132, -1000, -1000, 2368, -1000, 2368, 10641, -1000,
	370, 364, -1000, -1000, 659, 102, -1000, -1000, -1000, 492,
	106, 106, -1000, 153, -1000, -1000, -1000, 474, -1000, 468,
	564, 465, 10876, -1000, -1000, 546, -1000, 143, -1000, -1000,
	10641, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10641, 10876, -1000, -1000, -1000, -1000, -1000,
	10641, -1000, -1000, 355, 6148, -1000, -1000, -1000, 3396, -1000,
	867, 8995, -1000, -1000, 430, -190, 34, -1000, 6618, 7761,
	7761, -1000, -1000, -1000, 37, 430, 37, 1973, 7343, -1000,
	1482, 6811, 621, -169, -1000, 150, 6148, -1000, 822, 544,
	533, -1000, -1000, 5169, 430, 449, 81, 442, 849, -1000,
	150, 150, 150, 10641, 150, 10641, 10641, 10641, 7576, 10641,
	849, -1000, -1000, -1000, -1000, 2111, -1000, 429, -1000, 638,
	-1000, -1000, -96, 876, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -72, 331, -72, 265, -1000,
	248, 2625, 3396, 2368, -1000, 622, -1000, -1000, -1000, -1000,
	828, -1000, 150, 865, 542, -1000, -1000, 7761, -1000, -1000,
	-1000, -1000, 6618, 6618, -1000, 6618, 6618, 6618, 430, 330,
	150, 819, 813, -1000, 621, -1000, -1000, 614, 10641, 10641,
	-1000, -1000, 421, -1000, 398, 398, 398, 167, -1000, -1000,
	112, 10641, -1000, 129, -1000, -150, 106, -1000, 106, 484,
	482, -1000, -1000, -1000, 10641, 621, 863, 851, 7308, 7308,
	7308, 7308, 39, -1000, -1000, -1000, 7332, 875, -1000, 621,
	-1000, 617, 79, -1000, 10641, -1000, -1000, -1000, -1000, -1000,
	112, -1000, 360, 134, 324, -1000, 180, 810, -1000, 804,
	-1000, -1000, -1000, -1000, -1000, 394, -23, -1000, 6148, 6148,
	-1000, -1000, -1000, -1000, 430, 46, -180, 655, 106, 8,
	-1000, 10641, 10406, 533, 430, 10641, -1000, -1000, -1000, 210,
	-1000, -1000, -1000, 318, -1000, -1000, 654, 391, -1000, 10641,
	150, 503, -1000, 755, -175, -183, -1000, 803, 867, 10641,
	380, 486, -1000, -1000, -1000, -1000, -177, -1000, -23, 772,
	-1000, 747, -1000, -1000, 784, -1000, -1000, -1000, -1000, -1000,
	-26, -178, 10406, -31, -181, 541, 621, -184, -1000, 6383,
	-1000, 7308, 430, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 124, 10, 684, 1117, 1115, 1114, 1113, 1112, 1111,
	1110, 1109, 1108, 1106, 1105, 1103, 1102, 1098, 1097, 1095,
	1092, 1090, 1089, 1088, 1087, 148, 1086, 1085, 1084, 56,
	1080, 62, 1077, 1065, 28, 109, 38, 36, 951, 1061,
	22, 66, 61, 1059, 43, 1058, 1044, 72, 1043, 53,
	1042, 1041, 959, 1029, 1022, 17, 7, 1021, 1020, 1019,
	1017, 55, 782, 1016, 1015, 1011, 1007, 1006, 1003, 52,
	6, 13, 14, 12, 1002, 190, 34, 1000, 41, 998,
	997, 991, 990, 33, 988, 45, 986, 9, 42, 982,
	5, 54, 26, 980, 978, 974, 973, 972, 35, 64,
	50, 971, 21, 51, 39, 968, 967, 405, 965, 963,
	961, 958, 957, 955, 123, 316, 953, 952, 950, 949,
	40, 185, 492, 844, 60, 948, 947, 944, 777, 65,
	58, 20, 943, 23, 30, 29, 942, 939, 27, 67,
	930, 929, 928, 926, 925, 923, 92, 922, 921, 919,
	18, 4, 918, 915, 46, 47, 914, 913, 910, 32,
	48, 908, 37, 907, 906, 904, 903, 25, 16, 902,
	15, 901, 8, 900, 898, 3, 897, 19, 896, 2,
	895, 11, 31, 24, 894, 893, 0, 843, 892, 891,
	108,
}

var yyR1 = [...]uint8{
	0, 184, 185, 185, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 183, 183, 7, 7, 28, 28, 8, 9,
	9, 9, 188, 188, 47, 47, 91, 91, 10, 10,
	10, 10, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 136, 136, 11, 11, 11, 11, 11, 11, 11,
	181, 181, 180, 179, 179, 178, 178, 177, 16, 164,
	165, 165, 165, 160, 139, 139, 139, 139, 142, 142,
	140, 140, 140, 140, 140, 140, 140, 141, 141, 141,
	141, 141, 143, 143, 143, 143, 143, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 145, 145, 145, 145, 145, 145, 145, 145,
	159, 159, 146, 146, 154, 154, 155, 155, 155, 152,
	152, 153, 153, 156, 156, 156, 147, 147, 147, 147,
	147, 147, 147, 149, 149, 157, 157, 150, 150, 150,
	151, 151, 158, 158, 158, 158, 158, 148, 148, 161,
	161, 173, 173, 172, 172, 172, 163, 163, 169, 169,
	169, 169, 169, 162, 162, 171, 171, 170, 166, 166,
	166, 167, 167, 167, 168, 168, 168, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 176, 174, 174,
	175, 175, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 112, 112, 109, 109, 110, 110,
	111, 111, 111, 113, 113, 113, 137, 137, 137, 19,
	19, 22, 22, 23, 24, 21, 21, 20, 20, 20,
	20, 189, 25, 26, 26, 27, 27, 27, 31, 31,
	31, 29, 29, 30, 30, 36, 36, 35, 35, 37,
	37, 37, 37, 125, 125, 125, 124, 124, 39, 39,
	40, 40, 41, 41, 42, 42, 42, 54, 54, 90,
	90, 92, 92, 43, 43, 43, 43, 44, 44, 45,
	45, 46, 46, 132, 132, 131, 131, 131, 130, 130,
	48, 48, 48, 50, 49, 49, 49, 49, 51, 51,
	53, 53, 52, 52, 55, 55, 55, 55, 56, 56,
	38, 38, 38, 38, 38, 38, 38, 108, 108, 58,
	58, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 68, 68, 68, 68,
	68, 68, 59, 59, 59, 59, 59, 59, 59, 34,
	34, 69, 69, 69, 69, 69, 69, 75, 70, 70,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 66, 66, 66, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 65, 65, 65, 65, 65, 65,
	65, 65, 190, 190, 67, 67, 67, 67, 32, 32,
	32, 32, 32, 135, 135, 138, 138, 138, 138, 138,
	138, 138, 138, 79, 79, 33, 33, 77, 77, 78,
	80, 80, 76, 76, 76, 61, 61, 61, 61, 61,
	61, 61, 61, 63, 63, 63, 81, 81, 82, 82,
	83, 83, 84, 84, 85, 86, 86, 86, 87, 87,
	87, 87, 88, 88, 88, 60, 60, 60, 60, 60,
	60, 89, 89, 89, 89, 93, 93, 94, 94, 96,
	96, 96, 97, 97, 95, 95, 71, 71, 73, 73,
	72, 74, 98, 98, 102, 99, 99, 103, 103, 103,
	101, 101, 101, 127, 127, 127, 106, 106, 114, 114,
	115, 115, 107, 107, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 117, 117, 117, 118, 118, 119,
	119, 119, 126, 126, 122, 122, 123, 123, 128, 128,
	129, 129, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 186, 187, 133, 134, 134,
	134,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 0, 3, 7, 8, 1, 1, 8, 8,
	7, 6, 1, 1, 1, 3, 0, 4, 3, 4,
	5, 4, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 8, 4, 6, 5, 5, 5,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 3, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 3, 3,
	3, 3, 3, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 3, 4, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 4, 5, 6, 2, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 1, 2, 1, 2, 1,
	2, 3, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 4, 0, 3, 0,
	3, 3, 1, 3, 2, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -184, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -22, -23, -24,
	-21, -20, -3, -4, 6, 7, -28, 9, 10, 31,
	-16, 123, 124, 126, 125, 151, 127, 144, 51, 163,
	164, 166, 167, 146, 25, 145, 149, 150, -186, 8,
	247, 56, -185, 262, -83, 15, -27, 5, -25, -189,
	-25, -25, -25, -25, -25, -164, 56, -119, 132, 72,
	159, 239, 129, 130, 136, -122, 59, -121, 255, 163,
	174, 168, 195, 187, 185, 188, 226, 67, 166, 235,
	28, 147, 183, 179, 177, 27, 200, 260, 178, 142,
	141, 201, 205, 227, 172, 173, 229, 199, 143, 33,
	257, 36, 155, 230, 203, 198, 194, 197, 171, 193,
	40, 207, 206, 208, 225, 190, 180, 18, 233, 150,
	153, 202, 204, 137, 157, 259, 231, 176, 154, 149,
	234, 167, 228, 237, 39, 213, 170, 140, 164, 161,
	191, 156, 181, 182, 196, 169, 192, 165, 158, 151,
	236, 214, 261, 189, 186, 162, 160, 218, 219, 220,
	221, 258, 232, 184, 215, -107, 132, 134, 130, 130,
	131, 132, 239, 129, 130, -52, -128, 59, -121, 132,
	159, 130, 108, 188, 123, 216, 131, 33, 157, -137,
	130, -109, 160, 218, 219, 220, 221, 59, 228, 227,
	222, -128, 165, -1, 127, -133, -133, -133, -133, -2,
	-87, 17, 16, -5, -3, -186, 6, 20, 21, -31,
	41, 42, -26, -37, 99, -38, -128, -57, 74, -62,
	30, 59, -121, 23, -61, -58, -76, -74, -75, 108,
	109, 97, 98, 105, 75, 110, -66, -64, -65, -67,
	61, 60, 68, 62, 63, 64, 65, 69, 70, 71,
	-122, -72, -186, 209, 45, 46, 248, 249, 250, 251,
	254, 252, 77, 35, 238, 246, 245, 244, 242, 243,
	240, 241, 135, 239, 103, 247, -107, -40, -41, -42,
	-43, -54, -75, -186, -52, 11, -47, -52, -99, -136,
	165, -103, 228, 227, -123, -101, -122, -120, 226, 188,
	225, 128, 73, 209, 22, 24, 211, 76, 108, 16,
	77, 107, 248, 123, 49, 240, 241, 238, 250, 251,
	239, 216, 30, 10, 25, 145, 21, 101, 125, 80,
	81, 148, 23, 146, 71, 19, 52, 11, 13, 14,
	135, 134, 92, 131, 47, 8, 110, 26, 89, 43,
	29, 45, 90, 17, 242, 243, 32, 254, 152, 103,
	50, 34, 37, 74, 69, 53, 72, 15, 48, 91,
	126, 247, 46, 129, 6, 253, 31, 144, 44, 130,
	217, 79, 133, 70, 5, 136, 9, 51, 54, 244,
	245, 246, 35, 78, 12, -165, -160, 59, 131, -52,
	247, -122, -115, 135, -115, -115, 130, -52, -52, -114,
	135, 59, -114, -114, -114, -52, 112, -52, 59, 31,
	239, 59, 157, 130, 158, 132, -134, -186, -123, -134,
	-134, -134, 161, 162, -134, -110, 223, 53, -134, -1,
	-187, 58, -88, 19, 32, -38, -128, -84, -85, -38,
	-83, -2, -25, 37, -29, 21, 66, 11, -125, 73,
	72, 89, -124, 22, -122, 61, 112, -38, -59, 92,
	74, 90, 91, 117, 118, 119, 120, 121, 76, 94,
	93, 104, 97, 98, 99, 100, 101, 102, 103, 95,
	96, 113, 114, 115, 116, 111, 107, 122, 82, 83,
	84, 85, 86, 87, 88, -108, -186, -75, -186, -62,
	-62, -62, -62, -62, -62, -62, -186, -2, -70, -38,
	-186, -75, -186, -186, -186, -186, -186, -186, -186, -186,
	-79, -38, -186, -190, -186, -190, -190, -190, -190, -190,
	-190, -190, -186, -186, -186, -186, -53, 26, -52, 31,
	57, -48, -50, -49, -51, 43, 47, 49, 44, 45,
	46, 50, -132, 22, -40, -186, -131, 153, -130, 22,
	-128, 61, -52, -47, -188, 57, 11, 54, 57, -99,
	165, -100, -104, 229, 231, 82, -127, -122, 61, 30,
	31, 58, 57, -139, -142, -144, -143, -145, -140, -141,
	185, 186, 108, 189, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 31, 147, 181, 182, 183, 184,
	201, 202, 203, 204, 205, 206, 207, 208, 168, 169,
	170, 171, 172, 173, 174, 176, 177, 178, 179, 180,
	59, -134, 132, -181, 54, 59, 74, 59, -52, -52,
	-134, 133, -52, 23, 53, -52, 59, 59, -129, -128,
	-120, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -112, 217, 224, -52, 9, 92, 57, 18, 112,
	57, -86, 24, 25, -87, -187, -31, -63, -122, 62,
	65, -30, 44, -52, -38, -38, -68, 69, 74, 70,
	71, -124, 99, -129, -123, -120, -62, -69, -72, -75,
	61, 209, 65, 92, 90, 91, 76, -62, -62, -61,
	-69, -69, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -138, 256, 190, 213, 214, -139, -135, 59, 61,
	-62, 59, -36, 21, -35, -37, -187, 57, -187, -2,
	-35, -35, -38, -38, -76, -122, -128, -76, -35, -29,
	-77, -78, 78, -76, -187, -35, -36, -35, -35, -91,
	153, -52, -98, -102, -76, -41, -42, -42, -41, -42,
	43, 43, 43, 48, 43, 48, 43, -49, -128, -187,
	-55, 51, 134, 52, -186, -130, -91, 54, -40, -52,
	-103, -100, 57, 230, 232, 233, 53, -38, -151, 107,
	-166, -167, -168, -123, 61, 62, -160, -161, -169, 137,
	140, 136, -162, 131, 29, -156, 69, 74, -152, 214,
	-146, 56, -146, -146, -146, -146, -150, 188, -150, -150,
	-150, 56, 56, -146, -146, -146, -154, 56, -154, -154,
	-155, 56, -155, -126, 54, -52, -179, 258, -180, 59,
	-134, 23, -134, -116, 128, 125, 126, -176, 124, 211,
	188, 67, 30, 15, 248, 153, 261, 59, 154, -52,
	-52, -134, -111, 11, 92, 39, -38, -38, -129, -85,
	-88, -106, 19, 11, 35, 35, -35, 69, 70, 71,
	112, -186, 111, 263, -69, -62, -62, -62, -34, 148,
	73, 263, -146, 173, 173, -187, -187, -35, 57, -38,
	-187, -187, -187, 57, 54, 22, 57, 11, 112, 57,
	11, -187, -35, -80, -78, 80, -38, -187, -187, -187,
	-187, -187, -60, 31, 35, -2, -186, -186, -56, 57,
	12, 82, -45, -44, 53, 54, -46, 53, -44, 43,
	43, 131, 131, 131, -92, -122, -56, -40, -56, -104,
	-105, 234, 231, 237, 59, 57, -168, 82, 56, 29,
	-162, -162, 59, 59, -147, 30, 69, -153, 215, 62,
	-150, -150, -151, 31, -151, -151, -151, -159, 61, -159,
	62, 62, 53, -122, -134, -178, -177, -123, -133, -182,
	159, 138, 139, 142, 141, 59, 131, 29, 137, 140,
	153, 136, -182, 159, -117, -118, 133, 22, 131, 29,
	153, -134, -113, 90, 12, -128, -128, 40, 112, -52,
	-39, 11, 99, -123, -36, -138, -70, -34, 73, -62,
	-62, 264, -187, -37, -138, -135, -138, -62, -62, -123,
	-62, -62, 255, -83, 81, -38, 79, -183, 53, -98,
	-71, -73, -72, -186, -2, -89, -122, -92, -83, -102,
	-38, -38, -38, 56, -38, -186, -186, -186, -187, 57,
	-83, -56, 231, 235, 236, -167, -168, -171, -170, -122,
	59, 59, -149, 53, 61, 62, 63, 69, 238, 68,
	58, -151, -151, 59, 108, 58, 57, 58, 57, 58,
	57, -52, 57, 82, -133, -122, -133, -122, -52, -133,
	-122, 61, -38, -56, -40, -187, 264, -62, -187, -187,
	-187, -187, 57, 19, -187, 57, 19, -186, -33, 253,
	-38, -93, 27, -183, 57, -187, -187, -187, 57, 112,
	-187, -87, -90, -122, -90, -90, -90, -131, -122, -87,
	58, 57, -146, -157, 211, 9, -150, 61, -150, 62,
	62, -134, -177, -168, 56, 26, -81, 13, -62, -62,
	-62, -62, -62, -187, 61, -94, 28, 29, -73, 35,
	-2, -186, -122, -122, 57, 58, -187, -187, -187, -55,
	-173, -172, 54, 143, 67, -170, -158, 137, 29, 136,
	238, -151, -151, 58, 58, -90, -186, -82, 14, 16,
	-187, -187, -187, -187, -32, 92, 258, -96, -97, 53,
	-122, 56, 9, -71, -2, 112, -122, -172, 59, -163,
	82, 61, -148, 67, 29, 29, 58, -174, -175, 153,
	-38, -70, -187, 256, 50, 259, -95, 55, -151, 139,
	-90, -98, -187, -122, 62, 61, -181, -187, 57, -122,
	40, 257, 260, 34, 9, -56, -122, 58, -179, -175,
	35, 40, 31, 155, 258, -98, 156, 259, -56, -186,
	260, -62, 152, -187, -187,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 520, 0, 281, 281, 281, 281, 281, 281,
	0, 599, 582, 0, 0, 0, 0, -2, 270, 271,
	0, 273, 274, 0, 807, 807, 807, 807, 0, 36,
	37, 805, 1, 3, 528, 0, 0, 285, 288, 283,
	0, 582, 0, 0, 0, 63, 0, 0, 794, 0,
	795, 580, 580, 580, 600, 601, 604, 605, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 0, 0, 583, 0, 578,
	0, 578, 578, 578, 0, 229, 352, 608, 609, 794,
	795, 0, 0, 0, 0, 808, 808, 808, 808, 0,
	808, 258, 247, 249, 250, 251, 252, 808, 267, 268,
	257, 269, 272, 275, 0, 277, 278, 279, 280, 28,
	532, 0, 0, 520, 30, 0, 281, 286, 287, 291,
	289, 290, 282, 0, 299, 303, 0, 360, 0, 365,
	367, -2, -2, 0, 410, 411, 412, 413, 414, 0,
	0, 0, 0, 0, 0, 0, 441, 442, 443, 444,
	505, 506, 507, 508, 509, 510, 511, 512, 369, 370,
	502, 561, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 493, 0, 472, 472, 472, 472, 472, 472,
	472, 472, 0, 0, 0, 0, 0, 0, 310, 312,
	313, 314, 333, 0, 335, 0, 0, 44, 48, 0,
	785, 565, -2, -2, 0, 0, 606, 607, -2, 713,
	-2, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 0, 80, 0, 0, 808,
	0, 70, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 230, 808, 808,
	808, 808, 808, 808, 808, 808, 239, 809, 810, 240,
	241, 242, 808, 808, 244, 0, 259, 0, 253, 276,
	29, 806, 23, 0, 0, 529, 0, 521, 522, 525,
	528, 28, 288, 0, 293, 292, 284, 0, 300, 0,
	0, 0, 304, 0, 306, 307, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 393,
	394, 395, 396, 397, 398, 366, 0, 385, 0, 434,
	435, 436, 437, 438, 439, 440, 295, 28, 0, 408,
	0, 448, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 494, 0, 464, 0, 465, 466, 467, 468, 469,
	470, 471, 0, 295, 0, 0, 46, 0, 351, 0,
	0, 0, 0, 0, 0, 340, 0, 0, 343, 0,
	0, 0, 0, 334, 0, 0, 354, 758, 336, 0,
	338, 339, -2, 0, 0, 0, 42, 43, 0, 49,
	785, 51, 52, 0, 0, 0, 160, 573, 574, 575,
	571, 188, 0, 143, 139, 85, 86, 87, 132, 89,
	132, 132, 132, 132, 157, 157, 157, 157, 115, 116,
	117, 118, 119, 0, 0, 102, 132, 132, 132, 106,
	122, 123, 124, 125, 126, 127, 128, 129, 90, 91,
	92, 93, 94, 95, 96, 134, 134, 134, 136, 136,
	602, 65, 0, 73, 0, 808, 0, 808, 78, 0,
	204, 0, 223, 579, 0, 808, 226, 227, 353, 610,
	611, 231, 232, 233, 234, 235, 236, 237, 238, 243,
	246, 260, 254, 255, 248, 533, 0, 0, 0, 0,
	0, 524, 526, 527, 532, 31, 291, 0, 513, 0,
	0, 0, 294, 26, 361, 362, 364, 386, 0, 388,
	390, 305, 301, 0, 503, -2, 371, 372, 401, 402,
	405, 0, 406, 0, 0, 0, 0, 399, 376, 378,
	379, 380, 381, 382, 0, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 485, 132, 487, 489, 492, 432, 483, 484,
	433, 0, 0, 0, 296, 297, 407, 0, 560, 28,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	500, 497, 0, 0, 473, 0, 0, 0, 0, 0,
	0, 350, 358, 562, 0, 311, 329, 331, 0, 326,
	341, 342, 344, 0, 346, 0, 348, 349, 315, 316,
	317, 0, 0, 0, 0, 337, 358, 0, 358, 45,
	566, 50, 0, 0, 55, 56, 567, 568, 569, 0,
	79, 189, 191, 194, 195, 196, 81, 82, 0, 0,
	0, 0, 0, 183, 184, 146, 144, 0, 141, 140,
	88, 0, 157, 157, 109, 110, 160, 0, 160, 160,
	160, 0, 0, 103, 104, 105, 97, 0, 98, 99,
	100, 0, 101, 0, 0, 808, 67, 0, 71, 72,
	68, 581, 69, 807, 0, 0, 594, 205, 584, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 0, 222,
	808, 225, 263, 0, 0, 0, 530, 531, 0, 523,
	24, 0, 576, 577, 514, 515, 308, 387, 389, 391,
	0, 295, 0, 0, 373, 399, 377, 0, 374, 0,
	0, 0, 486, 488, 490, 368, 445, 0, 0, 409,
	-2, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 520, 0, 498, 0, 0, 463, 474, 475,
	476, 477, 32, 0, 0, -2, 0, 0, 520, 0,
	0, 0, 323, 330, 0, 0, 324, 0, 325, 345,
	347, 0, 0, 0, 0, 321, 520, 358, 41, 53,
	54, 0, 0, 60, 161, 0, 192, 0, 0, 178,
	0, 0, 181, 182, 153, 0, 145, 84, 142, 0,
	160, 160, 111, 0, 112, 113, 114, 0, 130, 0,
	0, 0, 0, 603, 66, 74, 75, 0, 197, 807,
	0, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 807, 0, 0, 807, 595, 596, 597, 598,
	0, 224, 245, 0, 0, 261, 262, 534, 0, 25,
	358, 0, 302, 504, 0, 403, 0, 375, 0, 400,
	383, 491, 446, 298, 0, 0, 0, 0, 0, 503,
	0, 0, 0, 495, 462, 501, 0, 34, 545, 32,
	535, 556, 558, 0, 28, 0, 541, 0, 528, 563,
	359, 564, 327, 0, 332, 0, 0, 0, 335, 0,
	528, 40, 57, 58, 59, 190, 193, 0, 185, 132,
	179, 180, 155, 0, 147, 148, 149, 150, 151, 152,
	133, 107, 108, 158, 159, 157, 0, 157, 0, 137,
	0, 808, 0, 0, 198, 0, 199, 201, 202, 203,
	0, 264, 265, 516, 309, 447, 404, 384, 451, 453,
	452, 454, 0, 0, 457, 0, 0, 0, 0, 0,
	499, 547, 0, 35, 0, 559, -2, 0, 0, 0,
	47, 38, 0, 319, 0, 0, 0, 354, 322, 39,
	170, 0, 187, 162, 156, 0, 160, 131, 160, 0,
	0, 64, 76, 77, 0, 0, 518, 0, 0, 0,
	0, 0, 478, 461, 496, 33, 549, 0, 557, 0,
	-2, 0, 543, 542, 0, 328, 355, 356, 357, 318,
	169, 171, 0, 176, 0, 186, 167, 0, 164, 166,
	154, 120, 121, 135, 138, 0, 0, 27, 0, 0,
	455, 456, 458, 459, 0, 0, 0, 0, 160, 0,
	552, 0, 0, 538, 28, 0, 320, 172, 173, 0,
	177, 175, 83, 0, 163, 165, 70, 0, 218, 0,
	519, 517, 460, 0, 0, 0, 548, 0, 358, 0,
	0, 546, -2, 544, 174, 168, 73, 217, 0, 0,
	479, 0, 482, 554, 0, 550, 551, 553, 200, 219,
	0, 480, 0, 0, 0, 358, 0, 0, 555, 0,
	481, 0, 0, 220, 221,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	56, 58, 99, 97, 57, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 262,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 263, 3, 264, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:325
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:330
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:331
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:335
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:359
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:377
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:404
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:409
		{
			yyVAL.insertOptions = InsertOptions{}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:413
		{
			yyVAL.insertOptions = InsertOptions{
				OnDup:      OnDup(yyDollar[2].updateExprs),
				OnConflict: yyDollar[3].onConflict,
			}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:422
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.Options = yyDollar[7].insertOptions
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:434
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].insertOptions.OnDup))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, Options: yyDollar[8].insertOptions}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.str = InsertStr
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:450
		{
			yyVAL.str = ReplaceStr
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:456
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:470
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:475
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:476
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:480
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:484
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:489
		{
			yyVAL.partitions = nil
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:493
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:499
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:503
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:507
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:511
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:517
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:527
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:545
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:549
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:553
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:559
		{
			yyVAL.str = SessionStr
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			yyVAL.str = GlobalStr
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:569
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:574
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:604
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:608
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:619
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:624
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:630
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:635
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:641
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:647
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:654
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:666
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:670
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:676
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:687
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:698
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:895
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:900
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:904
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:909
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:921
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:931
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:948
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:971
		{
			yyVAL.optVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:975
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:987
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:995
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1000
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1004
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1022
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1026
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1048
		{
			yyVAL.colKeyOpt = colKey
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1061
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1071
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1075
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1081
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1085
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1091
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1095
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1106
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1120
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1158
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1179
		{
			yyVAL.str = yyDollar[1].str
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1183
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1187
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1193
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1207
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1211
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1215
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1219
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1232
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1242
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1247
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1252
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1256
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1275
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1285
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1291
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1295
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1301
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1307
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1315
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1320
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1338
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1342
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1347
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1353
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1410
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1440
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1460
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1470
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1474
		{
			yyVAL.str = "extended "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1480
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = "full "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1490
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1494
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1504
		{
			yyVAL.showFilter = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1508
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1512
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1518
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1522
		{
			yyVAL.str = SessionStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1526
		{
			yyVAL.str = GlobalStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1532
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Begin{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Begin{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &Commit{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Rollback{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1564
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[2].statement}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[3].statement, Analyze: true}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &OtherRead{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1591
		{
			setAllowComments(yylex, true)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1595
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1601
		{
			yyVAL.bytes2 = nil
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1605
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.str = UnionStr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.str = UnionAllStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = UnionDistinctStr
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = SQLCacheStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.str = DistinctStr
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1646
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1650
		{
			yyVAL.str = StraightJoinHint
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1655
		{
			yyVAL.selectExprs = nil
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1669
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1683
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1687
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1692
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1696
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1700
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1707
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1712
		{
			yyVAL.tableExprs = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1716
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1722
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1726
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1740
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1744
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1750
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1754
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1760
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1764
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1770
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1774
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1787
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1791
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1795
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1799
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1805
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1807
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1811
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1817
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1819
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1822
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1824
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1827
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1835
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1842
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1848
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = JoinStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1862
		{
			yyVAL.str = StraightJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1868
		{
			yyVAL.str = LeftJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.str = LeftJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = RightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = RightJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = NaturalJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1900
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1904
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1919
		{
			yyVAL.indexHints = nil
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1923
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1927
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1931
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1936
		{
			yyVAL.expr = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1940
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1950
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1954
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1958
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1962
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1970
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1976
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1980
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1990
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1996
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2000
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2004
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2008
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2012
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2016
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2020
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2026
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2030
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2034
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2038
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2046
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2050
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2054
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = IsNullStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = IsNotNullStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = IsTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = IsNotTrueStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.str = IsFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = IsNotFalseStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = EqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = LessThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = GreaterThanStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = LessEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = GreaterEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = NotEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2115
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2119
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.colTuple = &ConvertExpr{Expr: NewStrVal(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2137
		{
			yyVAL.colTuple = Array(yyDollar[3].exprs)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			// this is an array literal ('{a,b,c}', etc)
			// TODO this is weird and ugly but I need those quotes to be passed through
			tmp := make([]byte, len(yyDollar[1].bytes)+2)
			tmp[0] = '\''
			tmp[len(yyDollar[1].bytes)+1] = '\''
			copy(tmp[1:], yyDollar[1].bytes)
			yyVAL.colTuple = ListArg(tmp)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			// this is a positional parameter ($1, etc)
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2174
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2178
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2182
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2194
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2198
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &FunctionArgAssignmentExpr{Argument: yyDollar[1].expr, Operator: FuncArgAssignStr, Value: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2278
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2286
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2308
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2326
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2344
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("array"), Exprs: SelectExprs{&AliasedExpr{Expr: yyDollar[2].subquery}}}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 458:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 459:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 460:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 461:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2460
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2472
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2478
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2482
		{
			yyVAL.str = BooleanModeStr
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2486
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2490
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = QueryExpansionStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2510
		{
			yyVAL.convertType = &ConvertType{Type: "boolean"}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2534
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].convertType.Type + "[]"}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2552
		{
			yyVAL.str = string("")
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2556
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2562
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2566
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2572
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = nil
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2587
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2591
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2595
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = &NullVal{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2653
		{
			yyVAL.exprs = nil
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2657
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2671
		{
			yyVAL.orderBy = nil
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2675
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2685
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2691
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2696
		{
			yyVAL.str = AscScr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.str = AscScr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = DescScr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2709
		{
			yyVAL.limit = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2713
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2717
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2721
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2726
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.str = ForUpdateStr
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2734
		{
			yyVAL.str = ShareModeStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2747
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2760
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2764
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2768
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2779
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2783
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2787
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2792
		{
			yyVAL.updateExprs = nil
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2796
		{
			yyVAL.updateExprs = yyDollar[4].updateExprs
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2801
		{
			yyVAL.onConflict = nil
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2805
		{
			yyVAL.onConflict = &OnConflict{Target: yyDollar[2].conflictTarget, Action: yyDollar[3].conflictAction}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2810
		{
			yyVAL.conflictTarget = nil
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2814
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Columns: yyDollar[1].columns,
				Collate: yyDollar[2].str,
				Where:   NewWhere(WhereStr, yyDollar[3].expr),
			}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2822
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Constraint: yyDollar[3].colIdent,
				Columns:    Columns{},
				Collate:    "",
				Where:      nil,
			}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2833
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2837
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2844
		{
			yyVAL.conflictAction = nil
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2848
		{
			yyVAL.conflictAction = &ConflictAction{
				Updates: yyDollar[4].updateExprs,
				Where:   NewWhere(WhereStr, yyDollar[5].expr),
			}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2861
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2871
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2893
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2897
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2903
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2913
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2927
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2934
		{
			yyVAL.bytes = []byte("charset")
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &Default{}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2958
		{
			yyVAL.byt = 0
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2960
		{
			yyVAL.byt = 1
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2963
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2965
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2968
		{
			yyVAL.str = ""
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2970
		{
			yyVAL.str = IgnoreStr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2976
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2986
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2988
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2995
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2997
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3008
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3010
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3012
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3015
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3017
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3032
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3049
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3277
		{
			decNesting(yylex)
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3282
		{
			forceEOF(yylex)
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3287
		{
			forceEOF(yylex)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3291
		{
			forceEOF(yylex)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3295
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
