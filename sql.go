// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func init() {
	yyErrorVerbose = true
}

//line sql.y:57
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const TYPECAST = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const JSON_SUBOBJECT_OP = 57437
const JSON_UNQUOTE_SUBOBJECT_OP = 57438
const JSON_TXT_STR_EXISTS_OP = 57439
const JSON_ANY_KEYS_EXIST_OP = 57440
const JSON_ALL_KEYS_EXIST_OP = 57441
const JSON_LEFT_CONTAINS_RIGHT_OP = 57442
const JSON_RIGHT_CONTAINS_LEFT_OP = 57443
const CREATE = 57444
const ALTER = 57445
const DROP = 57446
const RENAME = 57447
const ANALYZE = 57448
const ADD = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const UNIQUE = 57457
const PRIMARY = 57458
const COLUMN = 57459
const CONSTRAINT = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const FOREIGN = 57463
const KEY_BLOCK_SIZE = 57464
const SHOW = 57465
const DESCRIBE = 57466
const EXPLAIN = 57467
const DATE = 57468
const ESCAPE = 57469
const REPAIR = 57470
const OPTIMIZE = 57471
const TRUNCATE = 57472
const MAXVALUE = 57473
const PARTITION = 57474
const REORGANIZE = 57475
const LESS = 57476
const THAN = 57477
const PROCEDURE = 57478
const TRIGGER = 57479
const VINDEX = 57480
const VINDEXES = 57481
const STATUS = 57482
const VARIABLES = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const BIT = 57489
const TINYINT = 57490
const SMALLINT = 57491
const MEDIUMINT = 57492
const INT = 57493
const INTEGER = 57494
const BIGINT = 57495
const INTNUM = 57496
const REAL = 57497
const DOUBLE = 57498
const FLOAT_TYPE = 57499
const DECIMAL = 57500
const NUMERIC = 57501
const TIME = 57502
const TIMESTAMP = 57503
const DATETIME = 57504
const YEAR = 57505
const CHAR = 57506
const VARCHAR = 57507
const BOOL = 57508
const CHARACTER = 57509
const VARBINARY = 57510
const NCHAR = 57511
const TEXT = 57512
const TINYTEXT = 57513
const MEDIUMTEXT = 57514
const LONGTEXT = 57515
const BLOB = 57516
const TINYBLOB = 57517
const MEDIUMBLOB = 57518
const LONGBLOB = 57519
const JSON = 57520
const ENUM = 57521
const GEOMETRY = 57522
const POINT = 57523
const LINESTRING = 57524
const POLYGON = 57525
const GEOMETRYCOLLECTION = 57526
const MULTIPOINT = 57527
const MULTILINESTRING = 57528
const MULTIPOLYGON = 57529
const NULLX = 57530
const AUTO_INCREMENT = 57531
const APPROXNUM = 57532
const SIGNED = 57533
const UNSIGNED = 57534
const ZEROFILL = 57535
const DATABASES = 57536
const TABLES = 57537
const VITESS_KEYSPACES = 57538
const VITESS_SHARDS = 57539
const VITESS_TABLETS = 57540
const VSCHEMA_TABLES = 57541
const EXTENDED = 57542
const FULL = 57543
const PROCESSLIST = 57544
const NAMES = 57545
const CHARSET = 57546
const GLOBAL = 57547
const SESSION = 57548
const ISOLATION = 57549
const LEVEL = 57550
const READ = 57551
const WRITE = 57552
const ONLY = 57553
const REPEATABLE = 57554
const COMMITTED = 57555
const UNCOMMITTED = 57556
const SERIALIZABLE = 57557
const CURRENT_TIMESTAMP = 57558
const DATABASE = 57559
const CURRENT_DATE = 57560
const CURRENT_TIME = 57561
const LOCALTIME = 57562
const LOCALTIMESTAMP = 57563
const UTC_DATE = 57564
const UTC_TIME = 57565
const UTC_TIMESTAMP = 57566
const REPLACE = 57567
const CONVERT = 57568
const CAST = 57569
const SUBSTR = 57570
const SUBSTRING = 57571
const GROUP_CONCAT = 57572
const SEPARATOR = 57573
const MATCH = 57574
const AGAINST = 57575
const BOOLEAN = 57576
const LANGUAGE = 57577
const WITH = 57578
const QUERY = 57579
const EXPANSION = 57580
const UNUSED = 57581

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"TYPECAST",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	157, 263,
	158, 263,
	-2, 253,
	-1, 238,
	109, 600,
	-2, 596,
	-1, 239,
	109, 601,
	-2, 597,
	-1, 308,
	79, 759,
	-2, 58,
	-1, 309,
	79, 720,
	-2, 59,
	-1, 314,
	79, 704,
	-2, 562,
	-1, 316,
	79, 741,
	-2, 564,
	-1, 583,
	52, 41,
	54, 41,
	-2, 43,
	-1, 716,
	109, 603,
	-2, 599,
	-1, 951,
	5, 28,
	-2, 402,
	-1, 976,
	5, 27,
	-2, 537,
	-1, 1186,
	5, 28,
	-2, 538,
	-1, 1228,
	5, 27,
	-2, 540,
	-1, 1290,
	5, 28,
	-2, 541,
}

const yyPrivate = 57344

const yyLast = 11335

var yyAct = [...]int{
	269, 47, 1281, 654, 799, 883, 530, 243, 1239, 268,
	1102, 1192, 835, 1130, 817, 1037, 1103, 217, 839, 575,
	577, 529, 3, 1099, 838, 764, 211, 979, 800, 313,
	772, 995, 53, 1028, 934, 751, 1040, 849, 788, 593,
	984, 455, 769, 461, 877, 410, 592, 307, 47, 718,
	796, 915, 564, 241, 579, 295, 222, 475, 873, 467,
	863, 226, 299, 304, 302, 1081, 454, 937, 52, 216,
	212, 213, 214, 215, 294, 1310, 1300, 1308, 1288, 1306,
	884, 293, 1299, 1094, 1180, 414, 1248, 753, 435, 1124,
	230, 1287, 181, 177, 178, 179, 1125, 1126, 1263, 493,
	492, 502, 503, 495, 496, 497, 498, 499, 500, 501,
	494, 857, 830, 509, 232, 831, 832, 508, 544, 504,
	505, 506, 507, 1003, 450, 755, 1002, 195, 683, 1004,
	900, 594, 1019, 595, 856, 684, 1204, 864, 945, 943,
	771, 1136, 1137, 1138, 899, 423, 210, 1305, 1141, 1139,
	1307, 205, 446, 447, 1282, 57, 440, 757, 437, 762,
	439, 756, 1061, 754, 797, 1083, 818, 820, 760, 752,
	424, 904, 417, 174, 175, 175, 662, 758, 653, 898,
	59, 60, 61, 62, 63, 436, 438, 994, 993, 992,
	761, 763, 1246, 239, 441, 441, 441, 441, 1058, 441,
	190, 180, 851, 851, 1060, 412, 441, 420, 1240, 1268,
	189, 176, 1189, 1069, 192, 851, 959, 927, 1145, 690,
	1242, 198, 194, 47, 76, 479, 836, 430, 186, 929,
	1013, 186, 687, 759, 474, 895, 892, 893, 518, 891,
	1065, 520, 472, 411, 464, 1273, 910, 819, 196, 1155,
	982, 200, 596, 463, 789, 186, 186, 76, 474, 1096,
	657, 186, 1264, 76, 902, 905, 434, 1146, 528, 937,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 191,
	543, 545, 545, 545, 545, 545, 545, 545, 545, 553,
	554, 555, 556, 864, 1286, 1241, 1247, 1245, 1017, 897,
	576, 850, 850, 1059, 1276, 1057, 193, 469, 201, 202,
	203, 204, 208, 1292, 850, 1064, 1140, 207, 206, 848,
	846, 896, 416, 847, 911, 426, 427, 428, 494, 726,
	955, 509, 954, 458, 462, 508, 853, 504, 505, 506,
	507, 854, 1210, 724, 725, 723, 173, 473, 472, 1293,
	480, 443, 444, 445, 1209, 448, 473, 472, 901, 1032,
	689, 956, 452, 1098, 474, 789, 584, 966, 186, 590,
	186, 903, 1031, 474, 473, 472, 186, 1020, 1274, 465,
	708, 710, 711, 186, 531, 709, 1224, 76, 76, 76,
	76, 474, 76, 542, 418, 419, 688, 1271, 1207, 76,
	546, 547, 548, 549, 550, 551, 552, 292, 473, 472,
	1163, 473, 472, 1029, 441, 497, 498, 499, 500, 501,
	494, 1133, 441, 509, 1132, 474, 76, 508, 474, 504,
	505, 506, 507, 441, 441, 441, 441, 441, 441, 441,
	441, 50, 245, 924, 925, 926, 721, 441, 441, 509,
	722, 1014, 236, 508, 1005, 504, 505, 506, 507, 267,
	671, 495, 496, 497, 498, 499, 500, 501, 494, 886,
	765, 509, 766, 693, 694, 508, 767, 504, 505, 506,
	507, 695, 669, 668, 442, 667, 186, 1296, 454, 587,
	74, 658, 719, 186, 186, 186, 656, 719, 719, 76,
	1232, 1279, 1232, 454, 298, 76, 1232, 1233, 454, 716,
	453, 1201, 1200, 1121, 454, 1188, 454, 21, 473, 472,
	651, 47, 432, 312, 1152, 1151, 1252, 697, 23, 415,
	588, 714, 586, 532, 712, 474, 425, 730, 731, 411,
	729, 1148, 1149, 1148, 1147, 781, 784, 1251, 310, 949,
	454, 790, 974, 1142, 776, 975, 561, 454, 774, 454,
	603, 602, 299, 299, 299, 299, 299, 981, 801, 1100,
	652, 54, 980, 221, 980, 50, 50, 576, 661, 821,
	1072, 824, 560, 586, 774, 1184, 299, 705, 706, 672,
	673, 674, 675, 676, 677, 678, 679, 793, 776, 961,
	786, 23, 981, 680, 681, 825, 561, 76, 561, 561,
	949, 1154, 1150, 186, 186, 76, 23, 186, 803, 804,
	186, 806, 1006, 949, 186, 814, 76, 76, 76, 76,
	76, 76, 76, 76, 823, 822, 802, 827, 828, 805,
	76, 76, 960, 1227, 980, 186, 958, 531, 50, 843,
	779, 780, 829, 312, 312, 312, 312, 441, 312, 441,
	76, 949, 589, 50, 186, 312, 691, 441, 223, 1214,
	76, 858, 1115, 1009, 777, 778, 878, 865, 866, 867,
	785, 985, 986, 519, 566, 569, 570, 571, 567, 957,
	568, 572, 477, 874, 792, 879, 794, 795, 869, 521,
	522, 523, 524, 525, 526, 527, 875, 876, 868, 65,
	655, 834, 881, 991, 1135, 50, 928, 1100, 1033, 988,
	716, 76, 665, 859, 860, 861, 862, 451, 703, 912,
	990, 811, 808, 719, 807, 916, 812, 917, 809, 870,
	871, 872, 298, 810, 1304, 258, 257, 260, 261, 262,
	263, 1298, 186, 259, 264, 186, 186, 186, 186, 186,
	813, 1068, 570, 571, 468, 312, 1303, 186, 227, 228,
	186, 598, 922, 930, 186, 921, 456, 1024, 466, 186,
	186, 601, 433, 76, 1016, 888, 1278, 1277, 457, 1225,
	310, 1010, 1182, 1215, 664, 574, 76, 977, 978, 224,
	225, 468, 941, 913, 914, 218, 462, 1257, 920, 219,
	54, 981, 1256, 887, 1217, 889, 919, 470, 976, 1265,
	1205, 686, 56, 908, 58, 299, 965, 566, 569, 570,
	571, 567, 585, 568, 572, 51, 1, 985, 986, 885,
	1036, 894, 1280, 923, 998, 1238, 989, 186, 1129, 845,
	76, 997, 76, 999, 837, 409, 186, 1007, 64, 186,
	76, 1272, 844, 1244, 1203, 938, 939, 852, 940, 1000,
	1018, 855, 942, 312, 944, 1134, 1023, 1275, 1025, 1026,
	1027, 312, 1015, 441, 608, 1011, 1012, 606, 607, 950,
	605, 610, 312, 312, 312, 312, 312, 312, 312, 312,
	609, 604, 197, 1030, 967, 305, 312, 312, 441, 573,
	597, 948, 880, 471, 66, 1056, 1055, 1039, 890, 1063,
	1021, 1022, 682, 909, 449, 720, 699, 963, 199, 1053,
	720, 720, 517, 918, 717, 1001, 477, 727, 728, 312,
	311, 1107, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 692, 460, 1255, 715, 1076, 1077, 1216, 964, 541,
	787, 1075, 244, 707, 256, 696, 1105, 253, 47, 1101,
	1085, 1087, 801, 255, 254, 1104, 698, 768, 801, 716,
	1086, 973, 1088, 1117, 1118, 1119, 1095, 782, 782, 1106,
	1082, 481, 242, 782, 298, 298, 298, 298, 298, 1111,
	1109, 234, 1110, 297, 557, 76, 565, 563, 186, 298,
	782, 562, 987, 983, 296, 1071, 1123, 1128, 298, 1179,
	1122, 1127, 76, 1262, 1143, 1144, 702, 25, 55, 1035,
	773, 775, 229, 19, 18, 17, 20, 16, 15, 312,
	14, 29, 13, 12, 11, 10, 791, 9, 8, 7,
	6, 5, 312, 4, 1062, 220, 22, 1156, 2, 0,
	0, 0, 0, 299, 310, 76, 76, 0, 76, 0,
	1158, 1097, 0, 1161, 0, 0, 816, 840, 0, 0,
	0, 0, 1166, 0, 0, 1178, 1112, 1113, 0, 1165,
	1114, 76, 0, 1116, 186, 186, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 312, 0, 312, 0,
	0, 76, 0, 0, 0, 1183, 312, 0, 1191, 1194,
	1195, 1196, 0, 0, 0, 0, 0, 0, 0, 0,
	1199, 1197, 0, 0, 0, 0, 1007, 0, 0, 0,
	312, 0, 0, 0, 441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 720, 0, 0, 0,
	1212, 76, 76, 0, 1213, 715, 0, 931, 932, 933,
	1164, 0, 0, 0, 0, 1105, 0, 0, 1229, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	76, 1226, 76, 76, 0, 0, 0, 0, 1206, 1228,
	1208, 0, 1237, 1181, 0, 1243, 1254, 0, 0, 1249,
	531, 1250, 0, 0, 0, 0, 1253, 186, 1105, 1048,
	47, 0, 0, 0, 0, 76, 0, 1104, 1266, 0,
	0, 0, 0, 1202, 0, 0, 0, 1270, 76, 186,
	0, 1267, 0, 0, 0, 76, 0, 1046, 0, 0,
	0, 0, 0, 76, 1284, 0, 186, 298, 0, 1048,
	1289, 0, 0, 801, 0, 0, 0, 0, 946, 0,
	947, 996, 0, 1294, 0, 0, 0, 951, 952, 953,
	0, 0, 0, 0, 0, 0, 962, 1046, 312, 1302,
	1301, 968, 0, 969, 970, 971, 972, 0, 1309, 76,
	1211, 76, 76, 76, 186, 76, 0, 300, 0, 0,
	0, 76, 0, 840, 0, 0, 0, 0, 1047, 0,
	0, 0, 0, 1052, 1049, 1042, 1043, 1050, 1045, 1044,
	0, 1034, 312, 0, 312, 0, 0, 76, 76, 76,
	1051, 0, 183, 0, 0, 0, 1054, 0, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 312, 1047, 1038,
	0, 1283, 531, 1052, 1049, 1042, 1043, 1050, 1045, 1044,
	303, 0, 76, 76, 0, 413, 0, 312, 1079, 1080,
	1051, 0, 0, 0, 0, 76, 1041, 184, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	1089, 1090, 1074, 1092, 1093, 0, 0, 0, 0, 312,
	0, 0, 233, 0, 184, 184, 76, 0, 0, 0,
	184, 0, 0, 0, 782, 0, 0, 1108, 996, 0,
	782, 0, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1084,
	0, 0, 76, 0, 0, 0, 312, 0, 312, 1131,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 840, 421, 840, 422, 0, 0, 0, 0, 0,
	429, 1157, 0, 0, 0, 0, 1120, 431, 0, 0,
	0, 0, 0, 0, 1159, 298, 0, 0, 0, 0,
	0, 1162, 0, 0, 0, 0, 1176, 454, 0, 312,
	0, 1168, 0, 0, 0, 0, 0, 184, 0, 184,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 184, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 493, 492, 502, 503, 495, 496, 497, 498,
	499, 500, 501, 494, 0, 1193, 509, 1193, 1193, 1193,
	508, 1198, 504, 505, 506, 507, 1167, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1169, 1170, 1171,
	1172, 0, 0, 1175, 0, 0, 0, 0, 0, 0,
	559, 0, 840, 312, 312, 312, 1185, 1186, 1187, 583,
	1190, 0, 0, 0, 0, 0, 1218, 1219, 0, 1220,
	1221, 1222, 0, 0, 0, 0, 0, 0, 0, 1038,
	840, 0, 0, 0, 0, 0, 0, 0, 1230, 1231,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 1131, 184, 581, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1223, 0, 1269, 0, 0, 0, 23, 24, 48, 26,
	27, 0, 0, 0, 0, 1234, 1235, 1236, 0, 0,
	0, 0, 0, 0, 0, 42, 0, 0, 0, 0,
	28, 0, 0, 0, 0, 782, 0, 0, 1291, 1258,
	1259, 1260, 1261, 0, 0, 0, 0, 659, 660, 37,
	0, 663, 1297, 50, 666, 493, 492, 502, 503, 495,
	496, 497, 498, 499, 500, 501, 494, 0, 0, 509,
	0, 0, 1311, 508, 0, 504, 505, 506, 507, 685,
	0, 0, 0, 1285, 0, 0, 0, 0, 1290, 0,
	0, 0, 184, 184, 0, 0, 184, 0, 704, 184,
	0, 1295, 0, 670, 0, 0, 0, 0, 0, 935,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 30,
	31, 33, 32, 35, 184, 0, 0, 0, 0, 0,
	0, 0, 1313, 1314, 1173, 454, 0, 0, 0, 0,
	36, 43, 44, 184, 0, 45, 46, 34, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 0, 0, 38,
	39, 0, 40, 41, 0, 0, 0, 0, 0, 0,
	493, 492, 502, 503, 495, 496, 497, 498, 499, 500,
	501, 494, 0, 0, 509, 0, 798, 0, 508, 0,
	504, 505, 506, 507, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 233, 233, 0, 0,
	783, 783, 233, 0, 826, 0, 783, 0, 0, 0,
	0, 0, 0, 1177, 0, 0, 233, 233, 233, 233,
	454, 184, 0, 783, 184, 184, 184, 184, 184, 0,
	0, 0, 49, 625, 0, 0, 815, 0, 0, 184,
	0, 0, 0, 581, 0, 0, 0, 0, 184, 184,
	0, 0, 0, 0, 0, 493, 492, 502, 503, 495,
	496, 497, 498, 499, 500, 501, 494, 0, 0, 509,
	0, 882, 0, 508, 0, 504, 505, 506, 507, 0,
	906, 0, 0, 907, 493, 492, 502, 503, 495, 496,
	497, 498, 499, 500, 501, 494, 0, 0, 509, 0,
	0, 0, 508, 0, 504, 505, 506, 507, 613, 1078,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 184, 493,
	492, 502, 503, 495, 496, 497, 498, 499, 500, 501,
	494, 0, 0, 509, 0, 0, 626, 508, 0, 504,
	505, 506, 507, 670, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 639, 640, 641,
	642, 643, 644, 645, 0, 646, 647, 648, 649, 650,
	627, 628, 629, 630, 611, 612, 0, 0, 614, 0,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	631, 632, 633, 634, 635, 636, 637, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1174, 483, 0,
	491, 0, 0, 0, 0, 0, 510, 511, 512, 513,
	514, 515, 516, 233, 484, 485, 482, 493, 492, 502,
	503, 495, 496, 497, 498, 499, 500, 501, 494, 233,
	0, 509, 0, 0, 0, 508, 0, 504, 505, 506,
	507, 486, 487, 488, 489, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 493, 492,
	502, 503, 495, 496, 497, 498, 499, 500, 501, 494,
	936, 0, 509, 0, 0, 0, 508, 0, 504, 505,
	506, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	493, 492, 502, 503, 495, 496, 497, 498, 499, 500,
	501, 494, 0, 0, 509, 0, 1070, 0, 508, 0,
	504, 505, 506, 507, 493, 492, 502, 503, 495, 496,
	497, 498, 499, 500, 501, 494, 0, 0, 509, 0,
	0, 0, 508, 0, 504, 505, 506, 507, 0, 0,
	0, 0, 0, 1066, 1067, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 492, 502, 503, 495, 496, 497,
	498, 499, 500, 501, 494, 0, 0, 509, 0, 0,
	0, 508, 233, 504, 505, 506, 507, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 502, 503, 495, 496,
	497, 498, 499, 500, 501, 494, 0, 783, 509, 0,
	0, 0, 508, 783, 504, 505, 506, 507, 0, 0,
	0, 1153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 125, 350, 0, 341, 319, 347, 320, 339, 362,
	93, 365, 337, 390, 371, 107, 406, 109, 376, 0,
	142, 118, 0, 0, 364, 392, 366, 386, 359, 382,
	329, 375, 401, 351, 379, 402, 0, 0, 0, 75,
	0, 841, 842, 0, 0, 0, 0, 86, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 1008, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 0, 343, 384, 0, 317, 387, 393,
	358, 187, 396, 356, 355, 399, 131, 0, 783, 145,
	98, 97, 106, 391, 340, 348, 89, 346, 137, 127,
	157, 373, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 321,
	0, 143, 159, 172, 336, 394, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 332, 335, 330, 331,
	369, 370, 403, 404, 405, 385, 327, 0, 333, 334,
	0, 389, 372, 77, 0, 108, 169, 133, 95, 160,
	398, 388, 0, 360, 400, 338, 352, 408, 353, 354,
	381, 324, 368, 125, 350, 0, 341, 319, 347, 320,
	339, 362, 93, 365, 337, 390, 371, 107, 406, 109,
	376, 0, 142, 118, 0, 0, 364, 392, 366, 386,
	359, 382, 329, 375, 401, 351, 379, 402, 0, 0,
	0, 75, 0, 841, 842, 0, 0, 0, 0, 86,
	0, 378, 397, 349, 380, 318, 377, 0, 322, 325,
	407, 395, 344, 345, 0, 0, 0, 0, 0, 0,
	0, 363, 367, 383, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 374, 0, 0, 0, 326,
	323, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 0, 343, 384, 0, 317,
	387, 393, 358, 187, 396, 356, 355, 399, 131, 0,
	0, 145, 98, 97, 106, 391, 340, 348, 89, 346,
	137, 127, 157, 373, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 321, 0, 143, 159, 172, 336, 394, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 332, 335,
	330, 331, 369, 370, 403, 404, 405, 385, 327, 0,
	333, 334, 0, 389, 372, 77, 0, 108, 169, 133,
	95, 160, 398, 388, 0, 360, 400, 338, 352, 408,
	353, 354, 381, 324, 368, 125, 350, 0, 341, 319,
	347, 320, 339, 362, 93, 365, 337, 390, 371, 107,
	406, 109, 376, 0, 142, 118, 0, 0, 364, 392,
	366, 386, 359, 382, 329, 375, 401, 351, 379, 402,
	50, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 378, 397, 349, 380, 318, 377, 0,
	322, 325, 407, 395, 344, 345, 0, 0, 0, 0,
	0, 0, 0, 363, 367, 383, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 374, 0, 0,
	0, 326, 323, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 0, 343, 384,
	0, 317, 387, 393, 358, 187, 396, 356, 355, 399,
	131, 0, 0, 145, 98, 97, 106, 391, 340, 348,
	89, 346, 137, 127, 157, 373, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 321, 0, 143, 159, 172, 336, 394,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	332, 335, 330, 331, 369, 370, 403, 404, 405, 385,
	327, 0, 333, 334, 0, 389, 372, 77, 0, 108,
	169, 133, 95, 160, 398, 388, 0, 360, 400, 338,
	352, 408, 353, 354, 381, 324, 368, 125, 350, 0,
	341, 319, 347, 320, 339, 362, 93, 365, 337, 390,
	371, 107, 406, 109, 376, 0, 142, 118, 0, 0,
	364, 392, 366, 386, 359, 382, 329, 375, 401, 351,
	379, 402, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 1073, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 328, 0,
	343, 384, 0, 317, 387, 393, 358, 187, 396, 356,
	355, 399, 131, 0, 0, 145, 98, 97, 106, 391,
	340, 348, 89, 346, 137, 127, 157, 373, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 321, 0, 143, 159, 172,
	336, 394, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 332, 335, 330, 331, 369, 370, 403, 404,
	405, 385, 327, 0, 333, 334, 0, 389, 372, 77,
	0, 108, 169, 133, 95, 160, 398, 388, 0, 360,
	400, 338, 352, 408, 353, 354, 381, 324, 368, 125,
	350, 0, 341, 319, 347, 320, 339, 362, 93, 365,
	337, 390, 371, 107, 406, 109, 376, 0, 142, 118,
	0, 0, 364, 392, 366, 386, 359, 382, 329, 375,
	401, 351, 379, 402, 0, 0, 0, 238, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 378, 397, 349,
	380, 318, 377, 0, 322, 325, 407, 395, 344, 345,
	0, 0, 0, 0, 0, 0, 0, 363, 367, 383,
	357, 0, 0, 0, 0, 0, 0, 713, 0, 342,
	0, 374, 0, 0, 0, 326, 323, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 187,
	396, 356, 355, 399, 131, 0, 0, 145, 98, 97,
	106, 391, 340, 348, 89, 346, 137, 127, 157, 373,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 321, 0, 143,
	159, 172, 336, 394, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 77, 0, 108, 169, 133, 95, 160, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 125, 350, 0, 341, 319, 347, 320, 339, 362,
	93, 365, 337, 390, 371, 107, 406, 109, 376, 0,
	142, 118, 0, 0, 364, 392, 366, 386, 359, 382,
	329, 375, 401, 351, 379, 402, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 0, 343, 384, 0, 317, 387, 393,
	358, 187, 396, 356, 355, 399, 131, 0, 0, 145,
	98, 97, 106, 391, 340, 348, 89, 346, 137, 127,
	157, 373, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 321,
	0, 143, 159, 172, 336, 394, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 332, 335, 330, 331,
	369, 370, 403, 404, 405, 385, 327, 0, 333, 334,
	0, 389, 372, 77, 0, 108, 169, 133, 95, 160,
	398, 388, 0, 360, 400, 338, 352, 408, 353, 354,
	381, 324, 368, 125, 350, 0, 341, 319, 347, 320,
	339, 362, 93, 365, 337, 390, 371, 107, 406, 109,
	376, 0, 142, 118, 0, 0, 364, 392, 366, 386,
	359, 382, 329, 375, 401, 351, 379, 402, 0, 0,
	0, 238, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 378, 397, 349, 380, 318, 377, 0, 322, 325,
	407, 395, 344, 345, 0, 0, 0, 0, 0, 0,
	0, 363, 367, 383, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 374, 0, 0, 0, 326,
	323, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 0, 343, 384, 0, 317,
	387, 393, 358, 187, 396, 356, 355, 399, 131, 0,
	0, 145, 98, 97, 106, 391, 340, 348, 89, 346,
	137, 127, 157, 373, 128, 136, 110, 149, 132, 156,
	188, 164, 147, 163, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 171, 83, 162, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 321, 0, 143, 159, 172, 336, 394, 165, 166,
	167, 168, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 170, 126, 138, 88, 158, 141, 332, 335,
	330, 331, 369, 370, 403, 404, 405, 385, 327, 0,
	333, 334, 0, 389, 372, 77, 0, 108, 169, 133,
	95, 160, 398, 388, 0, 360, 400, 338, 352, 408,
	353, 354, 381, 324, 368, 125, 350, 0, 341, 319,
	347, 320, 339, 362, 93, 365, 337, 390, 371, 107,
	406, 109, 376, 0, 142, 118, 0, 0, 364, 392,
	366, 386, 359, 382, 329, 375, 401, 351, 379, 402,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 378, 397, 349, 380, 318, 377, 0,
	322, 325, 407, 395, 344, 345, 0, 0, 0, 0,
	0, 0, 0, 363, 367, 383, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 374, 0, 0,
	0, 326, 323, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 0, 343, 384,
	0, 317, 387, 393, 358, 187, 396, 356, 355, 399,
	131, 0, 0, 145, 98, 97, 106, 391, 340, 348,
	89, 346, 137, 127, 157, 373, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 315, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 321, 0, 143, 159, 172, 336, 394,
	165, 166, 167, 168, 0, 0, 0, 316, 314, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	332, 335, 330, 331, 369, 370, 403, 404, 405, 385,
	327, 0, 333, 334, 0, 389, 372, 77, 0, 108,
	169, 133, 95, 160, 398, 388, 0, 360, 400, 338,
	352, 408, 353, 354, 381, 324, 368, 125, 350, 0,
	341, 319, 347, 320, 339, 362, 93, 365, 337, 390,
	371, 107, 406, 109, 376, 0, 142, 118, 0, 0,
	364, 392, 366, 386, 359, 382, 329, 375, 401, 351,
	379, 402, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 328, 0,
	343, 384, 0, 317, 387, 393, 358, 187, 396, 356,
	355, 399, 131, 0, 0, 145, 98, 97, 106, 391,
	340, 348, 89, 346, 137, 127, 157, 373, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 321, 0, 143, 159, 172,
	336, 394, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 332, 335, 330, 331, 369, 370, 403, 404,
	405, 385, 327, 0, 333, 334, 0, 389, 372, 77,
	0, 108, 169, 133, 95, 160, 398, 388, 0, 360,
	400, 338, 352, 408, 353, 354, 381, 324, 368, 125,
	350, 0, 341, 319, 347, 320, 339, 362, 93, 365,
	337, 390, 371, 107, 406, 109, 376, 0, 142, 118,
	0, 0, 364, 392, 366, 386, 359, 382, 329, 375,
	401, 351, 379, 402, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 378, 397, 349,
	380, 318, 377, 0, 322, 325, 407, 395, 344, 345,
	0, 0, 0, 0, 0, 0, 0, 363, 367, 383,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 374, 0, 0, 0, 326, 323, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 187,
	396, 356, 355, 399, 131, 0, 0, 145, 98, 97,
	106, 391, 340, 348, 89, 346, 137, 127, 157, 373,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 591, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 315, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 321, 0, 143,
	159, 172, 336, 394, 165, 166, 167, 168, 0, 0,
	0, 316, 314, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 77, 0, 108, 169, 133, 95, 160, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 125, 350, 0, 341, 319, 347, 320, 339, 362,
	93, 365, 337, 390, 371, 107, 406, 109, 376, 0,
	142, 118, 0, 0, 364, 392, 366, 386, 359, 382,
	329, 375, 401, 351, 379, 402, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 0, 343, 384, 0, 317, 387, 393,
	358, 187, 396, 356, 355, 399, 131, 0, 0, 145,
	98, 97, 106, 391, 340, 348, 89, 346, 137, 127,
	157, 373, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 306, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 315, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 321,
	0, 143, 159, 172, 336, 394, 165, 166, 167, 168,
	0, 0, 0, 316, 314, 309, 308, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 332, 335, 330, 331,
	369, 370, 403, 404, 405, 385, 327, 0, 333, 334,
	0, 389, 372, 77, 0, 108, 169, 133, 95, 160,
	125, 0, 0, 770, 0, 240, 0, 0, 0, 93,
	0, 237, 0, 0, 107, 279, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 270, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 238, 258,
	257, 260, 261, 262, 263, 0, 86, 259, 264, 265,
	266, 0, 0, 235, 251, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 231, 0,
	0, 0, 290, 0, 250, 0, 0, 246, 247, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 288, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 280, 289, 286, 287, 284,
	285, 283, 282, 281, 291, 272, 273, 274, 275, 277,
	0, 276, 77, 0, 108, 169, 133, 95, 160, 125,
	0, 0, 0, 0, 240, 0, 0, 0, 93, 0,
	237, 0, 0, 107, 279, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 454, 238, 258, 257,
	260, 261, 262, 263, 0, 86, 259, 264, 265, 266,
	0, 0, 235, 251, 0, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 0, 0, 0,
	0, 290, 0, 250, 0, 0, 246, 247, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 288, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 280, 289, 286, 287, 284, 285,
	283, 282, 281, 291, 272, 273, 274, 275, 277, 0,
	276, 77, 0, 108, 169, 133, 95, 160, 125, 0,
	0, 0, 0, 240, 0, 0, 0, 93, 0, 237,
	0, 0, 107, 279, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 270, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 238, 258, 257, 260,
	261, 262, 263, 0, 86, 259, 264, 265, 266, 0,
	0, 235, 251, 0, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 231, 0, 0, 0,
	290, 0, 250, 0, 0, 246, 247, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 288, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 280, 289, 286, 287, 284, 285, 283,
	282, 281, 291, 272, 273, 274, 275, 277, 0, 276,
	77, 0, 108, 169, 133, 95, 160, 125, 0, 0,
	0, 0, 240, 0, 0, 0, 93, 0, 237, 0,
	0, 107, 279, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 270, 271, 0, 0, 0, 0, 0, 0,
	833, 0, 50, 0, 0, 238, 258, 257, 260, 261,
	262, 263, 0, 86, 259, 264, 265, 266, 0, 0,
	235, 251, 0, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 0, 0, 0, 0, 290,
	0, 250, 0, 0, 246, 247, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	288, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 280, 289, 286, 287, 284, 285, 283, 282,
	281, 291, 272, 273, 274, 275, 277, 23, 276, 77,
	0, 108, 169, 133, 95, 160, 0, 0, 0, 125,
	0, 0, 0, 0, 240, 0, 0, 0, 93, 0,
	237, 0, 0, 107, 279, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 238, 258, 257,
	260, 261, 262, 263, 0, 86, 259, 264, 265, 266,
	0, 0, 235, 251, 0, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 0, 0, 0,
	0, 290, 0, 250, 0, 0, 246, 247, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 288, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 280, 289, 286, 287, 284, 285,
	283, 282, 281, 291, 272, 273, 274, 275, 277, 0,
	276, 77, 0, 108, 169, 133, 95, 160, 125, 0,
	0, 0, 0, 240, 0, 0, 0, 93, 0, 237,
	0, 0, 107, 279, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 270, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 238, 258, 257, 260,
	261, 262, 263, 0, 86, 259, 264, 265, 266, 0,
	0, 235, 251, 0, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 0, 0, 0, 0,
	290, 0, 250, 0, 0, 246, 247, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 288, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 280, 289, 286, 287, 284, 285, 283,
	282, 281, 291, 272, 273, 274, 275, 277, 125, 276,
	77, 0, 108, 169, 133, 95, 160, 93, 0, 0,
	0, 0, 107, 279, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 270, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 238, 258, 257, 260,
	261, 262, 263, 0, 86, 259, 264, 265, 266, 0,
	0, 0, 251, 0, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 0, 0, 0, 0,
	290, 0, 250, 0, 0, 246, 247, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 288, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 1312, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 280, 289, 286, 287, 284, 285, 283,
	282, 281, 291, 272, 273, 274, 275, 277, 125, 276,
	77, 0, 108, 169, 133, 95, 160, 93, 0, 0,
	0, 0, 107, 279, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 270, 271, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 238, 258, 257, 260,
	261, 262, 263, 0, 86, 259, 264, 265, 266, 0,
	0, 0, 251, 0, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 0, 0, 0, 0,
	290, 0, 250, 0, 0, 246, 247, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 288, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 280, 289, 286, 287, 284, 285, 283,
	282, 281, 291, 272, 273, 274, 275, 277, 125, 276,
	77, 0, 108, 169, 133, 95, 160, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	493, 492, 502, 503, 495, 496, 497, 498, 499, 500,
	501, 494, 0, 0, 509, 0, 0, 0, 508, 0,
	504, 505, 506, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 108, 169, 133, 95, 160, 125, 0, 0,
	0, 476, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 478, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 72, 0, 67, 0, 0,
	0, 73, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 69, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 169, 133, 95, 160, 125, 0, 0, 0,
	580, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 582, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 700, 0, 0,
	701, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 600, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 599, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	108, 169, 133, 95, 160, 125, 0, 0, 0, 580,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 582, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 578, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	169, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	169, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 582, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	169, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 478, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 188, 164, 147, 163, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 171, 83, 162,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 172, 0, 0,
	165, 166, 167, 168, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 170, 126, 138, 88, 158, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 77, 0, 108,
	169, 133, 95, 160, 558, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 238, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	108, 169, 133, 95, 160,
}

var yyPact = [...]int{
	1690, -1000, -189, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 795, 817, -1000, -1000, -1000, -1000, -1000, -1000, 656,
	7609, 45, 85, -33, 10388, 84, 95, 11078, -1000, -15,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 595, -1000, -1000,
	-1000, -1000, -1000, 788, 793, 662, 779, 729, -1000, 5730,
	44, 9237, 10158, 5013, -1000, 483, 78, 11078, -157, 10618,
	41, 41, 41, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 81, 11078, -1000, 11078, 39, 480, 39,
	39, 39, 11078, -1000, 118, -1000, -1000, -1000, -1000, 11078,
	466, 752, 32, 2997, 2997, 2997, 2997, -5, 2997, -94,
	676, -1000, -1000, -1000, -1000, 2997, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 453, 757, 6450, 6450,
	795, -1000, 595, -1000, -1000, -1000, 743, -1000, -1000, 244,
	806, -1000, 7379, 116, -1000, 6450, 2047, 523, -1000, -1000,
	523, -1000, -1000, -1000, -1000, -1000, 6910, 6910, 6910, 6910,
	6910, 6910, 6910, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 523, -1000, 6211,
	523, 523, 523, 523, 523, 523, 523, 523, 6450, 523,
	523, 523, 523, 523, 523, 523, 523, 523, 523, 523,
	523, 523, 9928, 552, 643, -1000, -1000, -1000, 773, 8308,
	9007, 11078, 478, -1000, 608, 4761, -93, -1000, -1000, -1000,
	173, 8768, -1000, -1000, -1000, 751, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 506,
	-1000, 1903, 464, 2997, 50, 658, 440, 189, 435, 11078,
	11078, 2997, 47, 11078, 771, 671, 11078, 429, 427, -1000,
	4509, -1000, 2997, 2997, 2997, 2997, 2997, 2997, 2997, 2997,
	-1000, -1000, -1000, -1000, -1000, -1000, 2997, 2997, -1000, -84,
	-1000, 11078, -1000, -1000, -1000, -1000, 812, 143, 342, 110,
	612, -1000, 449, 788, 453, 729, 8538, 686, -1000, -1000,
	11078, -1000, 6450, 6450, 314, -1000, 9697, -1000, -1000, 3501,
	148, 6910, 388, 256, 6910, 6910, 688, 388, 388, 6910,
	6910, 6910, 6910, 6910, 6910, 6910, 6910, 6910, 6910, 6910,
	6910, 6910, 6910, 6910, 6910, 6910, 6910, 6910, -18, 414,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 420, -1000,
	595, 345, 345, 345, 345, 345, 345, 7140, 5252, 453,
	504, 305, 6211, 5730, 5730, 6450, 6450, 10848, 10848, 5730,
	780, 179, 305, 10848, -1000, 453, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5730, 5730, 5730, 5730, 15, 11078, -1000,
	10848, 9237, 9237, 9237, 9237, 9237, -1000, 693, 691, -1000,
	697, 690, 719, 11078, -1000, 502, 8308, 117, 523, -1000,
	9467, -1000, -1000, 15, 529, 9237, 11078, -1000, -1000, 4257,
	608, -93, 598, -1000, -113, -112, 5969, 122, -1000, -1000,
	-1000, -1000, 2745, 187, 270, -75, -1000, -1000, -1000, 618,
	-1000, 618, 618, 618, 618, -47, -47, -47, -47, -1000,
	-1000, -1000, -1000, -1000, 655, 645, -1000, 618, 618, 618,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 640, 640, 640, 623,
	623, 660, -1000, 11078, -173, 413, 2997, 762, 2997, -1000,
	115, -1000, 11078, -1000, -1000, 11078, 2997, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 235, -1000, -1000, -1000, -1000, 692, 6450, 6450,
	4005, 6450, -1000, -1000, -1000, 757, -1000, 780, 797, -1000,
	742, 739, 5730, -1000, -1000, 148, 172, -1000, -1000, 377,
	-1000, -1000, -1000, -1000, 108, 523, -1000, 2154, -1000, -1000,
	-1000, 121, -1000, 388, 6910, 6910, 6910, 1655, 2154, -1000,
	-1000, -1000, 2154, 2154, 2130, 2234, 2203, 345, 319, 319,
	227, 227, 227, 227, 227, 367, 367, 2154, 2154, 2154,
	2154, -191, -1000, 618, 618, -1000, 618, 623, -1000, -1000,
	618, -30, 618, -31, -1000, -1000, -1000, 453, -1000, 453,
	5730, 607, -1000, -1000, 6450, -1000, 453, 495, 495, 278,
	339, 635, -1000, 107, 588, 495, 5730, 290, -1000, 6450,
	453, -1000, 495, 453, 495, 495, 522, 523, -1000, 590,
	-1000, 171, 643, 630, 668, 786, -1000, -1000, -1000, -1000,
	689, -1000, 672, -1000, -1000, -1000, -1000, -1000, 62, 61,
	60, 10618, -1000, 799, 9237, 555, -1000, -1000, 598, -93,
	-103, -1000, -1000, -1000, 305, -1000, 398, 568, 2493, -1000,
	-1000, -1000, -1000, -1000, -1000, 620, 763, 175, 174, 395,
	-1000, -1000, 755, -1000, 232, -78, -1000, -1000, 318, -47,
	-47, -1000, -1000, 122, 747, 122, 122, 122, 355, 355,
	-1000, -1000, -1000, -1000, 313, -1000, -1000, -1000, 300, -1000,
	667, 10618, 2997, -1000, 3753, -1000, -1000, -1000, -1000, -1000,
	-1000, 1241, 1201, 176, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13, -1000, 2997, -1000, 228,
	11078, 11078, 723, 305, 305, 104, -1000, -1000, 11078, -1000,
	-1000, -1000, -1000, 569, -1000, -1000, -1000, 3249, 5730, -18,
	-1000, 1655, 2154, 1939, -1000, 6910, 6910, -194, -1000, 109,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 495, 5730,
	305, -1000, -1000, -1000, -18, 414, -18, 6910, 6910, 4005,
	6910, 6910, -167, 556, 181, -1000, 6450, 287, -1000, -1000,
	-1000, -1000, -1000, 666, 10848, 523, -1000, 8078, 10618, 795,
	10848, 6450, 6450, -1000, -1000, 6450, 619, -1000, 6450, -1000,
	-1000, -1000, 523, 523, 523, 459, -1000, 795, 555, -1000,
	-1000, -1000, -137, -134, -1000, -1000, 2745, -1000, 2745, 10618,
	-1000, 368, 365, -1000, -1000, 663, 83, -1000, -1000, -1000,
	498, 122, 122, -1000, 162, -1000, -1000, -1000, 489, -1000,
	487, 558, 470, 11078, -1000, -1000, 557, -1000, 170, -1000,
	-1000, 10618, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10618, 11078, -1000, -1000, -1000, -1000,
	-1000, 10618, -1000, -1000, 352, 6450, -1000, -1000, -1000, 3753,
	-1000, 799, 9237, -1000, -1000, 453, -191, -1000, 6910, 2154,
	2154, -1000, -1000, -1000, -1000, -1000, 11, 453, 11, 1770,
	2098, -1000, 1472, 1894, 523, -164, -1000, 305, 6450, -1000,
	765, 518, 531, -1000, -1000, 5491, 453, 461, 103, 459,
	788, -1000, 305, 305, 305, 10618, 305, 10618, 10618, 10618,
	7848, 10618, 788, -1000, -1000, -1000, -1000, 2493, -1000, 457,
	-1000, 618, -1000, -1000, -70, 811, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -47, 340, -47,
	295, -1000, 283, 2997, 3753, 2745, -1000, 616, -1000, -1000,
	-1000, -1000, 767, -1000, 305, 801, 554, -1000, 2154, -1000,
	-1000, -1000, -1000, 6910, 6910, -1000, 6910, 6910, 6910, 453,
	328, 305, 761, -1000, 523, -1000, -1000, 610, 10618, 10618,
	-1000, -1000, 452, -1000, 448, 448, 448, 117, -1000, -1000,
	156, 10618, -1000, 164, -1000, -147, 122, -1000, 122, 492,
	471, -1000, -1000, -1000, 10618, 523, 798, 791, 1865, 1865,
	1865, 1865, 9, -1000, -1000, 810, -1000, 523, -1000, 595,
	100, -1000, 10618, -1000, -1000, -1000, -1000, -1000, 156, -1000,
	341, 166, 320, -1000, 240, 759, -1000, 758, -1000, -1000,
	-1000, -1000, -1000, 446, 5, -1000, 6450, 6450, -1000, -1000,
	-1000, -1000, 453, 43, -176, 10848, 531, 453, 10618, -1000,
	-1000, -1000, 254, -1000, -1000, -1000, 291, -1000, -1000, 658,
	433, -1000, 10618, 305, 530, -1000, 713, -170, -179, 520,
	-1000, -1000, -1000, -1000, -173, -1000, 5, 733, -1000, 706,
	-1000, -1000, -1000, -4, -174, -2, -177, 523, -180, 6680,
	-1000, 1865, 453, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1068, 21, 517, 1066, 1065, 1063, 1061, 1060, 1059,
	1058, 1057, 1055, 1054, 1053, 1052, 1051, 1050, 1048, 1047,
	1046, 1045, 1044, 1043, 155, 1042, 1038, 1037, 59, 1036,
	61, 1033, 1029, 34, 140, 42, 30, 114, 1025, 19,
	74, 55, 1024, 40, 1023, 1022, 64, 1021, 52, 1017,
	1016, 1317, 1014, 1013, 14, 27, 1011, 1002, 1001, 991,
	53, 452, 986, 984, 983, 977, 974, 973, 49, 6,
	10, 9, 16, 972, 442, 7, 970, 38, 969, 968,
	967, 963, 32, 962, 43, 961, 17, 41, 941, 11,
	50, 31, 23, 4, 63, 46, 940, 28, 47, 39,
	935, 933, 346, 932, 928, 924, 923, 922, 919, 145,
	322, 918, 916, 915, 914, 29, 193, 459, 484, 57,
	913, 912, 910, 1362, 51, 54, 20, 909, 26, 156,
	25, 905, 902, 35, 901, 900, 891, 890, 888, 887,
	884, 111, 882, 877, 875, 60, 12, 871, 870, 58,
	44, 867, 864, 863, 33, 45, 862, 37, 861, 858,
	855, 854, 24, 18, 849, 13, 848, 8, 845, 842,
	2, 841, 15, 840, 5, 839, 3, 36, 836, 835,
	0, 510, 832, 824, 118,
}

var yyR1 = [...]int{
	0, 178, 179, 179, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 182,
	182, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 176, 176, 175,
	174, 174, 173, 173, 172, 16, 159, 160, 160, 160,
	155, 134, 134, 134, 134, 137, 137, 135, 135, 135,
	135, 135, 135, 135, 136, 136, 136, 136, 136, 138,
	138, 138, 138, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 140, 140, 140, 140, 140, 154, 154, 141,
	141, 149, 149, 150, 150, 150, 147, 147, 148, 148,
	151, 151, 151, 142, 142, 142, 142, 142, 142, 142,
	144, 144, 152, 152, 145, 145, 145, 146, 146, 153,
	153, 153, 153, 153, 143, 143, 156, 156, 168, 168,
	167, 167, 167, 158, 158, 164, 164, 164, 164, 164,
	157, 157, 166, 166, 165, 161, 161, 161, 162, 162,
	162, 163, 163, 163, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 171, 169, 169, 170, 170, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 107, 107, 104, 104, 105, 105, 106, 106, 106,
	108, 108, 108, 132, 132, 132, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 183, 24, 25,
	25, 26, 26, 26, 30, 30, 30, 28, 28, 29,
	29, 35, 35, 34, 34, 36, 36, 36, 36, 120,
	120, 120, 119, 119, 38, 38, 39, 39, 40, 40,
	41, 41, 41, 53, 53, 89, 89, 91, 91, 42,
	42, 42, 42, 43, 43, 44, 44, 45, 45, 127,
	127, 126, 126, 126, 125, 125, 47, 47, 47, 49,
	48, 48, 48, 48, 50, 50, 52, 52, 51, 51,
	54, 54, 54, 54, 55, 55, 37, 37, 37, 37,
	37, 37, 37, 103, 103, 57, 57, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 33, 33, 68, 68, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 65,
	65, 65, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 184, 184, 66, 66, 66,
	66, 31, 31, 31, 31, 31, 130, 130, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 78, 78, 32, 32, 76, 76,
	77, 79, 79, 75, 75, 75, 60, 60, 60, 60,
	60, 60, 60, 60, 62, 62, 62, 80, 80, 81,
	81, 82, 82, 83, 83, 84, 85, 85, 85, 86,
	86, 86, 86, 87, 87, 87, 59, 59, 59, 59,
	59, 59, 88, 88, 88, 88, 92, 92, 70, 70,
	72, 72, 71, 73, 93, 93, 97, 94, 94, 98,
	98, 98, 96, 96, 96, 122, 122, 122, 101, 101,
	109, 109, 110, 110, 102, 102, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 113,
	113, 114, 114, 114, 121, 121, 117, 117, 118, 118,
	123, 123, 124, 124, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 180, 181, 128, 129, 129, 129,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 7, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 3, 3, 3, 3, 3, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 3,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 6, 8, 8,
	6, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 3, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -178, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	119, 120, 122, 121, 147, 123, 140, 49, 159, 160,
	162, 163, 25, 141, 142, 145, 146, -180, 8, 242,
	53, -179, 257, -82, 15, -26, 5, -24, -183, -24,
	-24, -24, -24, -24, -159, 53, -114, 128, 69, 155,
	234, 125, 126, 132, -117, 56, -116, 250, 159, 170,
	164, 191, 183, 181, 184, 221, 64, 162, 230, 143,
	179, 175, 173, 27, 196, 255, 174, 138, 137, 197,
	201, 222, 168, 169, 224, 195, 139, 32, 252, 34,
	151, 225, 199, 194, 190, 193, 167, 189, 38, 203,
	202, 204, 220, 186, 176, 18, 228, 146, 149, 198,
	200, 133, 153, 254, 226, 172, 150, 145, 229, 163,
	223, 232, 37, 208, 166, 136, 160, 157, 187, 152,
	177, 178, 192, 165, 188, 161, 154, 147, 231, 209,
	256, 185, 182, 158, 156, 213, 214, 215, 216, 253,
	227, 180, 210, -102, 128, 130, 126, 126, 127, 128,
	234, 125, 126, -51, -123, 56, -116, 128, 155, 126,
	105, 184, 119, 211, 127, 32, 153, -132, 126, -104,
	156, 213, 214, 215, 216, 56, 223, 222, 217, -123,
	161, -128, -128, -128, -128, -128, -2, -86, 17, 16,
	-5, -3, -180, 6, 20, 21, -30, 39, 40, -25,
	-36, 96, -37, -123, -56, 71, -61, 29, 56, -116,
	23, -60, -57, -75, -73, -74, 105, 106, 94, 95,
	102, 72, 107, -65, -63, -64, -66, 58, 57, 65,
	59, 60, 61, 62, 66, 67, 68, -117, -71, -180,
	43, 44, 243, 244, 245, 246, 249, 247, 74, 33,
	233, 241, 240, 239, 237, 238, 235, 236, 131, 234,
	100, 242, -102, -39, -40, -41, -42, -53, -74, -180,
	-51, 11, -46, -51, -94, -131, 161, -98, 223, 222,
	-118, -96, -117, -115, 221, 184, 220, 124, 70, 22,
	24, 206, 73, 105, 16, 74, 104, 243, 119, 47,
	235, 236, 233, 245, 246, 234, 211, 29, 10, 25,
	141, 21, 98, 121, 77, 78, 144, 23, 142, 68,
	19, 50, 11, 13, 14, 131, 130, 89, 127, 45,
	8, 107, 26, 86, 41, 28, 43, 87, 17, 237,
	238, 31, 249, 148, 100, 48, 35, 71, 66, 51,
	69, 15, 46, 88, 122, 242, 44, 125, 6, 248,
	30, 140, 42, 126, 212, 76, 129, 67, 5, 132,
	9, 49, 52, 239, 240, 241, 33, 75, 12, -160,
	-155, 56, 127, -51, 242, -117, -110, 131, -110, -110,
	126, -51, -51, -109, 131, 56, -109, -109, -109, -51,
	109, -51, 56, 30, 234, 56, 153, 126, 154, 128,
	-129, -180, -118, -129, -129, -129, 157, 158, -129, -105,
	218, 51, -129, -181, 55, -87, 19, 31, -37, -123,
	-83, -84, -37, -82, -2, -24, 35, -28, 21, 63,
	11, -120, 70, 69, 86, -119, 22, -117, 58, 109,
	-37, -58, 89, 71, 87, 88, 114, 115, 116, 117,
	118, 73, 91, 90, 101, 94, 95, 96, 97, 98,
	99, 100, 92, 93, 110, 111, 112, 113, 108, 104,
	79, 80, 81, 82, 83, 84, 85, -103, -180, -74,
	-180, -61, -61, -61, -61, -61, -61, -61, -180, -2,
	-69, -37, -180, -180, -180, -180, -180, -180, -180, -180,
	-180, -78, -37, -180, -184, -180, -184, -184, -184, -184,
	-184, -184, -184, -180, -180, -180, -180, -52, 26, -51,
	30, 54, -47, -49, -48, -50, 41, 45, 47, 42,
	43, 44, 48, -127, 22, -39, -180, -126, 149, -125,
	22, -123, 58, -51, -46, -182, 54, 11, 52, 54,
	-94, 161, -95, -99, 224, 226, 79, -122, -117, 58,
	29, 30, 55, 54, -134, -137, -139, -138, -140, -135,
	-136, 181, 182, 105, 185, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 30, 143, 177, 178, 179,
	180, 197, 198, 199, 200, 201, 202, 203, 204, 164,
	165, 166, 167, 168, 169, 170, 172, 173, 174, 175,
	176, 56, -129, 128, -176, 52, 56, 71, 56, -51,
	-51, -129, 129, -51, 23, 51, -51, 56, 56, -124,
	-123, -115, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -107, 212, 219, -51, 9, 89, 54, 18,
	109, 54, -85, 24, 25, -86, -181, -30, -62, -117,
	59, 62, -29, 42, -51, -37, -37, -67, 66, 71,
	67, 68, -119, 96, -124, -118, -115, -61, -68, -71,
	-74, 58, 62, 89, 87, 88, 73, -61, -61, -60,
	-68, -68, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -133, 187, 105, 181, 143, 179, 175, 195, 251,
	186, 208, 177, 209, -130, 56, 58, 56, -117, -35,
	21, -34, -36, -181, 54, -181, -2, -34, -34, -37,
	-37, -75, -117, -123, -75, -34, -28, -76, -77, 75,
	-75, -181, -34, -35, -34, -34, -90, 149, -51, -93,
	-97, -75, -40, -41, -41, -40, -41, 41, 41, 41,
	46, 41, 46, 41, -48, -123, -181, -54, 49, 130,
	50, -180, -125, -90, 52, -39, -51, -98, -95, 54,
	225, 227, 228, 51, -37, -146, 104, -161, -162, -163,
	-118, 58, 59, -155, -156, -164, 133, 136, 132, -157,
	127, 28, -151, 66, 71, -147, 209, -141, 53, -141,
	-141, -141, -141, -145, 184, -145, -145, -145, 53, 53,
	-141, -141, -141, -149, 53, -149, -149, -150, 53, -150,
	-121, 52, -51, -174, 253, -175, 56, -129, 23, -129,
	-111, 124, 121, 122, -171, 120, 206, 184, 64, 29,
	15, 243, 149, 256, 56, 150, -51, -51, -129, -106,
	11, 89, 37, -37, -37, -124, -84, -87, -101, 19,
	11, 33, 33, -34, 66, 67, 68, 109, -180, 108,
	-68, -61, -61, -61, -33, 144, 70, 258, -141, -141,
	-141, -150, -141, 169, -141, 169, -181, -181, -34, 54,
	-37, -181, -181, -181, 54, 52, 22, 54, 11, 109,
	54, 11, -181, -34, -79, -77, 77, -37, -181, -181,
	-181, -181, -181, -59, 30, 33, -2, -180, -180, -55,
	54, 12, 79, -44, -43, 51, 52, -45, 51, -43,
	41, 41, 127, 127, 127, -91, -117, -55, -39, -55,
	-99, -100, 229, 226, 232, 56, 54, -163, 79, 53,
	28, -157, -157, 56, 56, -142, 29, 66, -148, 210,
	59, -145, -145, -146, 30, -146, -146, -146, -154, 58,
	-154, 59, 59, 51, -117, -129, -173, -172, -118, -128,
	-177, 155, 134, 135, 138, 137, 56, 127, 28, 133,
	136, 149, 132, -177, 155, -112, -113, 129, 22, 127,
	28, 149, -129, -108, 87, 12, -123, -123, 38, 109,
	-51, -38, 11, 96, -118, -35, -133, -33, 70, -61,
	-61, 259, -145, 56, -181, -36, -133, -130, -133, -61,
	-61, -118, -61, -61, 250, -82, 78, -37, 76, -92,
	51, -93, -70, -72, -71, -180, -2, -88, -117, -91,
	-82, -97, -37, -37, -37, 53, -37, -180, -180, -180,
	-181, 54, -82, -55, 226, 230, 231, -162, -163, -166,
	-165, -117, 56, 56, -144, 51, 58, 59, 60, 66,
	233, 65, 55, -146, -146, 56, 105, 55, 54, 55,
	54, 55, 54, -51, 54, 79, -128, -117, -128, -117,
	-51, -128, -117, 58, -37, -55, -39, -181, -61, -181,
	-181, -181, -181, 54, 19, -181, 54, 19, -180, -32,
	248, -37, 27, -92, 54, -181, -181, -181, 54, 109,
	-181, -86, -89, -117, -89, -89, -89, -126, -117, -86,
	55, 54, -141, -152, 206, 9, -145, 58, -145, 59,
	59, -129, -172, -163, 53, 26, -80, 13, -61, -61,
	-61, -61, -61, -181, 58, 28, -72, 33, -2, -180,
	-117, -117, 54, 55, -181, -181, -181, -54, -168, -167,
	52, 139, 64, -165, -153, 133, 28, 132, 233, -146,
	-146, 55, 55, -89, -180, -81, 14, 16, -181, -181,
	-181, -181, -31, 89, 253, 9, -70, -2, 109, -117,
	-167, 56, -158, 79, 58, -143, 64, 28, 28, 55,
	-169, -170, 149, -37, -69, -181, 251, 48, 254, -93,
	-181, -117, 59, 58, -176, -181, 54, -117, 38, 252,
	255, -174, -170, 33, 38, 151, 253, 152, 254, -180,
	255, -61, 148, -181, -181,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 521, 0, 277, 277, 277, 277, 277, 277, 0,
	591, 574, 0, 0, 0, 0, -2, 267, 268, 0,
	270, 271, 796, 796, 796, 796, 796, 0, 33, 34,
	794, 1, 3, 529, 0, 0, 281, 284, 279, 0,
	574, 0, 0, 0, 60, 0, 0, 783, 0, 784,
	572, 572, 572, 592, 593, 596, 597, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 0, 0, 575, 0, 570, 0, 570,
	570, 570, 0, 226, 348, 600, 601, 783, 784, 0,
	0, 0, 0, 797, 797, 797, 797, 0, 797, 255,
	244, 246, 247, 248, 249, 797, 264, 265, 254, 266,
	269, 272, 273, 274, 275, 276, 27, 533, 0, 0,
	521, 29, 0, 277, 282, 283, 287, 285, 286, 278,
	0, 295, 299, 0, 356, 0, 361, 363, -2, -2,
	0, 405, 406, 407, 408, 409, 0, 0, 0, 0,
	0, 0, 0, 435, 436, 437, 438, 506, 507, 508,
	509, 510, 511, 512, 513, 365, 366, 503, 553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 494, 0,
	465, 465, 465, 465, 465, 465, 465, 465, 0, 0,
	0, 0, 0, 0, 306, 308, 309, 310, 329, 0,
	331, 0, 0, 41, 45, 0, 774, 557, -2, -2,
	0, 0, 598, 599, -2, 703, -2, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 0,
	77, 0, 0, 797, 0, 67, 0, 0, 0, 0,
	0, 797, 0, 0, 0, 0, 0, 0, 0, 225,
	0, 227, 797, 797, 797, 797, 797, 797, 797, 797,
	236, 798, 799, 237, 238, 239, 797, 797, 241, 0,
	256, 0, 250, 28, 795, 22, 0, 0, 530, 0,
	522, 523, 526, 529, 27, 284, 0, 289, 288, 280,
	0, 296, 0, 0, 0, 300, 0, 302, 303, 0,
	359, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	388, 389, 390, 391, 392, 393, 394, 362, 0, 381,
	0, 428, 429, 430, 431, 432, 433, 0, 291, 27,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 495, 0, 457, 0, 458, 459, 460, 461,
	462, 463, 464, 0, 291, 0, 0, 43, 0, 347,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 339,
	0, 0, 0, 0, 330, 0, 0, 350, 747, 332,
	0, 334, 335, -2, 0, 0, 0, 39, 40, 0,
	46, 774, 48, 49, 0, 0, 0, 157, 565, 566,
	567, 563, 185, 0, 140, 136, 82, 83, 84, 129,
	86, 129, 129, 129, 129, 154, 154, 154, 154, 112,
	113, 114, 115, 116, 0, 0, 99, 129, 129, 129,
	103, 119, 120, 121, 122, 123, 124, 125, 126, 87,
	88, 89, 90, 91, 92, 93, 131, 131, 131, 133,
	133, 594, 62, 0, 70, 0, 797, 0, 797, 75,
	0, 201, 0, 220, 571, 0, 797, 223, 224, 349,
	602, 603, 228, 229, 230, 231, 232, 233, 234, 235,
	240, 243, 257, 251, 252, 245, 534, 0, 0, 0,
	0, 0, 525, 527, 528, 533, 30, 287, 0, 514,
	0, 0, 0, 290, 25, 357, 358, 360, 382, 0,
	384, 386, 301, 297, 0, 504, -2, 367, 368, 397,
	398, 400, 401, 0, 0, 0, 0, 395, 372, 374,
	375, 376, 377, 378, 0, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
	425, 426, 478, 129, 129, 482, 129, 133, 485, 486,
	129, 488, 129, 491, 427, 476, 477, 0, 434, 0,
	0, 292, 293, 402, 0, 552, 27, 0, 0, 0,
	0, 0, 503, 0, 0, 0, 0, 501, 498, 0,
	0, 466, 0, 0, 0, 0, 0, 0, 346, 354,
	554, 0, 307, 325, 327, 0, 322, 337, 338, 340,
	0, 342, 0, 344, 345, 311, 312, 313, 0, 0,
	0, 0, 333, 354, 0, 354, 42, 558, 47, 0,
	0, 52, 53, 559, 560, 561, 0, 76, 186, 188,
	191, 192, 193, 78, 79, 0, 0, 0, 0, 0,
	180, 181, 143, 141, 0, 138, 137, 85, 0, 154,
	154, 106, 107, 157, 0, 157, 157, 157, 0, 0,
	100, 101, 102, 94, 0, 95, 96, 97, 0, 98,
	0, 0, 797, 64, 0, 68, 69, 65, 573, 66,
	796, 0, 0, 586, 202, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 0, 219, 797, 222, 260,
	0, 0, 0, 531, 532, 0, 524, 23, 0, 568,
	569, 515, 516, 304, 383, 385, 387, 0, 291, 0,
	369, 395, 373, 0, 370, 0, 0, 0, 479, 154,
	483, 484, 487, 489, 490, 492, 364, 439, 0, 0,
	404, -2, 442, 443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 521, 0, 499, 0, 0, 456, 467,
	468, 469, 470, 546, 0, 0, -2, 0, 0, 521,
	0, 0, 0, 319, 326, 0, 0, 320, 0, 321,
	341, 343, 0, 0, 0, 0, 317, 521, 354, 38,
	50, 51, 0, 0, 57, 158, 0, 189, 0, 0,
	175, 0, 0, 178, 179, 150, 0, 142, 81, 139,
	0, 157, 157, 108, 0, 109, 110, 111, 0, 127,
	0, 0, 0, 0, 595, 63, 71, 72, 0, 194,
	796, 0, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 796, 0, 0, 796, 587, 588, 589,
	590, 0, 221, 242, 0, 0, 258, 259, 535, 0,
	24, 354, 0, 298, 505, 0, 399, 371, 0, 396,
	379, 493, 480, 481, 440, 294, 0, 0, 0, 0,
	0, 504, 0, 0, 0, 496, 455, 502, 0, 31,
	0, 546, 536, 548, 550, 0, 27, 0, 542, 0,
	529, 555, 355, 556, 323, 0, 328, 0, 0, 0,
	331, 0, 529, 37, 54, 55, 56, 187, 190, 0,
	182, 129, 176, 177, 152, 0, 144, 145, 146, 147,
	148, 149, 130, 104, 105, 155, 156, 154, 0, 154,
	0, 134, 0, 797, 0, 0, 195, 0, 196, 198,
	199, 200, 0, 261, 262, 517, 305, 441, 380, 444,
	446, 445, 447, 0, 0, 450, 0, 0, 0, 0,
	0, 500, 0, 32, 0, 551, -2, 0, 0, 0,
	44, 35, 0, 315, 0, 0, 0, 350, 318, 36,
	167, 0, 184, 159, 153, 0, 157, 128, 157, 0,
	0, 61, 73, 74, 0, 0, 519, 0, 0, 0,
	0, 0, 471, 454, 497, 0, 549, 0, -2, 0,
	544, 543, 0, 324, 351, 352, 353, 314, 166, 168,
	0, 173, 0, 183, 164, 0, 161, 163, 151, 117,
	118, 132, 135, 0, 0, 26, 0, 0, 448, 449,
	451, 452, 0, 0, 0, 0, 539, 27, 0, 316,
	169, 170, 0, 174, 172, 80, 0, 160, 162, 67,
	0, 215, 0, 520, 518, 453, 0, 0, 0, 547,
	-2, 545, 171, 165, 70, 214, 0, 0, 472, 0,
	475, 197, 216, 0, 473, 0, 0, 0, 0, 0,
	474, 0, 0, 217, 218,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	53, 55, 96, 94, 54, 95, 109, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 257,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 258, 3, 259, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:312
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:317
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:318
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:322
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:345
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:353
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:357
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:363
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:370
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:376
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:380
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:397
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:409
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:421
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:425
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:431
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:437
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:441
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:445
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:450
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:451
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:455
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:459
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:464
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:468
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:474
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:478
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:482
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:486
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:492
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:496
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:502
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:506
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:516
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:520
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:524
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:534
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:544
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:549
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:554
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:558
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:562
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:579
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:583
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:589
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:594
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:599
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:605
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:610
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:616
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:622
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:629
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:636
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:641
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:651
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:662
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:673
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:870
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:875
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:879
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:884
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:888
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:896
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:900
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:906
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:914
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:923
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:933
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:941
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:946
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:950
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:954
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:958
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:962
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:966
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:975
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:979
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:984
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:993
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:997
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1001
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1006
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1019
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1027
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1046
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1050
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1056
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1060
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1070
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1075
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1081
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1085
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1091
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1095
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1107
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1117
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1127
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1138
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1146
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1158
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1162
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1172
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1182
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1186
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1190
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1194
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1207
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1217
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1222
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1227
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1231
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1250
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1260
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1266
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1270
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1276
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1282
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1290
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1295
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1303
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1307
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1313
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1322
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1341
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1345
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1349
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1353
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1385
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1415
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1419
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1435
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1439
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1445
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1449
		{
			yyVAL.str = "extended "
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1455
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1459
		{
			yyVAL.str = "full "
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1465
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1469
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1473
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1479
		{
			yyVAL.showFilter = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1483
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1493
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1497
		{
			yyVAL.str = SessionStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1501
		{
			yyVAL.str = GlobalStr
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1507
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1511
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Begin{}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Begin{}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &Commit{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Rollback{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &OtherRead{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &OtherRead{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &OtherRead{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1560
		{
			setAllowComments(yylex, true)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1564
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1570
		{
			yyVAL.bytes2 = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1574
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.str = UnionStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1584
		{
			yyVAL.str = UnionAllStr
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.str = UnionDistinctStr
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1593
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1597
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1601
		{
			yyVAL.str = SQLCacheStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1606
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1610
		{
			yyVAL.str = DistinctStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1615
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = StraightJoinHint
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1624
		{
			yyVAL.selectExprs = nil
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1634
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1638
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1644
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1648
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1652
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1656
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1661
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1665
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1669
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1681
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1685
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1691
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1695
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1709
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1719
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1723
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1733
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1743
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1756
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1760
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1764
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1768
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1776
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1780
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1782
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1786
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1788
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1793
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1796
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1804
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = JoinStr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = JoinStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = JoinStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = StraightJoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = LeftJoinStr
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = LeftJoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = RightJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = RightJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = NaturalJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1859
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1873
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1879
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1883
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1888
		{
			yyVAL.indexHints = nil
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1892
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1896
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1900
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1905
		{
			yyVAL.expr = nil
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1909
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1919
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1923
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1927
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1935
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1939
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1945
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1949
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1969
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1973
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1977
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1981
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1985
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1989
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1999
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2003
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2011
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2015
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2019
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2023
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.str = IsNullStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = IsNotNullStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = IsTrueStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2041
		{
			yyVAL.str = IsNotTrueStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.str = IsFalseStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2049
		{
			yyVAL.str = IsNotFalseStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.str = EqualStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = LessThanStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = GreaterThanStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2067
		{
			yyVAL.str = LessEqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.str = GreaterEqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.str = NotEqualStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2084
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2088
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2102
		{
			yyVAL.colTuple = &ConvertExpr{Expr: NewStrVal(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			// this is an array literal ('{a,b,c}', etc)
			// TODO this is weird and ugly but I need those quotes to be passed through
			tmp := make([]byte, len(yyDollar[1].bytes)+2)
			tmp[0] = '\''
			tmp[len(yyDollar[1].bytes)+1] = '\''
			copy(tmp[1:], yyDollar[1].bytes)
			yyVAL.colTuple = ListArg(tmp)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			// this is a positional parameter ($1, etc)
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2133
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2167
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2171
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2175
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2183
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2187
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2191
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2203
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2207
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2211
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2215
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2219
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2223
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2227
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2239
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2247
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2265
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2269
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2295
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2309
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2321
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2325
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2329
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 449:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2333
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2337
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 451:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2341
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 452:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 453:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2435
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.str = BooleanModeStr
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2443
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2447
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.str = QueryExpansionStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2457
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2461
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2467
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2479
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2483
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2501
		{
			yyVAL.convertType = &ConvertType{Type: "boolean"}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2509
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2513
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].convertType.Type + "[]"}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = nil
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = string("")
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2553
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2557
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2563
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = nil
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2582
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2586
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = &NullVal{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2626
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2644
		{
			yyVAL.exprs = nil
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2662
		{
			yyVAL.orderBy = nil
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2666
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2672
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2676
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = AscScr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.str = AscScr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.str = DescScr
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2700
		{
			yyVAL.limit = nil
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2708
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2712
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2717
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2721
		{
			yyVAL.str = ForUpdateStr
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2725
		{
			yyVAL.str = ShareModeStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2738
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2742
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2746
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2751
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2755
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2759
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2770
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2774
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2778
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2783
		{
			yyVAL.updateExprs = nil
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2787
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2797
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2803
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2807
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2813
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2829
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2833
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2839
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2859
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2870
		{
			yyVAL.bytes = []byte("charset")
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &Default{}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2894
		{
			yyVAL.byt = 0
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.byt = 1
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2899
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2904
		{
			yyVAL.str = ""
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.str = IgnoreStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2924
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2928
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2931
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2933
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2935
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2939
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2944
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2951
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2957
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2961
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2968
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2985
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3210
		{
			decNesting(yylex)
		}
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3215
		{
			forceEOF(yylex)
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3220
		{
			forceEOF(yylex)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			forceEOF(yylex)
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
