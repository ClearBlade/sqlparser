// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func init() {
	yyErrorVerbose = true
}

//line sql.y:57
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	onConflict        *OnConflict
	conflictTarget    *ConflictTarget
	conflictAction    *ConflictAction
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CONFLICT = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const TYPECAST = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const JSON_SUBOBJECT_OP = 57438
const JSON_UNQUOTE_SUBOBJECT_OP = 57439
const JSON_TXT_STR_EXISTS_OP = 57440
const JSON_ANY_KEYS_EXIST_OP = 57441
const JSON_ALL_KEYS_EXIST_OP = 57442
const JSON_LEFT_CONTAINS_RIGHT_OP = 57443
const JSON_RIGHT_CONTAINS_LEFT_OP = 57444
const FUNCTION_ARG_ASSIGNMENT = 57445
const CREATE = 57446
const ALTER = 57447
const DROP = 57448
const RENAME = 57449
const ANALYZE = 57450
const ADD = 57451
const SCHEMA = 57452
const TABLE = 57453
const INDEX = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const UNIQUE = 57459
const PRIMARY = 57460
const COLUMN = 57461
const CONSTRAINT = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const FOREIGN = 57465
const KEY_BLOCK_SIZE = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const BEGIN = 57486
const START = 57487
const TRANSACTION = 57488
const COMMIT = 57489
const ROLLBACK = 57490
const BIT = 57491
const TINYINT = 57492
const SMALLINT = 57493
const MEDIUMINT = 57494
const INT = 57495
const INTEGER = 57496
const BIGINT = 57497
const INTNUM = 57498
const REAL = 57499
const DOUBLE = 57500
const FLOAT_TYPE = 57501
const DECIMAL = 57502
const NUMERIC = 57503
const TIME = 57504
const TIMESTAMP = 57505
const DATETIME = 57506
const YEAR = 57507
const CHAR = 57508
const VARCHAR = 57509
const BOOL = 57510
const CHARACTER = 57511
const VARBINARY = 57512
const NCHAR = 57513
const TEXT = 57514
const TINYTEXT = 57515
const MEDIUMTEXT = 57516
const LONGTEXT = 57517
const BLOB = 57518
const TINYBLOB = 57519
const MEDIUMBLOB = 57520
const LONGBLOB = 57521
const JSON = 57522
const ENUM = 57523
const GEOMETRY = 57524
const POINT = 57525
const LINESTRING = 57526
const POLYGON = 57527
const GEOMETRYCOLLECTION = 57528
const MULTIPOINT = 57529
const MULTILINESTRING = 57530
const MULTIPOLYGON = 57531
const ARRAY = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const DATABASES = 57539
const TABLES = 57540
const VITESS_KEYSPACES = 57541
const VITESS_SHARDS = 57542
const VITESS_TABLETS = 57543
const VSCHEMA_TABLES = 57544
const EXTENDED = 57545
const FULL = 57546
const PROCESSLIST = 57547
const NAMES = 57548
const CHARSET = 57549
const GLOBAL = 57550
const SESSION = 57551
const ISOLATION = 57552
const LEVEL = 57553
const READ = 57554
const WRITE = 57555
const ONLY = 57556
const REPEATABLE = 57557
const COMMITTED = 57558
const UNCOMMITTED = 57559
const SERIALIZABLE = 57560
const CURRENT_TIMESTAMP = 57561
const DATABASE = 57562
const CURRENT_DATE = 57563
const CURRENT_TIME = 57564
const LOCALTIME = 57565
const LOCALTIMESTAMP = 57566
const UTC_DATE = 57567
const UTC_TIME = 57568
const UTC_TIMESTAMP = 57569
const REPLACE = 57570
const CONVERT = 57571
const CAST = 57572
const SUBSTR = 57573
const SUBSTRING = 57574
const GROUP_CONCAT = 57575
const SEPARATOR = 57576
const MATCH = 57577
const AGAINST = 57578
const BOOLEAN = 57579
const LANGUAGE = 57580
const WITH = 57581
const QUERY = 57582
const EXPANSION = 57583
const UNUSED = 57584

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONFLICT",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"TYPECAST",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"FUNCTION_ARG_ASSIGNMENT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	159, 264,
	160, 264,
	-2, 254,
	-1, 240,
	110, 602,
	-2, 598,
	-1, 241,
	110, 603,
	-2, 599,
	-1, 311,
	80, 762,
	-2, 59,
	-1, 312,
	80, 723,
	-2, 60,
	-1, 317,
	80, 707,
	-2, 564,
	-1, 319,
	80, 744,
	-2, 566,
	-1, 590,
	53, 42,
	55, 42,
	-2, 44,
	-1, 723,
	110, 605,
	-2, 601,
	-1, 948,
	5, 29,
	-2, 405,
	-1, 973,
	5, 28,
	-2, 534,
	-1, 1185,
	5, 29,
	-2, 535,
	-1, 1229,
	5, 28,
	-2, 537,
	-1, 1296,
	5, 29,
	-2, 538,
}

const yyPrivate = 57344

const yyLast = 11182

var yyAct = [...]int16{
	271, 48, 836, 661, 536, 976, 800, 1098, 1284, 818,
	1126, 884, 1240, 1099, 840, 1179, 270, 1034, 864, 1191,
	219, 1095, 839, 584, 992, 582, 316, 214, 765, 801,
	1037, 936, 245, 773, 54, 1025, 850, 600, 981, 789,
	770, 858, 725, 874, 48, 878, 460, 238, 414, 48,
	797, 466, 599, 310, 297, 444, 571, 224, 586, 472,
	228, 305, 759, 302, 764, 307, 459, 1079, 939, 243,
	931, 53, 1318, 215, 216, 217, 1306, 916, 1316, 1291,
	1314, 885, 480, 1305, 1090, 1177, 418, 439, 296, 1249,
	1120, 1132, 1133, 1134, 232, 1121, 1122, 775, 1137, 1135,
	1290, 551, 298, 832, 833, 831, 772, 182, 178, 179,
	180, 454, 601, 3, 602, 2, 1264, 498, 497, 507,
	508, 500, 501, 502, 503, 504, 505, 506, 499, 1016,
	1000, 514, 857, 999, 1203, 513, 1001, 509, 510, 511,
	512, 58, 690, 865, 427, 942, 515, 941, 211, 691,
	450, 451, 1315, 1313, 1285, 1058, 51, 798, 441, 212,
	443, 728, 218, 176, 458, 730, 428, 60, 61, 62,
	63, 64, 1241, 241, 421, 669, 819, 821, 175, 660,
	176, 991, 990, 989, 1243, 440, 442, 416, 424, 190,
	177, 1271, 1188, 1066, 956, 445, 445, 445, 445, 928,
	445, 1247, 1055, 697, 901, 77, 484, 445, 1057, 187,
	434, 837, 187, 930, 48, 694, 852, 181, 479, 900,
	852, 978, 1276, 499, 1151, 48, 514, 979, 852, 477,
	513, 603, 509, 510, 511, 512, 187, 187, 77, 1092,
	524, 515, 187, 526, 77, 479, 905, 790, 1010, 963,
	790, 447, 448, 449, 899, 452, 415, 468, 820, 1014,
	1242, 854, 456, 911, 1233, 664, 855, 438, 1136, 1141,
	534, 939, 538, 526, 540, 541, 542, 543, 544, 545,
	546, 547, 1265, 550, 552, 552, 552, 552, 552, 552,
	552, 552, 560, 561, 562, 563, 527, 528, 529, 530,
	531, 532, 533, 583, 1164, 1289, 1248, 1246, 1056, 729,
	1054, 896, 893, 894, 1293, 892, 851, 474, 1142, 513,
	851, 509, 510, 511, 512, 430, 431, 432, 851, 457,
	515, 1062, 196, 849, 847, 478, 477, 848, 469, 514,
	903, 906, 912, 513, 734, 509, 510, 511, 512, 187,
	420, 187, 479, 1279, 515, 953, 206, 187, 732, 733,
	731, 952, 696, 951, 187, 1298, 591, 470, 77, 77,
	77, 77, 174, 77, 597, 898, 478, 477, 478, 477,
	77, 1209, 1208, 1094, 1029, 535, 553, 554, 555, 556,
	557, 558, 559, 479, 766, 479, 767, 1299, 897, 695,
	700, 701, 478, 477, 1277, 191, 1028, 1061, 77, 925,
	926, 927, 1017, 1223, 478, 477, 535, 1206, 445, 479,
	193, 1159, 1026, 422, 423, 1274, 445, 199, 195, 1302,
	459, 479, 1233, 1282, 295, 902, 1129, 445, 445, 445,
	445, 445, 445, 445, 445, 478, 477, 1128, 904, 1233,
	459, 445, 445, 1011, 197, 1233, 1234, 201, 715, 717,
	718, 678, 479, 716, 573, 576, 577, 578, 574, 187,
	575, 579, 1002, 659, 982, 983, 187, 187, 187, 459,
	611, 668, 77, 1200, 1199, 192, 1117, 459, 77, 702,
	1187, 459, 679, 680, 681, 682, 683, 684, 685, 686,
	1148, 1147, 1144, 1145, 726, 887, 687, 688, 769, 726,
	726, 723, 676, 194, 675, 202, 203, 204, 205, 209,
	1144, 1143, 946, 459, 208, 207, 674, 48, 568, 459,
	22, 704, 775, 459, 724, 738, 739, 735, 736, 538,
	24, 665, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 737, 721, 768, 719, 971, 446, 663, 972, 302,
	302, 302, 302, 302, 658, 610, 609, 782, 785, 436,
	429, 415, 1253, 791, 583, 1252, 822, 223, 51, 1096,
	55, 77, 977, 302, 1138, 594, 567, 187, 187, 77,
	802, 187, 794, 977, 187, 1045, 775, 787, 187, 1183,
	77, 77, 77, 77, 77, 77, 77, 77, 826, 825,
	568, 593, 978, 803, 77, 77, 806, 1069, 568, 187,
	946, 313, 1150, 1043, 703, 1146, 815, 595, 1003, 593,
	535, 824, 866, 867, 868, 77, 823, 778, 779, 187,
	828, 829, 777, 786, 24, 77, 830, 946, 24, 844,
	860, 861, 862, 863, 445, 568, 445, 793, 596, 795,
	796, 946, 804, 805, 445, 807, 871, 872, 873, 1045,
	260, 259, 262, 263, 264, 265, 1228, 978, 261, 266,
	958, 955, 698, 225, 51, 234, 1213, 777, 876, 877,
	774, 776, 51, 880, 662, 1044, 51, 1043, 859, 1111,
	1049, 1046, 1039, 1040, 1047, 1042, 1041, 792, 1006, 888,
	879, 890, 875, 929, 723, 982, 983, 1048, 870, 909,
	977, 869, 66, 1051, 957, 954, 882, 1180, 1131, 187,
	1096, 51, 187, 187, 187, 187, 187, 817, 726, 918,
	917, 1030, 985, 672, 187, 455, 710, 187, 812, 810,
	988, 187, 987, 813, 811, 809, 187, 187, 808, 814,
	77, 577, 578, 1311, 932, 229, 230, 1304, 1065, 1044,
	933, 934, 935, 77, 1049, 1046, 1039, 1040, 1047, 1042,
	1041, 913, 473, 1310, 923, 922, 1021, 1013, 974, 975,
	461, 1048, 608, 940, 437, 1281, 471, 1038, 573, 576,
	577, 578, 574, 462, 575, 579, 924, 1280, 1225, 1214,
	1007, 1181, 889, 671, 581, 473, 302, 1224, 962, 220,
	994, 1258, 996, 921, 187, 226, 227, 77, 55, 77,
	221, 920, 1257, 187, 1216, 986, 187, 77, 978, 475,
	1268, 995, 1204, 693, 1004, 57, 59, 592, 52, 1,
	886, 1033, 895, 1283, 1239, 1125, 269, 1020, 997, 1022,
	1023, 1024, 846, 838, 413, 313, 65, 1275, 945, 1018,
	1019, 845, 1245, 1202, 445, 1008, 1009, 502, 503, 504,
	505, 506, 499, 853, 960, 514, 1015, 856, 75, 513,
	1130, 509, 510, 511, 512, 1278, 1027, 1012, 615, 445,
	515, 973, 613, 614, 612, 617, 463, 467, 616, 1036,
	198, 308, 580, 604, 1050, 881, 476, 67, 1053, 1052,
	891, 315, 1060, 485, 943, 944, 1074, 419, 689, 1032,
	910, 453, 948, 949, 950, 200, 523, 919, 998, 314,
	1266, 959, 1292, 1103, 699, 465, 965, 1256, 966, 967,
	968, 969, 1215, 961, 1059, 1075, 548, 537, 788, 246,
	1072, 714, 258, 1101, 255, 48, 257, 549, 1097, 256,
	1081, 1083, 705, 723, 970, 1077, 1078, 486, 244, 1100,
	1113, 1114, 1115, 1073, 236, 1091, 77, 300, 564, 187,
	1105, 1119, 1085, 1086, 802, 1088, 1089, 1107, 572, 570,
	802, 1106, 569, 77, 1082, 984, 1084, 980, 299, 1068,
	1124, 1139, 1140, 1176, 1263, 709, 1123, 26, 56, 1118,
	500, 501, 502, 503, 504, 505, 506, 499, 231, 19,
	514, 18, 17, 20, 513, 21, 509, 510, 511, 512,
	16, 722, 15, 14, 30, 515, 77, 77, 13, 77,
	12, 315, 315, 315, 315, 1152, 315, 11, 10, 9,
	302, 8, 7, 315, 1161, 6, 5, 4, 1154, 222,
	23, 1157, 77, 247, 0, 187, 187, 0, 1102, 0,
	0, 1175, 0, 187, 0, 1162, 0, 0, 0, 0,
	0, 482, 77, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 1182,
	0, 0, 0, 0, 1165, 0, 0, 1190, 0, 0,
	0, 0, 0, 1193, 1194, 1195, 0, 0, 1004, 1198,
	1196, 0, 0, 0, 0, 0, 301, 0, 77, 77,
	445, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 1205, 313, 1207, 0, 1212, 0, 1211, 1201,
	0, 0, 0, 712, 713, 315, 841, 77, 0, 77,
	77, 605, 0, 0, 1101, 0, 0, 1230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1227, 1226, 0,
	1100, 0, 0, 0, 187, 1210, 1238, 0, 1250, 0,
	1251, 1244, 77, 0, 0, 1255, 0, 0, 1217, 1218,
	0, 1219, 1220, 1221, 0, 77, 187, 0, 0, 1101,
	0, 48, 77, 1254, 537, 0, 1269, 1163, 780, 781,
	77, 0, 0, 187, 1267, 1100, 0, 1166, 1167, 1168,
	1169, 0, 1273, 1172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 722, 0, 1184, 1185, 1186, 0,
	1189, 0, 0, 1294, 0, 1295, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 77, 1300, 77, 77, 77,
	187, 77, 315, 0, 0, 0, 1307, 77, 0, 835,
	1229, 802, 0, 315, 315, 315, 315, 315, 315, 315,
	315, 1309, 1308, 1312, 0, 0, 1317, 315, 315, 0,
	0, 0, 0, 77, 77, 77, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 0,
	0, 1222, 0, 0, 1270, 0, 0, 0, 482, 0,
	0, 315, 0, 0, 0, 0, 539, 0, 1235, 1236,
	1237, 77, 77, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 303, 0, 0,
	0, 0, 1259, 1260, 1261, 1262, 301, 77, 0, 0,
	0, 914, 915, 0, 467, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 464, 0, 841, 77, 0, 0,
	0, 783, 783, 184, 0, 0, 0, 783, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1288, 0,
	0, 0, 0, 0, 783, 1296, 0, 0, 0, 0,
	185, 306, 0, 210, 0, 77, 417, 0, 1301, 0,
	0, 0, 1035, 0, 0, 0, 0, 0, 0, 77,
	0, 0, 0, 315, 0, 235, 0, 185, 185, 0,
	0, 947, 0, 185, 0, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 1321, 1322, 964, 24, 25, 49,
	27, 28, 0, 0, 0, 1071, 497, 507, 508, 500,
	501, 502, 503, 504, 505, 506, 499, 44, 0, 514,
	0, 0, 29, 513, 0, 509, 510, 511, 512, 0,
	0, 0, 0, 1087, 515, 0, 0, 0, 0, 0,
	315, 38, 315, 0, 0, 51, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 425, 0, 426, 0, 0, 0, 0,
	0, 433, 0, 0, 315, 0, 0, 0, 435, 0,
	841, 727, 841, 0, 0, 0, 727, 727, 0, 0,
	185, 0, 185, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 31, 32, 34, 33, 36, 0, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 45, 43, 0, 537, 46, 47,
	35, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 40, 0, 41, 42, 0, 0, 0,
	0, 0, 301, 301, 301, 301, 301, 0, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 566, 1108, 1109, 301, 0, 1110, 0,
	0, 1112, 590, 0, 0, 0, 0, 0, 0, 993,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 315, 185, 588, 185,
	0, 0, 0, 0, 0, 0, 0, 1035, 841, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	24, 25, 49, 27, 28, 0, 0, 0, 0, 1031,
	315, 0, 315, 0, 0, 0, 0, 0, 1160, 0,
	44, 0, 0, 0, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 51, 0,
	1178, 0, 0, 0, 0, 315, 0, 537, 0, 0,
	0, 666, 667, 0, 0, 670, 0, 0, 673, 0,
	0, 0, 0, 0, 0, 727, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 185, 185,
	0, 0, 185, 692, 0, 185, 0, 0, 783, 677,
	0, 1104, 993, 0, 783, 0, 0, 0, 0, 0,
	0, 0, 0, 711, 0, 31, 32, 34, 33, 213,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 315, 1127, 0, 0, 37, 45, 43, 0,
	185, 46, 47, 35, 0, 0, 0, 0, 0, 677,
	24, 25, 49, 27, 28, 39, 40, 0, 41, 42,
	0, 0, 0, 0, 0, 1153, 0, 0, 0, 301,
	44, 0, 0, 0, 0, 29, 0, 0, 1155, 0,
	0, 0, 0, 0, 0, 1158, 0, 0, 0, 0,
	0, 0, 0, 315, 38, 0, 0, 0, 51, 235,
	0, 0, 0, 799, 0, 235, 235, 0, 0, 784,
	784, 235, 0, 1286, 537, 784, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 235, 235, 235, 235, 0,
	185, 827, 784, 185, 185, 185, 185, 185, 1192, 50,
	1192, 1192, 1192, 0, 1197, 816, 0, 0, 185, 0,
	315, 0, 588, 0, 0, 0, 0, 185, 185, 0,
	0, 0, 0, 0, 0, 31, 32, 34, 33, 36,
	0, 0, 0, 0, 0, 0, 315, 315, 315, 0,
	0, 0, 0, 0, 0, 0, 37, 45, 43, 0,
	0, 46, 47, 35, 0, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 39, 40, 907, 41, 42,
	908, 0, 0, 0, 1231, 1232, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 1127, 0, 0,
	0, 0, 0, 0, 185, 632, 0, 185, 0, 0,
	1192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1192, 0, 0, 0, 0, 0, 0, 0, 0,
	1272, 0, 677, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	0, 1173, 459, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 783, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 1303, 301, 0, 0, 0, 498, 497, 507,
	508, 500, 501, 502, 503, 504, 505, 506, 499, 0,
	0, 514, 0, 0, 0, 513, 235, 509, 510, 511,
	512, 0, 0, 0, 0, 0, 515, 0, 0, 633,
	0, 0, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	646, 647, 648, 649, 650, 651, 652, 0, 653, 654,
	655, 656, 657, 634, 635, 636, 637, 618, 619, 0,
	185, 621, 761, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 638, 639, 640, 641, 642, 643, 644,
	645, 632, 0, 0, 0, 762, 763, 498, 497, 507,
	508, 500, 501, 502, 503, 504, 505, 506, 499, 0,
	0, 514, 0, 0, 0, 513, 0, 509, 510, 511,
	512, 0, 0, 0, 0, 0, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1067, 760, 1170,
	459, 0, 507, 508, 500, 501, 502, 503, 504, 505,
	506, 499, 937, 0, 514, 0, 1063, 1064, 513, 0,
	509, 510, 511, 512, 185, 0, 620, 0, 0, 515,
	0, 0, 0, 0, 235, 498, 497, 507, 508, 500,
	501, 502, 503, 504, 505, 506, 499, 0, 0, 514,
	0, 235, 0, 513, 0, 509, 510, 511, 512, 0,
	0, 677, 0, 0, 515, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 784, 0, 0, 0,
	0, 0, 784, 0, 0, 0, 646, 647, 648, 649,
	650, 651, 652, 0, 653, 654, 655, 656, 657, 634,
	635, 636, 637, 618, 619, 0, 0, 621, 1149, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 638,
	639, 640, 641, 642, 643, 644, 645, 0, 0, 0,
	1156, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 488, 0, 496, 0, 0, 0, 0, 0,
	516, 517, 518, 519, 520, 521, 522, 185, 489, 490,
	487, 498, 497, 507, 508, 500, 501, 502, 503, 504,
	505, 506, 499, 0, 185, 514, 0, 0, 0, 513,
	0, 509, 510, 511, 512, 491, 492, 493, 494, 495,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 392, 0, 364, 404,
	342, 356, 412, 357, 358, 385, 328, 372, 126, 354,
	0, 588, 345, 323, 351, 324, 343, 366, 94, 369,
	341, 394, 375, 108, 410, 110, 380, 0, 143, 119,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 76, 0, 842,
	843, 0, 0, 0, 0, 87, 0, 382, 401, 353,
	384, 321, 381, 0, 326, 329, 411, 399, 348, 349,
	1005, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 347, 388, 0, 320, 391, 397, 362,
	188, 400, 360, 359, 403, 132, 0, 0, 146, 99,
	98, 107, 395, 344, 352, 90, 350, 138, 128, 158,
	377, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 784, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 340, 398, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 78, 0, 109, 170, 134, 96, 161,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 126, 354, 0, 0, 345, 323, 351,
	324, 343, 366, 94, 369, 341, 394, 375, 108, 410,
	110, 380, 0, 143, 119, 0, 0, 368, 396, 370,
	390, 363, 386, 333, 379, 405, 355, 383, 406, 0,
	0, 0, 76, 0, 842, 843, 0, 0, 0, 0,
	87, 0, 382, 401, 353, 384, 321, 381, 0, 326,
	329, 411, 399, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 367, 371, 387, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 378, 0, 0, 0,
	330, 327, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 347, 388,
	0, 320, 391, 397, 362, 188, 400, 360, 359, 403,
	132, 0, 0, 146, 99, 98, 107, 395, 344, 352,
	90, 350, 138, 128, 158, 377, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 322, 0, 325, 0, 144, 160, 173, 340,
	398, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 336, 339, 334, 335, 373, 374, 407, 408, 409,
	389, 331, 0, 337, 338, 0, 393, 376, 78, 0,
	109, 170, 134, 96, 161, 402, 392, 0, 364, 404,
	342, 356, 412, 357, 358, 385, 328, 372, 126, 354,
	0, 0, 345, 323, 351, 324, 343, 366, 94, 369,
	341, 394, 375, 108, 410, 110, 380, 0, 143, 119,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 51, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 382, 401, 353,
	384, 321, 381, 0, 326, 329, 411, 399, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 347, 388, 0, 320, 391, 397, 362,
	188, 400, 360, 359, 403, 132, 0, 0, 146, 99,
	98, 107, 395, 344, 352, 90, 350, 138, 128, 158,
	377, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 340, 398, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 78, 0, 109, 170, 134, 96, 161,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 126, 354, 0, 0, 345, 323, 351,
	324, 343, 366, 94, 369, 341, 394, 375, 108, 410,
	110, 380, 0, 143, 119, 0, 0, 368, 396, 370,
	390, 363, 386, 333, 379, 405, 355, 383, 406, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 382, 401, 353, 384, 321, 381, 0, 326,
	329, 411, 399, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 367, 371, 387, 361, 0, 0, 0, 0,
	0, 0, 1070, 0, 346, 0, 378, 0, 0, 0,
	330, 327, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 347, 388,
	0, 320, 391, 397, 362, 188, 400, 360, 359, 403,
	132, 0, 0, 146, 99, 98, 107, 395, 344, 352,
	90, 350, 138, 128, 158, 377, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 322, 0, 325, 0, 144, 160, 173, 340,
	398, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 336, 339, 334, 335, 373, 374, 407, 408, 409,
	389, 331, 0, 337, 338, 0, 393, 376, 78, 0,
	109, 170, 134, 96, 161, 402, 392, 0, 364, 404,
	342, 356, 412, 357, 358, 385, 328, 372, 126, 354,
	0, 0, 345, 323, 351, 324, 343, 366, 94, 369,
	341, 394, 375, 108, 410, 110, 380, 0, 143, 119,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 382, 401, 353,
	384, 321, 381, 0, 326, 329, 411, 399, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 720, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 347, 388, 0, 320, 391, 397, 362,
	188, 400, 360, 359, 403, 132, 0, 0, 146, 99,
	98, 107, 395, 344, 352, 90, 350, 138, 128, 158,
	377, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 340, 398, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 78, 0, 109, 170, 134, 96, 161,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 126, 354, 0, 0, 345, 323, 351,
	324, 343, 366, 94, 369, 341, 394, 375, 108, 410,
	110, 380, 0, 143, 119, 0, 0, 368, 396, 370,
	390, 363, 386, 333, 379, 405, 355, 383, 406, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 382, 401, 353, 384, 321, 381, 0, 326,
	329, 411, 399, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 367, 371, 387, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 378, 0, 0, 0,
	330, 327, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 347, 388,
	0, 320, 391, 397, 362, 188, 400, 360, 359, 403,
	132, 0, 0, 146, 99, 98, 107, 395, 344, 352,
	90, 350, 138, 128, 158, 377, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 322, 0, 325, 0, 144, 160, 173, 340,
	398, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 336, 339, 334, 335, 373, 374, 407, 408, 409,
	389, 331, 0, 337, 338, 0, 393, 376, 78, 0,
	109, 170, 134, 96, 161, 402, 392, 0, 364, 404,
	342, 356, 412, 357, 358, 385, 328, 372, 126, 354,
	0, 0, 345, 323, 351, 324, 343, 366, 94, 369,
	341, 394, 375, 108, 410, 110, 380, 0, 143, 119,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 382, 401, 353,
	384, 321, 381, 0, 326, 329, 411, 399, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 347, 388, 0, 320, 391, 397, 362,
	188, 400, 360, 359, 403, 132, 0, 0, 146, 99,
	98, 107, 395, 344, 352, 90, 350, 138, 128, 158,
	377, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 340, 398, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 78, 0, 109, 170, 134, 96, 161,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 126, 354, 0, 0, 345, 323, 351,
	324, 343, 366, 94, 369, 341, 394, 375, 108, 410,
	110, 380, 0, 143, 119, 0, 0, 368, 396, 370,
	390, 363, 386, 333, 379, 405, 355, 383, 406, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 382, 401, 353, 384, 321, 381, 0, 326,
	329, 411, 399, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 367, 371, 387, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 378, 0, 0, 0,
	330, 327, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 347, 388,
	0, 320, 391, 397, 362, 188, 400, 360, 359, 403,
	132, 0, 0, 146, 99, 98, 107, 395, 344, 352,
	90, 350, 138, 128, 158, 377, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 318, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 322, 0, 325, 0, 144, 160, 173, 340,
	398, 166, 167, 168, 169, 0, 0, 0, 319, 317,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 336, 339, 334, 335, 373, 374, 407, 408, 409,
	389, 331, 0, 337, 338, 0, 393, 376, 78, 0,
	109, 170, 134, 96, 161, 402, 392, 0, 364, 404,
	342, 356, 412, 357, 358, 385, 328, 372, 126, 354,
	0, 0, 345, 323, 351, 324, 343, 366, 94, 369,
	341, 394, 375, 108, 410, 110, 380, 0, 143, 119,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 186, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 382, 401, 353,
	384, 321, 381, 0, 326, 329, 411, 399, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 347, 388, 0, 320, 391, 397, 362,
	188, 400, 360, 359, 403, 132, 0, 0, 146, 99,
	98, 107, 395, 344, 352, 90, 350, 138, 128, 158,
	377, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 340, 398, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 78, 0, 109, 170, 134, 96, 161,
	402, 392, 0, 364, 404, 342, 356, 412, 357, 358,
	385, 328, 372, 126, 354, 0, 0, 345, 323, 351,
	324, 343, 366, 94, 369, 341, 394, 375, 108, 410,
	110, 380, 0, 143, 119, 0, 0, 368, 396, 370,
	390, 363, 386, 333, 379, 405, 355, 383, 406, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 382, 401, 353, 384, 321, 381, 0, 326,
	329, 411, 399, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 367, 371, 387, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 378, 0, 0, 0,
	330, 327, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 0, 347, 388,
	0, 320, 391, 397, 362, 188, 400, 360, 359, 403,
	132, 0, 0, 146, 99, 98, 107, 395, 344, 352,
	90, 350, 138, 128, 158, 377, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 598, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 318, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 322, 0, 325, 0, 144, 160, 173, 340,
	398, 166, 167, 168, 169, 0, 0, 0, 319, 317,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 336, 339, 334, 335, 373, 374, 407, 408, 409,
	389, 331, 0, 337, 338, 0, 393, 376, 78, 0,
	109, 170, 134, 96, 161, 402, 392, 0, 364, 404,
	342, 356, 412, 357, 358, 385, 328, 372, 126, 354,
	0, 0, 345, 323, 351, 324, 343, 366, 94, 369,
	341, 394, 375, 108, 410, 110, 380, 0, 143, 119,
	0, 0, 368, 396, 370, 390, 363, 386, 333, 379,
	405, 355, 383, 406, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 382, 401, 353,
	384, 321, 381, 0, 326, 329, 411, 399, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 367, 371, 387,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 378, 0, 0, 0, 330, 327, 0, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 347, 388, 0, 320, 391, 397, 362,
	188, 400, 360, 359, 403, 132, 0, 0, 146, 99,
	98, 107, 395, 344, 352, 90, 350, 138, 128, 158,
	377, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 309, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 318, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 340, 398, 166, 167, 168, 169,
	0, 0, 0, 319, 317, 312, 311, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 336, 339, 334, 335,
	373, 374, 407, 408, 409, 389, 331, 0, 337, 338,
	0, 393, 376, 78, 0, 109, 170, 134, 96, 161,
	126, 0, 0, 0, 771, 0, 242, 0, 0, 0,
	94, 0, 239, 0, 0, 108, 282, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 240,
	260, 259, 262, 263, 264, 265, 0, 87, 261, 266,
	267, 268, 0, 0, 237, 253, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 233,
	0, 0, 0, 293, 0, 252, 0, 0, 248, 249,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 291, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 272,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 283, 292,
	289, 290, 287, 288, 286, 285, 284, 294, 275, 276,
	277, 278, 280, 0, 279, 78, 126, 109, 170, 134,
	96, 161, 242, 0, 0, 0, 94, 0, 239, 0,
	0, 108, 282, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 273, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 459, 240, 260, 259, 262, 263,
	264, 265, 0, 87, 261, 266, 267, 268, 0, 0,
	237, 253, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 0, 0, 0, 0, 293,
	0, 252, 0, 0, 248, 249, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 291, 0, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 0, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 272, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 283, 292, 289, 290, 287, 288,
	286, 285, 284, 294, 275, 276, 277, 278, 280, 0,
	279, 78, 126, 109, 170, 134, 96, 161, 242, 0,
	0, 0, 94, 0, 239, 0, 0, 108, 282, 110,
	0, 0, 143, 119, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 240, 260, 259, 262, 263, 264, 265, 0, 87,
	261, 266, 267, 268, 0, 0, 237, 253, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 233, 0, 0, 0, 293, 0, 252, 0, 0,
	248, 249, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 291, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 272, 0, 0, 0, 144, 160, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	275, 276, 277, 278, 280, 0, 279, 78, 126, 109,
	170, 134, 96, 161, 242, 0, 0, 0, 94, 0,
	239, 0, 0, 108, 282, 110, 0, 0, 143, 119,
	0, 0, 0, 0, 273, 274, 0, 0, 0, 0,
	0, 0, 834, 0, 51, 0, 0, 240, 260, 259,
	262, 263, 264, 265, 0, 87, 261, 266, 267, 268,
	0, 0, 237, 253, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 0, 0, 0,
	0, 293, 0, 252, 0, 0, 248, 249, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 291, 0, 132, 0, 0, 146, 99,
	98, 107, 0, 0, 0, 90, 0, 138, 128, 158,
	0, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 272, 0, 0,
	0, 144, 160, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 283, 292, 289, 290,
	287, 288, 286, 285, 284, 294, 275, 276, 277, 278,
	280, 24, 279, 78, 0, 109, 170, 134, 96, 161,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 242,
	0, 0, 0, 94, 0, 239, 0, 0, 108, 282,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 273,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 240, 260, 259, 262, 263, 264, 265, 0,
	87, 261, 266, 267, 268, 0, 0, 237, 253, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 251, 0, 0, 0, 0, 293, 0, 252, 0,
	0, 248, 249, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 291, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 272, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 283, 292, 289, 290, 287, 288, 286, 285, 284,
	294, 275, 276, 277, 278, 280, 0, 279, 78, 126,
	109, 170, 134, 96, 161, 242, 0, 0, 0, 94,
	0, 239, 0, 0, 108, 282, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 273, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 240, 260,
	259, 262, 263, 264, 265, 0, 87, 261, 266, 267,
	268, 0, 0, 237, 253, 0, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 251, 0, 0,
	0, 0, 293, 0, 252, 0, 0, 248, 249, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 291, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 272, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 275, 276, 277,
	278, 280, 126, 279, 78, 0, 109, 170, 134, 96,
	161, 0, 94, 0, 0, 0, 0, 108, 282, 110,
	0, 0, 143, 119, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 240, 260, 259, 262, 263, 264, 265, 0, 87,
	261, 266, 267, 268, 0, 0, 0, 253, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 0, 0, 0, 0, 293, 0, 252, 0, 0,
	248, 249, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 291, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 1320, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 272, 0, 0, 0, 144, 160, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	283, 292, 289, 290, 287, 288, 286, 285, 284, 294,
	275, 276, 277, 278, 280, 126, 279, 78, 0, 109,
	170, 134, 96, 161, 0, 94, 0, 0, 0, 0,
	108, 282, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 273, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 240, 260, 259, 262, 263, 264,
	265, 0, 87, 261, 266, 267, 268, 0, 0, 0,
	253, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 251, 0, 0, 0, 0, 293, 0,
	252, 0, 0, 248, 249, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	291, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 272, 0, 0, 1174, 144, 160,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 283, 292, 289, 290, 287, 288, 286,
	285, 284, 294, 275, 276, 277, 278, 280, 0, 279,
	78, 0, 109, 170, 134, 96, 161, 126, 0, 0,
	0, 0, 481, 0, 0, 0, 0, 94, 0, 1171,
	0, 0, 108, 0, 110, 0, 459, 143, 119, 498,
	497, 507, 508, 500, 501, 502, 503, 504, 505, 506,
	499, 0, 0, 514, 0, 0, 76, 513, 483, 509,
	510, 511, 512, 0, 87, 0, 0, 0, 515, 478,
	477, 498, 497, 507, 508, 500, 501, 502, 503, 504,
	505, 506, 499, 0, 0, 514, 479, 0, 0, 513,
	0, 509, 510, 511, 512, 0, 0, 0, 0, 0,
	515, 498, 497, 507, 508, 500, 501, 502, 503, 504,
	505, 506, 499, 0, 0, 514, 0, 0, 0, 513,
	0, 509, 510, 511, 512, 0, 0, 0, 0, 188,
	515, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 0,
	144, 160, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 1076, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 0, 0, 0, 108, 0, 110, 0, 0, 143,
	119, 498, 497, 507, 508, 500, 501, 502, 503, 504,
	505, 506, 499, 938, 0, 514, 0, 0, 76, 513,
	0, 509, 510, 511, 512, 0, 87, 0, 0, 0,
	515, 69, 0, 498, 497, 507, 508, 500, 501, 502,
	503, 504, 505, 506, 499, 0, 0, 514, 0, 0,
	0, 513, 0, 509, 510, 511, 512, 0, 0, 0,
	0, 0, 515, 498, 497, 507, 508, 500, 501, 502,
	503, 504, 505, 506, 499, 0, 0, 514, 0, 0,
	0, 513, 0, 509, 510, 511, 512, 0, 72, 73,
	0, 68, 515, 0, 0, 74, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 70, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 109, 170, 134, 96,
	161, 126, 0, 0, 0, 0, 587, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 589, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 78, 0, 109, 170,
	134, 96, 161, 94, 0, 0, 0, 0, 108, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 78, 0,
	109, 170, 134, 96, 161, 94, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 186, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 0, 144, 160,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	78, 0, 109, 170, 134, 96, 161, 94, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 707,
	0, 0, 708, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 0,
	144, 160, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 607, 0, 0, 108, 0, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	606, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 109, 170, 134, 96,
	161, 126, 0, 0, 0, 0, 587, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 589, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 585, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 78, 0, 109, 170,
	134, 96, 161, 94, 0, 0, 0, 0, 108, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 78, 0,
	109, 170, 134, 96, 161, 94, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 589, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 0, 144, 160,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	78, 0, 109, 170, 134, 96, 161, 94, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 483, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 0,
	144, 160, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 78, 0, 109, 170, 134, 96, 161, 565,
	94, 0, 0, 0, 0, 108, 0, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 78, 0, 109, 170, 134,
	96, 161, 94, 0, 0, 0, 0, 108, 0, 110,
	0, 0, 143, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 0, 0, 0, 144, 160, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 78, 0, 109,
	170, 134, 96, 161, 94, 0, 0, 0, 0, 108,
	0, 110, 0, 0, 143, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 188, 0, 0, 0,
	0, 132, 0, 0, 146, 99, 98, 107, 0, 0,
	0, 90, 0, 138, 128, 158, 0, 129, 137, 111,
	150, 133, 157, 189, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 0, 0, 0, 0, 144, 160, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 78,
	0, 109, 170, 134, 96, 161, 94, 0, 0, 0,
	0, 108, 0, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 0, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 0, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 78, 0, 109, 170, 134, 96, 161, 94, 0,
	0, 0, 0, 108, 0, 110, 0, 0, 143, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 132, 0, 0, 146, 99,
	98, 107, 0, 0, 0, 90, 0, 138, 128, 158,
	0, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 0, 0, 0,
	0, 144, 160, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 78, 0, 109, 170, 134, 96, 161,
	94, 0, 0, 0, 0, 108, 0, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 0, 109, 170, 134,
	96, 161,
}

var yyPact = [...]int16{
	1884, -1000, -189, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 823, 850, -1000, -1000, -1000, -1000, -1000, -1000,
	678, 7421, 48, 62, -20, 10226, 61, 299, 10922, -1000,
	-15, -1000, -1000, 1734, -1000, -1000, -1000, -1000, 648, -1000,
	-1000, -1000, -1000, -1000, 812, 824, 687, 814, 735, -1000,
	5764, 31, 9065, 9994, 5050, -1000, 524, 58, 10922, -159,
	10458, 41, 41, 41, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 60, 10922, -1000, 10922, 33, 523,
	33, 33, 33, 10922, -1000, 100, -1000, -1000, -1000, -1000,
	10922, 522, 773, 30, 3010, 3010, 3010, 3010, -9, 3010,
	-110, 703, -1000, -1000, -1000, -1000, 3010, -1000, -1000, -1000,
	-1000, -1000, -1000, 1481, -1000, -1000, -1000, -1000, 423, 781,
	6481, 6481, 823, -1000, 648, -1000, -1000, -1000, 770, -1000,
	-1000, 253, 838, -1000, 7189, 96, -1000, 6481, 2370, 640,
	-1000, -1000, 640, -1000, -1000, -1000, -1000, -1000, 6947, 6947,
	6947, 6947, 6947, 6947, 6947, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 640,
	-1000, 6245, 640, 640, 640, 640, 640, 640, 640, 640,
	640, 6481, 640, 640, 640, 640, 640, 640, 640, 640,
	640, 640, 640, 640, 640, 9762, 565, 766, -1000, -1000,
	-1000, 801, 8127, 8833, 10922, 584, -1000, 613, 4795, -115,
	-1000, -1000, -1000, 151, 8591, -1000, -1000, -1000, 771, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 520, -1000, 2220, 517, 3010, 49, 651,
	510, 193, 484, 10922, 10922, 3010, 44, 10922, 799, 701,
	10922, 469, 457, -1000, 4540, -1000, 3010, 3010, 3010, 3010,
	3010, 3010, 3010, 3010, -1000, -1000, -1000, -1000, -1000, -1000,
	3010, 3010, -1000, -73, -1000, 10922, -1000, -1000, -1000, -1000,
	-1000, 844, 125, 344, 93, 637, -1000, 375, 812, 423,
	735, 8359, 713, -1000, -1000, 10922, -1000, 6481, 6481, 391,
	-1000, 9529, -1000, -1000, 3520, 131, 6947, 102, 270, 6947,
	6947, 622, 102, 102, 6947, 6947, 6947, 6947, 6947, 6947,
	6947, 6947, 6947, 6947, 6947, 6947, 6947, 6947, 6947, 6947,
	6947, 6947, 6947, 2044, 337, 6947, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 451, -1000, 648, 234, 234, 234,
	234, 234, 234, 210, 5292, 423, 477, 265, 6245, -1000,
	5764, 5764, 6481, 6481, 10690, 10690, 5764, 803, 174, 265,
	10690, -1000, 423, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5764, 5764, 5764, 5764, 6, 10922, -1000, 10690, 9065, 9065,
	9065, 9065, 9065, -1000, 726, 723, -1000, 717, 716, 727,
	10922, -1000, 473, 8127, 126, 640, -1000, 9297, -1000, -1000,
	6, 566, 9065, 10922, -1000, -1000, 4285, 613, -115, 601,
	-1000, -123, -127, 6000, 106, -1000, -1000, -1000, -1000, 2755,
	199, 194, -80, -1000, -1000, -1000, 654, -1000, 654, 654,
	654, 654, -43, -43, -43, -43, -1000, -1000, -1000, -1000,
	-1000, 677, 674, -1000, 654, 654, 654, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 668, 668, 668, 666, 666, 683, -1000,
	10922, -175, 448, 3010, 798, 3010, -1000, 189, -1000, 10922,
	-1000, -1000, 10922, 3010, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 252,
	-1000, -1000, -1000, -1000, 753, 6481, 6481, 4030, 6481, -1000,
	-1000, -1000, 781, -1000, 803, 822, -1000, 761, 760, 5764,
	-1000, -1000, 131, 158, -1000, -1000, 342, -1000, -1000, -1000,
	-1000, 89, 640, -1000, 7432, -1000, -1000, -1000, 104, -191,
	-1000, 102, 6947, 6947, 6947, 2166, 7432, -1000, -1000, -1000,
	7432, 7432, 7402, 2209, 1404, 234, 790, 790, 121, 121,
	121, 121, 121, 935, 935, 7432, 7432, 7432, 7432, -193,
	-1000, 654, -24, -26, -1000, -1000, -1000, -1000, 7432, 423,
	423, 5764, 602, -1000, -1000, 6481, -1000, 423, 467, 467,
	308, 332, 680, -1000, 84, 679, 467, 5764, 171, -1000,
	6481, 423, -1000, 467, 423, 467, 467, 534, 640, -1000,
	675, -1000, 147, 766, 673, 700, 422, -1000, -1000, -1000,
	-1000, 720, -1000, 718, -1000, -1000, -1000, -1000, -1000, 54,
	53, 52, 10458, -1000, 836, 9065, 610, -1000, -1000, 601,
	-115, -99, -1000, -1000, -1000, 265, -1000, 415, 583, 2500,
	-1000, -1000, -1000, -1000, -1000, -1000, 664, 791, 187, 191,
	396, -1000, -1000, 767, -1000, 192, -84, -1000, -1000, 352,
	-43, -43, -1000, -1000, 106, 765, 106, 106, 106, 363,
	363, -1000, -1000, -1000, -1000, 346, -1000, -1000, -1000, 324,
	-1000, 699, 10458, 3010, -1000, 3775, -1000, -1000, -1000, -1000,
	-1000, -1000, 650, 576, 179, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4, -1000, 3010, -1000,
	319, 10922, 10922, 739, 265, 265, 83, -1000, -1000, 10922,
	-1000, -1000, -1000, -1000, 616, -1000, -1000, -1000, 3265, 5764,
	2044, 6481, -1000, 2166, 7432, 7370, -1000, 6947, 6947, -195,
	-1000, -1000, -1000, -1000, -1000, 467, 5764, 265, -1000, -1000,
	-1000, 2044, 337, 2044, 6947, 6947, 4030, 6947, 6947, -169,
	575, 160, -1000, 6481, 306, -1000, -1000, -1000, -1000, -1000,
	688, 10690, 640, -1000, 7895, 10458, 823, 10690, 6481, 6481,
	-1000, -1000, 6481, 655, -1000, 6481, -1000, -1000, -1000, 640,
	640, 640, 431, -1000, 823, 610, -1000, -1000, -1000, -139,
	-138, -1000, -1000, 2755, -1000, 2755, 10458, -1000, 390, 379,
	-1000, -1000, 686, 32, -1000, -1000, -1000, 538, 106, 106,
	-1000, 212, -1000, -1000, -1000, 465, -1000, 447, 580, 445,
	10922, -1000, -1000, 577, -1000, 144, -1000, -1000, 10458, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10458, 10922, -1000, -1000, -1000, -1000, -1000, 10458, -1000,
	-1000, 362, 6481, -1000, -1000, -1000, 3775, -1000, 836, 9065,
	-1000, -1000, 423, -193, 42, -1000, 6947, 7432, 7432, -1000,
	-1000, -1000, 10, 423, 10, 2244, 7200, -1000, 2066, 7138,
	640, -166, -1000, 265, 6481, 685, 793, 537, 554, -1000,
	-1000, 5528, 423, 435, 82, 431, 812, -1000, 265, 265,
	265, 10458, 265, 10458, 10458, 10458, 7663, 10458, 812, -1000,
	-1000, -1000, -1000, 2500, -1000, 428, -1000, 654, -1000, -1000,
	-75, 843, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -43, 358, -43, 322, -1000, 321, 3010,
	3775, 2755, -1000, 642, -1000, -1000, -1000, -1000, 792, -1000,
	265, 831, 573, -1000, -1000, 7432, -1000, -1000, -1000, -1000,
	6947, 6947, -1000, 6947, 6947, 6947, 423, 354, 265, -1000,
	807, 789, 685, 640, -1000, -1000, 652, 10458, 10458, -1000,
	-1000, 400, -1000, 394, 394, 394, 126, -1000, -1000, 119,
	10458, -1000, 172, -1000, -147, 106, -1000, 106, 529, 526,
	-1000, -1000, -1000, 10458, 640, 828, 815, 7170, 7170, 7170,
	7170, 26, -1000, -1000, 10458, 841, -1000, -1000, 640, -1000,
	648, 81, -1000, 10458, -1000, -1000, -1000, -1000, -1000, 119,
	-1000, 368, 142, 345, -1000, 288, 788, -1000, 776, -1000,
	-1000, -1000, -1000, -1000, 377, 3, -1000, 6481, 6481, -1000,
	-1000, -1000, -1000, 423, 51, -178, -1000, 209, 10690, 554,
	423, 10458, -1000, -1000, -1000, 305, -1000, -1000, -1000, 338,
	-1000, -1000, 651, 374, -1000, 10458, 265, 551, -1000, 738,
	-172, -182, -1000, 106, -1000, 548, -1000, -1000, -1000, -1000,
	-175, -1000, 3, 759, -1000, 734, -1000, 836, -1000, -1000,
	0, -176, -1000, -2, -179, 640, -186, 6714, -1000, 7170,
	423, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 115, 113, 530, 1080, 1079, 1077, 1076, 1075, 1072,
	1071, 1069, 1068, 1067, 1060, 1058, 1054, 1053, 1052, 1050,
	1045, 1043, 1042, 1041, 1039, 141, 1038, 1028, 1027, 59,
	1025, 60, 1024, 1023, 31, 106, 40, 33, 695, 1019,
	25, 54, 102, 1018, 38, 1017, 1015, 61, 1012, 56,
	1009, 1008, 1377, 998, 997, 9, 5, 994, 988, 987,
	984, 69, 47, 982, 979, 976, 974, 972, 971, 42,
	4, 7, 16, 13, 969, 1083, 32, 968, 39, 966,
	963, 962, 957, 34, 955, 51, 954, 20, 46, 953,
	19, 50, 24, 21, 15, 952, 950, 6, 65, 52,
	949, 29, 53, 37, 948, 947, 372, 946, 945, 941,
	940, 938, 932, 144, 350, 930, 929, 928, 927, 26,
	173, 866, 566, 82, 926, 925, 923, 1404, 77, 58,
	23, 922, 27, 55, 28, 921, 920, 62, 64, 918,
	915, 914, 913, 912, 908, 41, 907, 905, 900, 18,
	2, 897, 896, 43, 45, 893, 883, 882, 35, 48,
	881, 36, 877, 876, 874, 873, 22, 14, 872, 10,
	865, 12, 864, 863, 8, 862, 17, 861, 11, 860,
	3, 30, 859, 858, 0, 164, 857, 856, 101,
}

var yyR1 = [...]uint8{
	0, 182, 183, 183, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 28, 28, 8, 9, 9, 9,
	186, 186, 47, 47, 91, 91, 10, 10, 10, 10,
	99, 99, 103, 103, 103, 104, 104, 104, 104, 135,
	135, 11, 11, 11, 11, 11, 11, 11, 180, 180,
	179, 178, 178, 177, 177, 176, 16, 163, 164, 164,
	164, 159, 138, 138, 138, 138, 141, 141, 139, 139,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	142, 142, 142, 142, 142, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	144, 144, 144, 144, 144, 144, 144, 144, 158, 158,
	145, 145, 153, 153, 154, 154, 154, 151, 151, 152,
	152, 155, 155, 155, 146, 146, 146, 146, 146, 146,
	146, 148, 148, 156, 156, 149, 149, 149, 150, 150,
	157, 157, 157, 157, 157, 147, 147, 160, 160, 172,
	172, 171, 171, 171, 162, 162, 168, 168, 168, 168,
	168, 161, 161, 170, 170, 169, 165, 165, 165, 166,
	166, 166, 167, 167, 167, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 175, 173, 173, 174, 174,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 111, 111, 108, 108, 109, 109, 110, 110,
	110, 112, 112, 112, 136, 136, 136, 19, 19, 22,
	22, 23, 24, 21, 21, 20, 20, 20, 20, 187,
	25, 26, 26, 27, 27, 27, 31, 31, 31, 29,
	29, 30, 30, 36, 36, 35, 35, 37, 37, 37,
	37, 124, 124, 124, 123, 123, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 54, 54, 90, 90, 92,
	92, 43, 43, 43, 43, 44, 44, 45, 45, 46,
	46, 131, 131, 130, 130, 130, 129, 129, 48, 48,
	48, 50, 49, 49, 49, 49, 51, 51, 53, 53,
	52, 52, 55, 55, 55, 55, 56, 56, 38, 38,
	38, 38, 38, 38, 38, 107, 107, 58, 58, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 68, 68, 68, 68, 68, 68,
	59, 59, 59, 59, 59, 59, 59, 34, 34, 69,
	69, 69, 69, 69, 69, 75, 70, 70, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 66, 66, 66, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	188, 188, 67, 67, 67, 67, 32, 32, 32, 32,
	32, 134, 134, 137, 137, 137, 137, 137, 137, 137,
	137, 79, 79, 33, 33, 77, 77, 78, 80, 80,
	76, 76, 76, 61, 61, 61, 61, 61, 61, 61,
	61, 63, 63, 63, 81, 81, 82, 82, 83, 83,
	84, 84, 85, 86, 86, 86, 87, 87, 87, 87,
	88, 88, 88, 60, 60, 60, 60, 60, 60, 89,
	89, 89, 89, 93, 93, 94, 94, 96, 96, 95,
	71, 71, 73, 73, 72, 74, 97, 97, 101, 98,
	98, 102, 102, 102, 100, 100, 100, 126, 126, 126,
	105, 105, 113, 113, 114, 114, 106, 106, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	116, 117, 117, 118, 118, 118, 125, 125, 121, 121,
	122, 122, 127, 127, 128, 128, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 184, 185, 132,
	133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 8, 9, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 8, 4, 6, 5, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 1, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 2, 2, 2, 2,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 3, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 3, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 3, 3, 3, 3,
	3, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 3, 4, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 4, 5, 6, 2, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 1, 2, 1, 2, 1, 2, 3,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 0, 4, 4, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -182, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -22, -23, -24,
	-21, -20, -3, -4, 6, 7, -28, 9, 10, 31,
	-16, 121, 122, 124, 123, 149, 125, 142, 50, 161,
	162, 164, 165, 144, 26, 143, 147, 148, -184, 8,
	245, 54, -183, 260, -83, 15, -27, 5, -25, -187,
	-25, -25, -25, -25, -25, -163, 54, -118, 130, 70,
	157, 237, 127, 128, 134, -121, 57, -120, 253, 161,
	172, 166, 193, 185, 183, 186, 224, 65, 164, 233,
	145, 181, 177, 175, 28, 198, 258, 176, 140, 139,
	199, 203, 225, 170, 171, 227, 197, 141, 33, 255,
	35, 153, 228, 201, 196, 192, 195, 169, 191, 39,
	205, 204, 206, 223, 188, 178, 18, 231, 148, 151,
	200, 202, 135, 155, 257, 229, 174, 152, 147, 232,
	165, 226, 235, 38, 211, 168, 138, 162, 159, 189,
	154, 179, 180, 194, 167, 190, 163, 156, 149, 234,
	212, 259, 187, 184, 160, 158, 216, 217, 218, 219,
	256, 230, 182, 213, -106, 130, 132, 128, 128, 129,
	130, 237, 127, 128, -52, -127, 57, -120, 130, 157,
	128, 106, 186, 121, 214, 129, 33, 155, -136, 128,
	-108, 158, 216, 217, 218, 219, 57, 226, 225, 220,
	-127, 163, -1, 125, -132, -132, -132, -132, -2, -87,
	17, 16, -5, -3, -184, 6, 21, 22, -31, 40,
	41, -26, -37, 97, -38, -127, -57, 72, -62, 30,
	57, -120, 24, -61, -58, -76, -74, -75, 106, 107,
	95, 96, 103, 73, 108, -66, -64, -65, -67, 59,
	58, 66, 60, 61, 62, 63, 67, 68, 69, -121,
	-72, -184, 207, 44, 45, 246, 247, 248, 249, 252,
	250, 75, 34, 236, 244, 243, 242, 240, 241, 238,
	239, 133, 237, 101, 245, -106, -40, -41, -42, -43,
	-54, -75, -184, -52, 11, -47, -52, -98, -135, 163,
	-102, 226, 225, -122, -100, -121, -119, 224, 186, 223,
	126, 71, 207, 23, 25, 209, 74, 106, 16, 75,
	105, 246, 121, 48, 238, 239, 236, 248, 249, 237,
	214, 30, 10, 26, 143, 22, 99, 123, 78, 79,
	146, 24, 144, 69, 19, 51, 11, 13, 14, 133,
	132, 90, 129, 46, 8, 108, 27, 87, 42, 29,
	44, 88, 17, 240, 241, 32, 252, 150, 101, 49,
	36, 72, 67, 52, 70, 15, 47, 89, 124, 245,
	45, 127, 6, 251, 31, 142, 43, 128, 215, 77,
	131, 68, 5, 134, 9, 50, 53, 242, 243, 244,
	34, 76, 12, -164, -159, 57, 129, -52, 245, -121,
	-114, 133, -114, -114, 128, -52, -52, -113, 133, 57,
	-113, -113, -113, -52, 110, -52, 57, 31, 237, 57,
	155, 128, 156, 130, -133, -184, -122, -133, -133, -133,
	159, 160, -133, -109, 221, 52, -133, -1, -185, 56,
	-88, 19, 32, -38, -127, -84, -85, -38, -83, -2,
	-25, 36, -29, 22, 64, 11, -124, 71, 70, 87,
	-123, 23, -121, 59, 110, -38, -59, 90, 72, 88,
	89, 115, 116, 117, 118, 119, 74, 92, 91, 102,
	95, 96, 97, 98, 99, 100, 101, 93, 94, 111,
	112, 113, 114, 109, 105, 120, 80, 81, 82, 83,
	84, 85, 86, -107, -184, -75, -184, -62, -62, -62,
	-62, -62, -62, -62, -184, -2, -70, -38, -184, -75,
	-184, -184, -184, -184, -184, -184, -184, -184, -79, -38,
	-184, -188, -184, -188, -188, -188, -188, -188, -188, -188,
	-184, -184, -184, -184, -53, 27, -52, 31, 55, -48,
	-50, -49, -51, 42, 46, 48, 43, 44, 45, 49,
	-131, 23, -40, -184, -130, 151, -129, 23, -127, 59,
	-52, -47, -186, 55, 11, 53, 55, -98, 163, -99,
	-103, 227, 229, 80, -126, -121, 59, 30, 31, 56,
	55, -138, -141, -143, -142, -144, -139, -140, 183, 184,
	106, 187, 189, 190, 191, 192, 193, 194, 195, 196,
	197, 198, 31, 145, 179, 180, 181, 182, 199, 200,
	201, 202, 203, 204, 205, 206, 166, 167, 168, 169,
	170, 171, 172, 174, 175, 176, 177, 178, 57, -133,
	130, -180, 53, 57, 72, 57, -52, -52, -133, 131,
	-52, 24, 52, -52, 57, 57, -128, -127, -119, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -111,
	215, 222, -52, 9, 90, 55, 18, 110, 55, -86,
	25, 26, -87, -185, -31, -63, -121, 60, 63, -30,
	43, -52, -38, -38, -68, 67, 72, 68, 69, -123,
	97, -128, -122, -119, -62, -69, -72, -75, 59, 207,
	63, 90, 88, 89, 74, -62, -62, -61, -69, -69,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -137,
	254, 188, 211, 212, -138, -134, 57, 59, -62, 57,
	-36, 22, -35, -37, -185, 55, -185, -2, -35, -35,
	-38, -38, -76, -121, -127, -76, -35, -29, -77, -78,
	76, -76, -185, -35, -36, -35, -35, -91, 151, -52,
	-97, -101, -76, -41, -42, -42, -41, -42, 42, 42,
	42, 47, 42, 47, 42, -49, -127, -185, -55, 50,
	132, 51, -184, -129, -91, 53, -40, -52, -102, -99,
	55, 228, 230, 231, 52, -38, -150, 105, -165, -166,
	-167, -122, 59, 60, -159, -160, -168, 135, 138, 134,
	-161, 129, 29, -155, 67, 72, -151, 212, -145, 54,
	-145, -145, -145, -145, -149, 186, -149, -149, -149, 54,
	54, -145, -145, -145, -153, 54, -153, -153, -154, 54,
	-154, -125, 53, -52, -178, 256, -179, 57, -133, 24,
	-133, -115, 126, 123, 124, -175, 122, 209, 186, 65,
	30, 15, 246, 151, 259, 57, 152, -52, -52, -133,
	-110, 11, 90, 38, -38, -38, -128, -85, -88, -105,
	19, 11, 34, 34, -35, 67, 68, 69, 110, -184,
	109, 261, -69, -62, -62, -62, -34, 146, 71, 261,
	-145, 171, 171, -185, -185, -35, 55, -38, -185, -185,
	-185, 55, 53, 23, 55, 11, 110, 55, 11, -185,
	-35, -80, -78, 78, -38, -185, -185, -185, -185, -185,
	-60, 31, 34, -2, -184, -184, -56, 55, 12, 80,
	-45, -44, 52, 53, -46, 52, -44, 42, 42, 129,
	129, 129, -92, -121, -56, -40, -56, -103, -104, 232,
	229, 235, 57, 55, -167, 80, 54, 29, -161, -161,
	57, 57, -146, 30, 67, -152, 213, 60, -149, -149,
	-150, 31, -150, -150, -150, -158, 59, -158, 60, 60,
	52, -121, -133, -177, -176, -122, -132, -181, 157, 136,
	137, 140, 139, 57, 129, 29, 135, 138, 151, 134,
	-181, 157, -116, -117, 131, 23, 129, 29, 151, -133,
	-112, 88, 12, -127, -127, 39, 110, -52, -39, 11,
	97, -122, -36, -137, -70, -34, 71, -62, -62, 262,
	-185, -37, -137, -134, -137, -62, -62, -122, -62, -62,
	253, -83, 79, -38, 77, -93, 52, -97, -71, -73,
	-72, -184, -2, -89, -121, -92, -83, -101, -38, -38,
	-38, 54, -38, -184, -184, -184, -185, 55, -83, -56,
	229, 233, 234, -166, -167, -170, -169, -121, 57, 57,
	-148, 52, 59, 60, 61, 67, 236, 66, 56, -150,
	-150, 57, 106, 56, 55, 56, 55, 56, 55, -52,
	55, 80, -132, -121, -132, -121, -52, -132, -121, 59,
	-38, -56, -40, -185, 262, -62, -185, -185, -185, -185,
	55, 19, -185, 55, 19, -184, -33, 251, -38, -94,
	52, 28, -93, 55, -185, -185, -185, 55, 110, -185,
	-87, -90, -121, -90, -90, -90, -130, -121, -87, 56,
	55, -145, -156, 209, 9, -149, 59, -149, 60, 60,
	-133, -176, -167, 54, 27, -81, 13, -62, -62, -62,
	-62, -62, -185, 59, 20, 29, -94, -73, 34, -2,
	-184, -121, -121, 55, 56, -185, -185, -185, -55, -172,
	-171, 53, 141, 65, -169, -157, 135, 29, 134, 236,
	-150, -150, 56, 56, -90, -184, -82, 14, 16, -185,
	-185, -185, -185, -32, 90, 256, -96, -90, 9, -71,
	-2, 110, -121, -171, 57, -162, 80, 59, -147, 65,
	29, 29, 56, -173, -174, 151, -38, -70, -185, 254,
	49, 257, -95, 105, -56, -97, -185, -121, 60, 59,
	-180, -185, 55, -121, 39, 255, 258, -150, -178, -174,
	34, 39, -56, 153, 256, 154, 257, -184, 258, -62,
	150, -185, -185,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 518, 0, 279, 279, 279, 279, 279, 279,
	0, 593, 576, 0, 0, 0, 0, -2, 268, 269,
	0, 271, 272, 0, 799, 799, 799, 799, 0, 34,
	35, 797, 1, 3, 526, 0, 0, 283, 286, 281,
	0, 576, 0, 0, 0, 61, 0, 0, 786, 0,
	787, 574, 574, 574, 594, 595, 598, 599, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 0, 0, 577, 0, 572, 0,
	572, 572, 572, 0, 227, 350, 602, 603, 786, 787,
	0, 0, 0, 0, 800, 800, 800, 800, 0, 800,
	256, 245, 247, 248, 249, 250, 800, 265, 266, 255,
	267, 270, 273, 0, 275, 276, 277, 278, 28, 530,
	0, 0, 518, 30, 0, 279, 284, 285, 289, 287,
	288, 280, 0, 297, 301, 0, 358, 0, 363, 365,
	-2, -2, 0, 408, 409, 410, 411, 412, 0, 0,
	0, 0, 0, 0, 0, 439, 440, 441, 442, 503,
	504, 505, 506, 507, 508, 509, 510, 367, 368, 500,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 470, 470, 470, 470, 470, 470, 470,
	470, 0, 0, 0, 0, 0, 0, 308, 310, 311,
	312, 331, 0, 333, 0, 0, 42, 46, 0, 777,
	559, -2, -2, 0, 0, 600, 601, -2, 706, -2,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 0, 78, 0, 0, 800, 0, 68,
	0, 0, 0, 0, 0, 800, 0, 0, 0, 0,
	0, 0, 0, 226, 0, 228, 800, 800, 800, 800,
	800, 800, 800, 800, 237, 801, 802, 238, 239, 240,
	800, 800, 242, 0, 257, 0, 251, 274, 29, 798,
	23, 0, 0, 527, 0, 519, 520, 523, 526, 28,
	286, 0, 291, 290, 282, 0, 298, 0, 0, 0,
	302, 0, 304, 305, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 390, 391, 392, 393,
	394, 395, 396, 364, 0, 383, 0, 432, 433, 434,
	435, 436, 437, 438, 293, 28, 0, 406, 0, 446,
	0, 0, 0, 0, 0, 0, 0, 289, 0, 492,
	0, 462, 0, 463, 464, 465, 466, 467, 468, 469,
	0, 293, 0, 0, 44, 0, 349, 0, 0, 0,
	0, 0, 0, 338, 0, 0, 341, 0, 0, 0,
	0, 332, 0, 0, 352, 750, 334, 0, 336, 337,
	-2, 0, 0, 0, 40, 41, 0, 47, 777, 49,
	50, 0, 0, 0, 158, 567, 568, 569, 565, 186,
	0, 141, 137, 83, 84, 85, 130, 87, 130, 130,
	130, 130, 155, 155, 155, 155, 113, 114, 115, 116,
	117, 0, 0, 100, 130, 130, 130, 104, 120, 121,
	122, 123, 124, 125, 126, 127, 88, 89, 90, 91,
	92, 93, 94, 132, 132, 132, 134, 134, 596, 63,
	0, 71, 0, 800, 0, 800, 76, 0, 202, 0,
	221, 573, 0, 800, 224, 225, 351, 604, 605, 229,
	230, 231, 232, 233, 234, 235, 236, 241, 244, 258,
	252, 253, 246, 531, 0, 0, 0, 0, 0, 522,
	524, 525, 530, 31, 289, 0, 511, 0, 0, 0,
	292, 26, 359, 360, 362, 384, 0, 386, 388, 303,
	299, 0, 501, -2, 369, 370, 399, 400, 403, 0,
	404, 0, 0, 0, 0, 397, 374, 376, 377, 378,
	379, 380, 0, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	483, 130, 485, 487, 490, 430, 481, 482, 431, 0,
	0, 0, 294, 295, 405, 0, 554, 28, 0, 0,
	0, 0, 0, 500, 0, 0, 0, 0, 498, 495,
	0, 0, 471, 0, 0, 0, 0, 0, 0, 348,
	356, 556, 0, 309, 327, 329, 0, 324, 339, 340,
	342, 0, 344, 0, 346, 347, 313, 314, 315, 0,
	0, 0, 0, 335, 356, 0, 356, 43, 560, 48,
	0, 0, 53, 54, 561, 562, 563, 0, 77, 187,
	189, 192, 193, 194, 79, 80, 0, 0, 0, 0,
	0, 181, 182, 144, 142, 0, 139, 138, 86, 0,
	155, 155, 107, 108, 158, 0, 158, 158, 158, 0,
	0, 101, 102, 103, 95, 0, 96, 97, 98, 0,
	99, 0, 0, 800, 65, 0, 69, 70, 66, 575,
	67, 799, 0, 0, 588, 203, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 0, 220, 800, 223,
	261, 0, 0, 0, 528, 529, 0, 521, 24, 0,
	570, 571, 512, 513, 306, 385, 387, 389, 0, 293,
	0, 0, 371, 397, 375, 0, 372, 0, 0, 0,
	484, 486, 488, 366, 443, 0, 0, 407, -2, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	518, 0, 496, 0, 0, 461, 472, 473, 474, 475,
	543, 0, 0, -2, 0, 0, 518, 0, 0, 0,
	321, 328, 0, 0, 322, 0, 323, 343, 345, 0,
	0, 0, 0, 319, 518, 356, 39, 51, 52, 0,
	0, 58, 159, 0, 190, 0, 0, 176, 0, 0,
	179, 180, 151, 0, 143, 82, 140, 0, 158, 158,
	109, 0, 110, 111, 112, 0, 128, 0, 0, 0,
	0, 597, 64, 72, 73, 0, 195, 799, 0, 204,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	799, 0, 0, 799, 589, 590, 591, 592, 0, 222,
	243, 0, 0, 259, 260, 532, 0, 25, 356, 0,
	300, 502, 0, 401, 0, 373, 0, 398, 381, 489,
	444, 296, 0, 0, 0, 0, 0, 501, 0, 0,
	0, 493, 460, 499, 0, 545, 0, 543, 533, 550,
	552, 0, 28, 0, 539, 0, 526, 557, 357, 558,
	325, 0, 330, 0, 0, 0, 333, 0, 526, 38,
	55, 56, 57, 188, 191, 0, 183, 130, 177, 178,
	153, 0, 145, 146, 147, 148, 149, 150, 131, 105,
	106, 156, 157, 155, 0, 155, 0, 135, 0, 800,
	0, 0, 196, 0, 197, 199, 200, 201, 0, 262,
	263, 514, 307, 445, 402, 382, 449, 451, 450, 452,
	0, 0, 455, 0, 0, 0, 0, 0, 497, 32,
	0, 0, 545, 0, 553, -2, 0, 0, 0, 45,
	36, 0, 317, 0, 0, 0, 352, 320, 37, 168,
	0, 185, 160, 154, 0, 158, 129, 158, 0, 0,
	62, 74, 75, 0, 0, 516, 0, 0, 0, 0,
	0, 476, 459, 494, 0, 0, 33, 551, 0, -2,
	0, 541, 540, 0, 326, 353, 354, 355, 316, 167,
	169, 0, 174, 0, 184, 165, 0, 162, 164, 152,
	118, 119, 133, 136, 0, 0, 27, 0, 0, 453,
	454, 456, 457, 0, 0, 0, 549, 356, 0, 536,
	28, 0, 318, 170, 171, 0, 175, 173, 81, 0,
	161, 163, 68, 0, 216, 0, 517, 515, 458, 0,
	0, 0, 546, 158, 548, 544, -2, 542, 172, 166,
	71, 215, 0, 0, 477, 0, 480, 356, 198, 217,
	0, 478, 547, 0, 0, 0, 0, 0, 479, 0,
	0, 218, 219,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	54, 56, 97, 95, 55, 96, 110, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 260,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 261, 3, 262, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:322
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:327
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:328
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:356
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:364
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:374
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:381
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:401
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:408
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.OnConflict = yyDollar[8].onConflict
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:421
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs), OnConflict: yyDollar[9].onConflict}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:433
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:437
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:443
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:449
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:457
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:462
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:467
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:471
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:476
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:480
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:486
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:490
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:494
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:504
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:508
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:514
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:546
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:550
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:556
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:561
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:582
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:586
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:591
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:595
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:606
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:641
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:648
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:653
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:657
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:663
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:674
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:685
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:887
		{
			yyVAL.optVal = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:891
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:896
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:900
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:908
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:912
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:918
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:926
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:930
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:935
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:945
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:958
		{
			yyVAL.optVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:962
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:966
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:974
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:978
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:982
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:987
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1009
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1013
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.colKeyOpt = colKey
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1048
		{
			yyVAL.optVal = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1058
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1062
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1082
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1093
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1097
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1115
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.str = yyDollar[1].str
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1194
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1198
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1202
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1206
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1219
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1229
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1234
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1239
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1243
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1262
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1278
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1282
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1288
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1294
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1302
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1307
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1325
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1334
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1353
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1397
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1415
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1419
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1457
		{
			yyVAL.str = ""
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.str = "extended "
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1467
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = "full "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1477
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1481
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1485
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1491
		{
			yyVAL.showFilter = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1499
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1505
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1509
		{
			yyVAL.str = SessionStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1513
		{
			yyVAL.str = GlobalStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Begin{}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Begin{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Commit{}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1545
		{
			yyVAL.statement = &Rollback{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[2].statement}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[3].statement, Analyze: true}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &OtherRead{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1578
		{
			setAllowComments(yylex, true)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1582
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1588
		{
			yyVAL.bytes2 = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1592
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = UnionStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.str = UnionAllStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1606
		{
			yyVAL.str = UnionDistinctStr
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1611
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1615
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = SQLCacheStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = DistinctStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = StraightJoinHint
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1642
		{
			yyVAL.selectExprs = nil
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1656
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1670
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1674
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1679
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1687
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.tableExprs = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1727
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1737
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1741
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1747
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1751
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1774
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1778
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1782
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1786
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1792
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1794
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1798
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1804
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1809
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1814
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1822
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = JoinStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1839
		{
			yyVAL.str = JoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = StraightJoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = LeftJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1859
		{
			yyVAL.str = LeftJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = RightJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.str = RightJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = NaturalJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1877
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1906
		{
			yyVAL.indexHints = nil
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1910
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1914
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1918
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1923
		{
			yyVAL.expr = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1927
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1937
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1945
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1949
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1963
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1967
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1987
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1991
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1995
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1999
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2003
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2007
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2021
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2025
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2029
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2033
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2037
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2041
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
			yyVAL.str = IsNullStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			yyVAL.str = IsNotNullStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.str = IsTrueStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = IsNotTrueStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = IsFalseStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2067
		{
			yyVAL.str = IsNotFalseStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = EqualStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = LessThanStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = GreaterThanStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = LessEqualStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = GreaterEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = NotEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2102
		{
			yyVAL.expr = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.colTuple = &ConvertExpr{Expr: NewStrVal(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2124
		{
			yyVAL.colTuple = Array(yyDollar[3].exprs)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			// this is an array literal ('{a,b,c}', etc)
			// TODO this is weird and ugly but I need those quotes to be passed through
			tmp := make([]byte, len(yyDollar[1].bytes)+2)
			tmp[0] = '\''
			tmp[len(yyDollar[1].bytes)+1] = '\''
			copy(tmp[1:], yyDollar[1].bytes)
			yyVAL.colTuple = ListArg(tmp)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			// this is a positional parameter ($1, etc)
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2155
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2229
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2233
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2237
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2241
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2253
		{
			yyVAL.expr = &FunctionArgAssignmentExpr{Argument: yyDollar[1].expr, Operator: FuncArgAssignStr, Value: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2257
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2265
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2273
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2295
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2321
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("array"), Exprs: SelectExprs{&AliasedExpr{Expr: yyDollar[2].subquery}}}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 457:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 458:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 459:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = BooleanModeStr
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2477
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.str = QueryExpansionStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.convertType = &ConvertType{Type: "boolean"}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].convertType.Type + "[]"}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = nil
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = string("")
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2549
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2559
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = nil
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2578
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2582
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &NullVal{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2622
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2640
		{
			yyVAL.exprs = nil
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2644
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2658
		{
			yyVAL.orderBy = nil
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2668
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = AscScr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = AscScr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.str = DescScr
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2696
		{
			yyVAL.limit = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2704
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2708
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2713
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.str = ForUpdateStr
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2721
		{
			yyVAL.str = ShareModeStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2734
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2738
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2742
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2747
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2751
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2755
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2766
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2770
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2774
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2779
		{
			yyVAL.updateExprs = nil
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2783
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2788
		{
			yyVAL.onConflict = nil
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2792
		{
			yyVAL.onConflict = &OnConflict{Target: yyDollar[3].conflictTarget, Action: yyDollar[4].conflictAction}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2798
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Cols:    yyDollar[1].columns,
				Collate: yyDollar[3].str,
				Where:   NewWhere(WhereStr, yyDollar[4].expr),
			}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2806
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Cols:    yyDollar[1].columns,
				Collate: "",
				Where:   NewWhere(WhereStr, yyDollar[2].expr),
			}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2815
		{
			yyVAL.conflictAction = &ConflictAction{}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2821
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2825
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2835
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2841
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2861
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2867
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2883
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2887
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2891
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2898
		{
			yyVAL.bytes = []byte("charset")
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &Default{}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2922
		{
			yyVAL.byt = 0
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.byt = 1
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2927
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2932
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.str = IgnoreStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2942
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2956
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2959
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2961
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2963
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2969
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2972
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2976
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2979
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2981
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2985
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2989
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3006
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3013
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3230
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			decNesting(yylex)
		}
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3244
		{
			forceEOF(yylex)
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3249
		{
			forceEOF(yylex)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			forceEOF(yylex)
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
