// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func init() {
	yyErrorVerbose = true
}

//line sql.y:57
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	onConflict        *OnConflict
	conflictTarget    *ConflictTarget
	conflictAction    *ConflictAction
	insertOptions     InsertOptions
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const CONFLICT = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const NOTHING = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const DO = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const INTERVAL = 57436
const TYPECAST = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const JSON_SUBOBJECT_OP = 57440
const JSON_UNQUOTE_SUBOBJECT_OP = 57441
const JSON_TXT_STR_EXISTS_OP = 57442
const JSON_ANY_KEYS_EXIST_OP = 57443
const JSON_ALL_KEYS_EXIST_OP = 57444
const JSON_LEFT_CONTAINS_RIGHT_OP = 57445
const JSON_RIGHT_CONTAINS_LEFT_OP = 57446
const FUNCTION_ARG_ASSIGNMENT = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const UNIQUE = 57461
const PRIMARY = 57462
const COLUMN = 57463
const CONSTRAINT = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const SHOW = 57469
const DESCRIBE = 57470
const EXPLAIN = 57471
const DATE = 57472
const ESCAPE = 57473
const REPAIR = 57474
const OPTIMIZE = 57475
const TRUNCATE = 57476
const MAXVALUE = 57477
const PARTITION = 57478
const REORGANIZE = 57479
const LESS = 57480
const THAN = 57481
const PROCEDURE = 57482
const TRIGGER = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const ARRAY = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const DATABASES = 57541
const TABLES = 57542
const VITESS_KEYSPACES = 57543
const VITESS_SHARDS = 57544
const VITESS_TABLETS = 57545
const VSCHEMA_TABLES = 57546
const EXTENDED = 57547
const FULL = 57548
const PROCESSLIST = 57549
const NAMES = 57550
const CHARSET = 57551
const GLOBAL = 57552
const SESSION = 57553
const ISOLATION = 57554
const LEVEL = 57555
const READ = 57556
const WRITE = 57557
const ONLY = 57558
const REPEATABLE = 57559
const COMMITTED = 57560
const UNCOMMITTED = 57561
const SERIALIZABLE = 57562
const CURRENT_TIMESTAMP = 57563
const DATABASE = 57564
const CURRENT_DATE = 57565
const CURRENT_TIME = 57566
const LOCALTIME = 57567
const LOCALTIMESTAMP = 57568
const UTC_DATE = 57569
const UTC_TIME = 57570
const UTC_TIMESTAMP = 57571
const REPLACE = 57572
const CONVERT = 57573
const CAST = 57574
const SUBSTR = 57575
const SUBSTRING = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const MATCH = 57579
const AGAINST = 57580
const BOOLEAN = 57581
const LANGUAGE = 57582
const WITH = 57583
const QUERY = 57584
const EXPANSION = 57585
const UNUSED = 57586

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"CONFLICT",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NOTHING",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"DO",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"TYPECAST",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"FUNCTION_ARG_ASSIGNMENT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	161, 266,
	162, 266,
	-2, 256,
	-1, 242,
	112, 608,
	-2, 604,
	-1, 243,
	112, 609,
	-2, 605,
	-1, 313,
	82, 770,
	-2, 61,
	-1, 314,
	82, 730,
	-2, 62,
	-1, 319,
	82, 713,
	-2, 570,
	-1, 321,
	82, 751,
	-2, 572,
	-1, 592,
	54, 44,
	57, 44,
	-2, 46,
	-1, 725,
	112, 611,
	-2, 607,
	-1, 950,
	5, 29,
	-2, 407,
	-1, 975,
	5, 28,
	-2, 536,
	-1, 1186,
	5, 29,
	-2, 537,
	-1, 1230,
	5, 28,
	-2, 539,
	-1, 1302,
	5, 29,
	-2, 540,
}

const yyPrivate = 57344

const yyLast = 11603

var yyAct = [...]int16{
	273, 48, 1288, 886, 1241, 802, 663, 978, 1128, 1192,
	838, 538, 1100, 1101, 820, 842, 586, 1036, 1097, 221,
	841, 860, 761, 216, 584, 54, 272, 803, 994, 767,
	938, 318, 775, 852, 1039, 602, 247, 772, 791, 1027,
	983, 727, 880, 866, 48, 462, 876, 468, 312, 48,
	416, 588, 573, 299, 446, 799, 300, 226, 474, 245,
	482, 601, 230, 304, 918, 309, 766, 1081, 307, 217,
	218, 219, 941, 1265, 500, 499, 509, 510, 502, 503,
	504, 505, 506, 507, 508, 501, 933, 298, 516, 53,
	1330, 777, 515, 234, 511, 512, 513, 514, 461, 1312,
	1327, 553, 1295, 517, 1324, 887, 1311, 1294, 1092, 1179,
	420, 184, 180, 181, 182, 1002, 1250, 58, 1001, 441,
	1122, 1003, 1123, 1124, 834, 835, 833, 1134, 1135, 1136,
	692, 774, 3, 456, 1139, 1137, 603, 693, 604, 2,
	1018, 859, 249, 60, 61, 62, 63, 64, 51, 1204,
	867, 429, 944, 730, 213, 1326, 943, 732, 452, 453,
	1323, 1289, 1060, 800, 1299, 430, 1242, 423, 821, 823,
	178, 177, 243, 178, 671, 662, 993, 992, 991, 1244,
	418, 220, 854, 214, 426, 192, 179, 1275, 1189, 1068,
	443, 958, 445, 930, 699, 486, 436, 447, 447, 447,
	447, 1248, 447, 1057, 77, 303, 932, 839, 189, 447,
	1059, 189, 1012, 854, 1047, 696, 48, 442, 444, 1143,
	515, 183, 511, 512, 513, 514, 913, 48, 481, 1280,
	1153, 517, 736, 1064, 981, 189, 189, 77, 1094, 1266,
	854, 189, 526, 77, 1045, 528, 734, 735, 733, 605,
	470, 822, 449, 450, 451, 1243, 454, 792, 516, 965,
	792, 666, 515, 458, 511, 512, 513, 514, 1144, 1016,
	417, 1283, 536, 517, 540, 528, 542, 543, 544, 545,
	546, 547, 548, 549, 853, 552, 554, 554, 554, 554,
	554, 554, 554, 554, 562, 563, 564, 565, 1166, 440,
	476, 731, 698, 941, 1138, 585, 240, 914, 1249, 1247,
	1304, 1063, 1058, 1293, 1056, 853, 1046, 1210, 702, 703,
	1209, 1051, 1048, 1041, 1042, 1049, 1044, 1043, 927, 928,
	929, 1031, 480, 479, 432, 433, 434, 479, 1050, 1096,
	1030, 697, 853, 954, 1053, 472, 953, 851, 849, 481,
	189, 850, 189, 481, 1019, 459, 480, 479, 189, 471,
	422, 480, 479, 480, 479, 189, 480, 479, 955, 77,
	77, 77, 77, 481, 77, 593, 599, 856, 481, 1305,
	481, 77, 857, 481, 768, 1281, 769, 527, 555, 556,
	557, 558, 559, 560, 561, 509, 510, 502, 503, 504,
	505, 506, 507, 508, 501, 1224, 537, 516, 1207, 77,
	176, 515, 1161, 511, 512, 513, 514, 541, 480, 479,
	447, 1028, 517, 1278, 717, 719, 720, 1131, 447, 718,
	1234, 1317, 461, 424, 425, 481, 1130, 537, 1013, 447,
	447, 447, 447, 447, 447, 447, 447, 303, 1004, 501,
	1308, 461, 516, 447, 447, 271, 515, 889, 511, 512,
	513, 514, 771, 448, 1234, 1286, 1254, 517, 680, 677,
	189, 676, 297, 667, 661, 1234, 461, 189, 189, 189,
	1234, 1235, 670, 77, 613, 1201, 1200, 75, 665, 77,
	704, 1119, 461, 681, 682, 683, 684, 685, 686, 687,
	688, 678, 1188, 461, 1150, 1149, 596, 689, 690, 1146,
	1147, 1146, 1145, 948, 461, 1253, 728, 24, 725, 660,
	317, 728, 728, 570, 461, 980, 421, 438, 315, 48,
	777, 461, 612, 611, 1140, 706, 740, 741, 431, 417,
	24, 540, 973, 1098, 721, 55, 974, 979, 980, 597,
	1071, 723, 595, 739, 569, 979, 777, 529, 530, 531,
	532, 533, 534, 535, 960, 1184, 570, 51, 51, 1229,
	979, 304, 304, 304, 304, 304, 957, 1047, 827, 1152,
	570, 595, 1148, 784, 787, 24, 585, 948, 824, 793,
	51, 1214, 77, 570, 1005, 304, 948, 832, 189, 189,
	77, 796, 189, 948, 598, 189, 804, 1045, 789, 189,
	959, 77, 77, 77, 77, 77, 77, 77, 77, 828,
	700, 22, 956, 861, 805, 77, 77, 808, 806, 807,
	189, 809, 729, 227, 817, 51, 1113, 729, 729, 1008,
	881, 825, 862, 863, 864, 865, 77, 830, 826, 236,
	189, 877, 317, 317, 317, 317, 77, 317, 873, 874,
	875, 537, 831, 846, 317, 872, 447, 871, 447, 868,
	869, 870, 66, 779, 780, 781, 447, 1297, 225, 1046,
	788, 984, 985, 51, 1051, 1048, 1041, 1042, 1049, 1044,
	1043, 664, 484, 884, 795, 1133, 797, 798, 1098, 1032,
	987, 1050, 882, 878, 879, 674, 457, 1040, 816, 990,
	579, 580, 712, 303, 303, 303, 303, 303, 779, 814,
	890, 812, 892, 989, 815, 931, 813, 811, 303, 810,
	911, 725, 575, 578, 579, 580, 576, 303, 577, 581,
	189, 231, 232, 189, 189, 189, 189, 189, 919, 1321,
	920, 1310, 1067, 915, 475, 189, 1320, 460, 189, 925,
	728, 924, 189, 1314, 463, 1322, 317, 189, 189, 1023,
	473, 77, 607, 610, 315, 934, 1015, 464, 262, 261,
	264, 265, 266, 267, 77, 942, 263, 268, 1313, 439,
	1285, 1284, 1227, 1009, 1226, 726, 1182, 1215, 737, 738,
	976, 977, 891, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 673, 583, 770, 228, 229, 475, 304, 964,
	222, 923, 1258, 1259, 996, 189, 998, 223, 77, 922,
	77, 55, 1217, 926, 189, 980, 477, 189, 77, 988,
	1272, 1205, 997, 695, 57, 59, 594, 1006, 52, 575,
	578, 579, 580, 576, 1, 577, 581, 888, 999, 984,
	985, 1035, 465, 469, 897, 317, 729, 1022, 1287, 1024,
	1025, 1026, 1240, 317, 1010, 1011, 447, 1127, 848, 487,
	840, 415, 65, 1279, 317, 317, 317, 317, 317, 317,
	317, 317, 847, 1246, 1203, 947, 1020, 1021, 317, 317,
	855, 447, 1029, 1017, 858, 1132, 1282, 1038, 1014, 617,
	615, 962, 616, 539, 614, 619, 618, 200, 310, 708,
	1052, 582, 975, 551, 606, 883, 478, 67, 1055, 484,
	1034, 1054, 317, 893, 1062, 1076, 691, 912, 455, 202,
	724, 525, 921, 1000, 316, 1075, 1268, 1267, 1296, 1225,
	1181, 1105, 701, 467, 1257, 1061, 1077, 1216, 963, 1074,
	303, 550, 790, 248, 716, 1103, 1084, 48, 1086, 1099,
	260, 1083, 257, 259, 1085, 258, 707, 972, 1093, 488,
	725, 246, 1115, 1116, 1117, 238, 302, 77, 566, 574,
	189, 1102, 785, 785, 1108, 1121, 1107, 1109, 785, 572,
	804, 571, 986, 982, 77, 301, 804, 1070, 1178, 1264,
	711, 26, 1120, 1126, 56, 785, 1125, 233, 19, 18,
	17, 1141, 1142, 20, 21, 16, 15, 14, 30, 13,
	12, 935, 936, 937, 11, 10, 9, 8, 7, 6,
	5, 4, 224, 23, 317, 0, 0, 77, 77, 0,
	77, 0, 315, 1154, 0, 0, 0, 317, 0, 0,
	0, 0, 304, 0, 0, 843, 1156, 0, 1163, 1159,
	0, 0, 0, 77, 0, 0, 189, 189, 0, 0,
	0, 0, 0, 1177, 189, 0, 1164, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 1183, 0,
	0, 317, 0, 317, 0, 1194, 1195, 1196, 1191, 714,
	715, 317, 0, 0, 0, 1197, 0, 0, 0, 0,
	1199, 1006, 0, 0, 0, 0, 0, 0, 0, 77,
	77, 1202, 447, 0, 0, 317, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 0, 0, 0, 1213,
	1212, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	77, 77, 0, 0, 0, 1103, 0, 0, 1231, 1206,
	539, 1208, 0, 0, 782, 783, 0, 0, 1228, 0,
	0, 0, 0, 0, 0, 189, 1211, 0, 0, 0,
	1245, 1102, 1239, 77, 303, 0, 1256, 1251, 0, 1252,
	0, 0, 0, 0, 1255, 0, 77, 189, 0, 705,
	1103, 0, 48, 77, 0, 0, 0, 0, 466, 0,
	0, 77, 1273, 0, 189, 1277, 1079, 1080, 0, 0,
	0, 0, 0, 0, 0, 837, 1102, 0, 0, 0,
	0, 0, 0, 1087, 1088, 0, 1090, 1091, 0, 0,
	0, 1291, 0, 0, 187, 0, 0, 212, 1301, 1298,
	995, 1300, 0, 0, 0, 0, 77, 0, 77, 77,
	77, 189, 77, 1306, 0, 776, 778, 317, 77, 237,
	0, 187, 187, 0, 0, 843, 1315, 187, 0, 804,
	1318, 1319, 794, 0, 0, 0, 0, 0, 0, 0,
	1230, 0, 0, 0, 77, 77, 77, 1329, 1325, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	1033, 317, 819, 317, 0, 0, 0, 916, 917, 0,
	469, 1037, 0, 0, 0, 0, 0, 0, 0, 804,
	0, 77, 77, 0, 1274, 0, 317, 504, 505, 506,
	507, 508, 501, 0, 77, 516, 0, 0, 0, 515,
	0, 511, 512, 513, 514, 1167, 317, 77, 0, 0,
	517, 0, 0, 0, 1073, 903, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	902, 0, 0, 0, 317, 0, 187, 0, 187, 0,
	0, 0, 1089, 0, 187, 0, 0, 949, 0, 785,
	0, 187, 1106, 995, 0, 785, 0, 0, 0, 907,
	0, 0, 966, 0, 77, 0, 0, 901, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 317, 77, 317, 1129, 0, 0, 0, 0, 843,
	0, 843, 77, 0, 0, 0, 0, 0, 0, 1218,
	1219, 0, 1220, 1221, 1222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1155, 0, 0, 0,
	0, 0, 0, 0, 898, 895, 896, 0, 894, 1157,
	0, 0, 0, 0, 0, 0, 1160, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 945,
	946, 305, 1073, 905, 908, 0, 187, 950, 951, 952,
	0, 0, 0, 187, 590, 187, 961, 0, 0, 0,
	0, 967, 0, 968, 969, 970, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 900, 1193,
	0, 1193, 1193, 1193, 0, 1198, 0, 0, 0, 198,
	0, 317, 0, 539, 0, 0, 0, 0, 0, 843,
	0, 899, 0, 0, 0, 308, 0, 0, 0, 0,
	419, 0, 0, 0, 0, 208, 0, 317, 317, 317,
	0, 0, 0, 0, 0, 1095, 1037, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	1110, 1111, 0, 0, 1112, 0, 1331, 1114, 0, 0,
	0, 906, 0, 0, 1232, 1233, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 1129, 0, 0,
	0, 0, 0, 0, 187, 187, 0, 0, 187, 195,
	1193, 187, 0, 0, 0, 679, 201, 197, 0, 0,
	0, 0, 1270, 0, 0, 0, 0, 0, 0, 0,
	1276, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 199, 0, 1082, 203, 0, 0, 427,
	0, 428, 0, 0, 1162, 0, 187, 435, 0, 0,
	0, 0, 0, 0, 437, 679, 0, 1193, 785, 0,
	0, 1303, 0, 0, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 1180, 0, 0, 0,
	0, 0, 1118, 539, 0, 1316, 0, 0, 0, 0,
	0, 0, 196, 0, 204, 205, 206, 207, 211, 0,
	0, 0, 0, 210, 209, 237, 0, 0, 785, 0,
	0, 237, 237, 0, 0, 786, 786, 237, 0, 0,
	0, 786, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 237, 237, 237, 237, 0, 187, 0, 786, 187,
	187, 187, 187, 187, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 187, 0, 0, 0, 590, 568,
	0, 0, 1165, 187, 187, 0, 0, 0, 592, 0,
	0, 0, 1168, 1169, 1170, 1171, 0, 0, 1174, 0,
	502, 503, 504, 505, 506, 507, 508, 501, 0, 0,
	516, 1185, 1186, 1187, 515, 1190, 511, 512, 513, 514,
	0, 0, 0, 0, 0, 517, 0, 0, 0, 0,
	24, 25, 49, 27, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 187, 0, 0, 0, 29, 0, 0, 1290, 539,
	187, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 1223, 0, 679, 0,
	24, 25, 49, 27, 28, 0, 0, 0, 0, 0,
	237, 0, 1236, 1237, 1238, 0, 0, 668, 669, 44,
	0, 672, 0, 0, 675, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1260, 1261, 1262, 1263,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 694,
	51, 0, 0, 0, 0, 0, 0, 31, 32, 34,
	33, 36, 0, 0, 192, 0, 0, 0, 0, 713,
	0, 0, 237, 0, 0, 0, 0, 0, 37, 45,
	43, 0, 1292, 46, 47, 35, 0, 0, 237, 0,
	0, 0, 1302, 0, 0, 0, 0, 39, 40, 0,
	41, 42, 0, 0, 0, 1307, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 31, 32, 34,
	33, 215, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 37, 45,
	43, 0, 0, 46, 47, 35, 0, 0, 0, 1333,
	1334, 0, 0, 0, 0, 0, 0, 39, 40, 801,
	41, 42, 500, 499, 509, 510, 502, 503, 504, 505,
	506, 507, 508, 501, 0, 0, 516, 0, 0, 0,
	515, 50, 511, 512, 513, 514, 0, 829, 0, 0,
	0, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 1066, 0, 0, 0, 939, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	237, 0, 0, 1176, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 0, 0, 0, 237, 0, 0,
	0, 0, 0, 0, 885, 0, 0, 679, 0, 0,
	0, 0, 0, 909, 0, 0, 910, 0, 0, 0,
	0, 0, 786, 0, 0, 0, 0, 0, 786, 0,
	0, 0, 0, 128, 0, 0, 0, 483, 0, 0,
	0, 0, 95, 90, 0, 0, 0, 0, 109, 126,
	0, 111, 0, 0, 145, 120, 0, 500, 499, 509,
	510, 502, 503, 504, 505, 506, 507, 508, 501, 1175,
	461, 516, 0, 0, 76, 515, 485, 511, 512, 513,
	514, 187, 87, 0, 0, 0, 517, 480, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 481, 500, 499, 509, 510, 502,
	503, 504, 505, 506, 507, 508, 501, 0, 0, 516,
	187, 0, 0, 515, 0, 511, 512, 513, 514, 0,
	0, 0, 0, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 590, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 0, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 490,
	78, 498, 110, 172, 136, 97, 163, 518, 519, 520,
	521, 522, 523, 524, 0, 491, 492, 489, 500, 499,
	509, 510, 502, 503, 504, 505, 506, 507, 508, 501,
	0, 0, 516, 0, 0, 0, 515, 0, 511, 512,
	513, 514, 493, 494, 495, 496, 497, 517, 0, 0,
	0, 786, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 394,
	0, 366, 406, 344, 358, 414, 359, 360, 387, 330,
	374, 128, 356, 0, 347, 325, 353, 326, 345, 368,
	95, 90, 371, 343, 396, 377, 109, 126, 412, 111,
	382, 786, 145, 120, 1151, 0, 370, 398, 372, 392,
	365, 388, 335, 381, 407, 357, 385, 408, 0, 0,
	0, 0, 76, 0, 844, 845, 1158, 0, 0, 0,
	87, 0, 384, 403, 355, 386, 323, 383, 0, 328,
	331, 413, 401, 350, 351, 1007, 0, 0, 0, 0,
	0, 0, 369, 373, 389, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 380, 0, 0, 0,
	332, 329, 0, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 349, 390,
	0, 322, 393, 399, 364, 190, 402, 362, 361, 405,
	134, 0, 0, 148, 100, 99, 108, 397, 346, 354,
	91, 352, 140, 130, 160, 379, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 324, 0, 327, 0, 146, 162, 175, 342,
	400, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 338, 341, 336, 337, 375, 376, 409, 410, 411,
	391, 333, 0, 339, 340, 0, 395, 378, 78, 0,
	110, 172, 136, 97, 163, 404, 394, 0, 366, 406,
	344, 358, 414, 359, 360, 387, 330, 374, 128, 356,
	0, 347, 325, 353, 326, 345, 368, 95, 90, 371,
	343, 396, 377, 109, 126, 412, 111, 382, 0, 145,
	120, 0, 0, 370, 398, 372, 392, 365, 388, 335,
	381, 407, 357, 385, 408, 0, 0, 0, 0, 76,
	0, 844, 845, 0, 0, 0, 0, 87, 0, 384,
	403, 355, 386, 323, 383, 0, 328, 331, 413, 401,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 369,
	373, 389, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 0, 380, 0, 0, 0, 332, 329, 0,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 0, 349, 390, 0, 322, 393,
	399, 364, 190, 402, 362, 361, 405, 134, 0, 0,
	148, 100, 99, 108, 397, 346, 354, 91, 352, 140,
	130, 160, 379, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 0, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 324,
	0, 327, 0, 146, 162, 175, 342, 400, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 338, 341,
	336, 337, 375, 376, 409, 410, 411, 391, 333, 0,
	339, 340, 0, 395, 378, 78, 0, 110, 172, 136,
	97, 163, 404, 394, 0, 366, 406, 344, 358, 414,
	359, 360, 387, 330, 374, 128, 356, 0, 347, 325,
	353, 326, 345, 368, 95, 90, 371, 343, 396, 377,
	109, 126, 412, 111, 382, 0, 145, 120, 0, 0,
	370, 398, 372, 392, 365, 388, 335, 381, 407, 357,
	385, 408, 0, 51, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 384, 403, 355, 386,
	323, 383, 0, 328, 331, 413, 401, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 369, 373, 389, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	380, 0, 0, 0, 332, 329, 0, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	334, 0, 349, 390, 0, 322, 393, 399, 364, 190,
	402, 362, 361, 405, 134, 0, 0, 148, 100, 99,
	108, 397, 346, 354, 91, 352, 140, 130, 160, 379,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 324, 0, 327, 0,
	146, 162, 175, 342, 400, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 338, 341, 336, 337, 375,
	376, 409, 410, 411, 391, 333, 0, 339, 340, 0,
	395, 378, 78, 0, 110, 172, 136, 97, 163, 404,
	394, 0, 366, 406, 344, 358, 414, 359, 360, 387,
	330, 374, 128, 356, 0, 347, 325, 353, 326, 345,
	368, 95, 90, 371, 343, 396, 377, 109, 126, 412,
	111, 382, 0, 145, 120, 0, 0, 370, 398, 372,
	392, 365, 388, 335, 381, 407, 357, 385, 408, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 384, 403, 355, 386, 323, 383, 0,
	328, 331, 413, 401, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 369, 373, 389, 363, 0, 0, 0,
	0, 0, 0, 1072, 0, 348, 0, 380, 0, 0,
	0, 332, 329, 0, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 349,
	390, 0, 322, 393, 399, 364, 190, 402, 362, 361,
	405, 134, 0, 0, 148, 100, 99, 108, 397, 346,
	354, 91, 352, 140, 130, 160, 379, 131, 139, 112,
	152, 135, 159, 191, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 324, 0, 327, 0, 146, 162, 175,
	342, 400, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 338, 341, 336, 337, 375, 376, 409, 410,
	411, 391, 333, 0, 339, 340, 0, 395, 378, 78,
	0, 110, 172, 136, 97, 163, 404, 394, 0, 366,
	406, 344, 358, 414, 359, 360, 387, 330, 374, 128,
	356, 0, 347, 325, 353, 326, 345, 368, 95, 90,
	371, 343, 396, 377, 109, 126, 412, 111, 382, 0,
	145, 120, 0, 0, 370, 398, 372, 392, 365, 388,
	335, 381, 407, 357, 385, 408, 0, 0, 0, 0,
	242, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	384, 403, 355, 386, 323, 383, 0, 328, 331, 413,
	401, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	369, 373, 389, 363, 0, 0, 0, 0, 0, 0,
	722, 0, 348, 0, 380, 0, 0, 0, 332, 329,
	0, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 349, 390, 0, 322,
	393, 399, 364, 190, 402, 362, 361, 405, 134, 0,
	0, 148, 100, 99, 108, 397, 346, 354, 91, 352,
	140, 130, 160, 379, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	324, 0, 327, 0, 146, 162, 175, 342, 400, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 338,
	341, 336, 337, 375, 376, 409, 410, 411, 391, 333,
	0, 339, 340, 0, 395, 378, 78, 0, 110, 172,
	136, 97, 163, 404, 394, 0, 366, 406, 344, 358,
	414, 359, 360, 387, 330, 374, 128, 356, 0, 347,
	325, 353, 326, 345, 368, 95, 90, 371, 343, 396,
	377, 109, 126, 412, 111, 382, 0, 145, 120, 0,
	0, 370, 398, 372, 392, 365, 388, 335, 381, 407,
	357, 385, 408, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 384, 403, 355,
	386, 323, 383, 0, 328, 331, 413, 401, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 369, 373, 389,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 348,
	0, 380, 0, 0, 0, 332, 329, 0, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 349, 390, 0, 322, 393, 399, 364,
	190, 402, 362, 361, 405, 134, 0, 0, 148, 100,
	99, 108, 397, 346, 354, 91, 352, 140, 130, 160,
	379, 131, 139, 112, 152, 135, 159, 191, 167, 150,
	166, 79, 149, 158, 88, 142, 81, 156, 147, 118,
	104, 105, 80, 0, 138, 94, 98, 93, 127, 153,
	154, 92, 174, 84, 165, 83, 85, 164, 125, 151,
	157, 119, 116, 82, 155, 117, 115, 107, 96, 101,
	132, 114, 133, 102, 122, 121, 123, 324, 0, 327,
	0, 146, 162, 175, 342, 400, 168, 169, 170, 171,
	0, 0, 0, 124, 86, 103, 143, 106, 113, 137,
	173, 129, 141, 89, 161, 144, 338, 341, 336, 337,
	375, 376, 409, 410, 411, 391, 333, 0, 339, 340,
	0, 395, 378, 78, 0, 110, 172, 136, 97, 163,
	404, 394, 0, 366, 406, 344, 358, 414, 359, 360,
	387, 330, 374, 128, 356, 0, 347, 325, 353, 326,
	345, 368, 95, 90, 371, 343, 396, 377, 109, 126,
	412, 111, 382, 0, 145, 120, 0, 0, 370, 398,
	372, 392, 365, 388, 335, 381, 407, 357, 385, 408,
	0, 0, 0, 0, 242, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 384, 403, 355, 386, 323, 383,
	0, 328, 331, 413, 401, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 369, 373, 389, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 380, 0,
	0, 0, 332, 329, 0, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	349, 390, 0, 322, 393, 399, 364, 190, 402, 362,
	361, 405, 134, 0, 0, 148, 100, 99, 108, 397,
	346, 354, 91, 352, 140, 130, 160, 379, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 324, 0, 327, 0, 146, 162,
	175, 342, 400, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 338, 341, 336, 337, 375, 376, 409,
	410, 411, 391, 333, 0, 339, 340, 0, 395, 378,
	78, 0, 110, 172, 136, 97, 163, 404, 394, 0,
	366, 406, 344, 358, 414, 359, 360, 387, 330, 374,
	128, 356, 0, 347, 325, 353, 326, 345, 368, 95,
	90, 371, 343, 396, 377, 109, 126, 412, 111, 382,
	0, 145, 120, 0, 0, 370, 398, 372, 392, 365,
	388, 335, 381, 407, 357, 385, 408, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 384, 403, 355, 386, 323, 383, 0, 328, 331,
	413, 401, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 369, 373, 389, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 0, 380, 0, 0, 0, 332,
	329, 0, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 349, 390, 0,
	322, 393, 399, 364, 190, 402, 362, 361, 405, 134,
	0, 0, 148, 100, 99, 108, 397, 346, 354, 91,
	352, 140, 130, 160, 379, 131, 139, 112, 152, 135,
	159, 191, 167, 150, 166, 79, 149, 158, 88, 142,
	81, 156, 147, 118, 104, 105, 80, 0, 138, 94,
	98, 93, 127, 153, 154, 92, 174, 84, 165, 83,
	320, 164, 125, 151, 157, 119, 116, 82, 155, 117,
	115, 107, 96, 101, 132, 114, 133, 102, 122, 121,
	123, 324, 0, 327, 0, 146, 162, 175, 342, 400,
	168, 169, 170, 171, 0, 0, 0, 321, 319, 103,
	143, 106, 113, 137, 173, 129, 141, 89, 161, 144,
	338, 341, 336, 337, 375, 376, 409, 410, 411, 391,
	333, 0, 339, 340, 0, 395, 378, 78, 0, 110,
	172, 136, 97, 163, 404, 394, 0, 366, 406, 344,
	358, 414, 359, 360, 387, 330, 374, 128, 356, 0,
	347, 325, 353, 326, 345, 368, 95, 90, 371, 343,
	396, 377, 109, 126, 412, 111, 382, 0, 145, 120,
	0, 0, 370, 398, 372, 392, 365, 388, 335, 381,
	407, 357, 385, 408, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 384, 403,
	355, 386, 323, 383, 0, 328, 331, 413, 401, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 369, 373,
	389, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 380, 0, 0, 0, 332, 329, 0, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 334, 0, 349, 390, 0, 322, 393, 399,
	364, 190, 402, 362, 361, 405, 134, 0, 0, 148,
	100, 99, 108, 397, 346, 354, 91, 352, 140, 130,
	160, 379, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 324, 0,
	327, 0, 146, 162, 175, 342, 400, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 338, 341, 336,
	337, 375, 376, 409, 410, 411, 391, 333, 0, 339,
	340, 0, 395, 378, 78, 0, 110, 172, 136, 97,
	163, 404, 394, 0, 366, 406, 344, 358, 414, 359,
	360, 387, 330, 374, 128, 356, 0, 347, 325, 353,
	326, 345, 368, 95, 90, 371, 343, 396, 377, 109,
	126, 412, 111, 382, 0, 145, 120, 0, 0, 370,
	398, 372, 392, 365, 388, 335, 381, 407, 357, 385,
	408, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 384, 403, 355, 386, 323,
	383, 0, 328, 331, 413, 401, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 369, 373, 389, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 348, 0, 380,
	0, 0, 0, 332, 329, 0, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 349, 390, 0, 322, 393, 399, 364, 190, 402,
	362, 361, 405, 134, 0, 0, 148, 100, 99, 108,
	397, 346, 354, 91, 352, 140, 130, 160, 379, 131,
	139, 112, 152, 135, 159, 191, 167, 150, 166, 79,
	149, 600, 88, 142, 81, 156, 147, 118, 104, 105,
	80, 0, 138, 94, 98, 93, 127, 153, 154, 92,
	174, 84, 165, 83, 320, 164, 125, 151, 157, 119,
	116, 82, 155, 117, 115, 107, 96, 101, 132, 114,
	133, 102, 122, 121, 123, 324, 0, 327, 0, 146,
	162, 175, 342, 400, 168, 169, 170, 171, 0, 0,
	0, 321, 319, 103, 143, 106, 113, 137, 173, 129,
	141, 89, 161, 144, 338, 341, 336, 337, 375, 376,
	409, 410, 411, 391, 333, 0, 339, 340, 0, 395,
	378, 78, 0, 110, 172, 136, 97, 163, 404, 394,
	0, 366, 406, 344, 358, 414, 359, 360, 387, 330,
	374, 128, 356, 0, 347, 325, 353, 326, 345, 368,
	95, 90, 371, 343, 396, 377, 109, 126, 412, 111,
	382, 0, 145, 120, 0, 0, 370, 398, 372, 392,
	365, 388, 335, 381, 407, 357, 385, 408, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 384, 403, 355, 386, 323, 383, 0, 328,
	331, 413, 401, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 369, 373, 389, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 380, 0, 0, 0,
	332, 329, 0, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 349, 390,
	0, 322, 393, 399, 364, 190, 402, 362, 361, 405,
	134, 0, 0, 148, 100, 99, 108, 397, 346, 354,
	91, 352, 140, 130, 160, 379, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 311, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 320, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 324, 0, 327, 0, 146, 162, 175, 342,
	400, 168, 169, 170, 171, 0, 0, 0, 321, 319,
	314, 313, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 338, 341, 336, 337, 375, 376, 409, 410, 411,
	391, 333, 0, 339, 340, 0, 395, 378, 78, 0,
	110, 172, 136, 97, 163, 128, 0, 0, 773, 0,
	244, 0, 0, 0, 95, 90, 0, 241, 0, 0,
	109, 126, 284, 111, 0, 0, 145, 120, 0, 0,
	0, 0, 275, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 242, 262, 261, 264,
	265, 266, 267, 0, 87, 263, 268, 269, 270, 0,
	0, 239, 255, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 235, 0, 0, 0,
	295, 0, 254, 0, 0, 250, 251, 256, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 293, 0, 134, 0, 0, 148, 100, 99,
	108, 0, 0, 0, 91, 0, 140, 130, 160, 0,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 274, 0, 0, 0,
	146, 162, 175, 0, 0, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 285, 294, 291, 292, 289,
	290, 288, 287, 286, 296, 277, 278, 279, 280, 282,
	0, 281, 78, 0, 110, 172, 136, 97, 163, 128,
	0, 0, 0, 0, 244, 0, 0, 0, 95, 90,
	0, 241, 0, 0, 109, 126, 284, 111, 0, 0,
	145, 120, 0, 0, 0, 0, 275, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 461,
	242, 262, 261, 264, 265, 266, 267, 0, 87, 263,
	268, 269, 270, 0, 0, 239, 255, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	0, 0, 0, 0, 295, 0, 254, 0, 0, 250,
	251, 256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 293, 0, 134, 0,
	0, 148, 100, 99, 108, 0, 0, 0, 91, 0,
	140, 130, 160, 0, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	274, 0, 0, 0, 146, 162, 175, 0, 0, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 285,
	294, 291, 292, 289, 290, 288, 287, 286, 296, 277,
	278, 279, 280, 282, 0, 281, 78, 0, 110, 172,
	136, 97, 163, 128, 0, 0, 0, 0, 244, 0,
	0, 0, 95, 90, 0, 241, 0, 0, 109, 126,
	284, 111, 0, 0, 145, 120, 0, 0, 0, 0,
	275, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 242, 262, 261, 264, 265, 266,
	267, 0, 87, 263, 268, 269, 270, 0, 0, 239,
	255, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 235, 0, 0, 0, 295, 0,
	254, 0, 0, 250, 251, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	293, 0, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 0, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 274, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 285, 294, 291, 292, 289, 290, 288,
	287, 286, 296, 277, 278, 279, 280, 282, 0, 281,
	78, 0, 110, 172, 136, 97, 163, 128, 0, 0,
	0, 0, 244, 0, 0, 0, 95, 90, 0, 241,
	0, 0, 109, 126, 284, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 275, 276, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 51, 0, 0, 242, 262,
	261, 264, 265, 266, 267, 0, 87, 263, 268, 269,
	270, 0, 0, 239, 255, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 0, 0,
	0, 0, 295, 0, 254, 0, 0, 250, 251, 256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 293, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 274, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 285, 294, 291,
	292, 289, 290, 288, 287, 286, 296, 277, 278, 279,
	280, 282, 24, 281, 78, 0, 110, 172, 136, 97,
	163, 0, 0, 0, 128, 0, 0, 0, 0, 244,
	0, 0, 0, 95, 90, 0, 241, 0, 0, 109,
	126, 284, 111, 0, 0, 145, 120, 0, 0, 0,
	0, 275, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 242, 262, 261, 264, 265,
	266, 267, 0, 87, 263, 268, 269, 270, 0, 0,
	239, 255, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 0, 0, 0, 0, 295,
	0, 254, 0, 0, 250, 251, 256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 293, 0, 134, 0, 0, 148, 100, 99, 108,
	0, 0, 0, 91, 0, 140, 130, 160, 0, 131,
	139, 112, 152, 135, 159, 191, 167, 150, 166, 79,
	149, 158, 88, 142, 81, 156, 147, 118, 104, 105,
	80, 0, 138, 94, 98, 93, 127, 153, 154, 92,
	174, 84, 165, 83, 85, 164, 125, 151, 157, 119,
	116, 82, 155, 117, 115, 107, 96, 101, 132, 114,
	133, 102, 122, 121, 123, 274, 0, 0, 0, 146,
	162, 175, 0, 0, 168, 169, 170, 171, 0, 0,
	0, 124, 86, 103, 143, 106, 113, 137, 173, 129,
	141, 89, 161, 144, 285, 294, 291, 292, 289, 290,
	288, 287, 286, 296, 277, 278, 279, 280, 282, 0,
	281, 78, 0, 110, 172, 136, 97, 163, 128, 0,
	0, 0, 0, 244, 0, 0, 0, 95, 90, 0,
	241, 0, 0, 109, 126, 284, 111, 0, 0, 145,
	120, 0, 0, 0, 0, 275, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 242,
	262, 261, 264, 265, 266, 267, 0, 87, 263, 268,
	269, 270, 0, 0, 239, 255, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 0,
	0, 0, 0, 295, 0, 254, 0, 0, 250, 251,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 293, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 0, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 274,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 285, 294,
	291, 292, 289, 290, 288, 287, 286, 296, 277, 278,
	279, 280, 282, 128, 281, 78, 0, 110, 172, 136,
	97, 163, 95, 90, 0, 0, 0, 0, 109, 126,
	284, 111, 0, 0, 145, 120, 0, 0, 0, 0,
	275, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 242, 262, 261, 264, 265, 266,
	267, 0, 87, 263, 268, 269, 270, 0, 0, 0,
	255, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 0, 0, 0, 0, 295, 0,
	254, 0, 0, 250, 251, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	293, 0, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 1332, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 274, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 285, 294, 291, 292, 289, 290, 288,
	287, 286, 296, 277, 278, 279, 280, 282, 128, 281,
	78, 0, 110, 172, 136, 97, 163, 95, 90, 0,
	0, 0, 0, 109, 126, 284, 111, 0, 0, 145,
	120, 0, 0, 0, 0, 275, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 242,
	262, 261, 264, 265, 266, 267, 0, 87, 263, 268,
	269, 270, 0, 0, 0, 255, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 0,
	0, 0, 0, 295, 0, 254, 0, 0, 250, 251,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 293, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 0, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 274,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 285, 294,
	291, 292, 289, 290, 288, 287, 286, 296, 277, 278,
	279, 280, 282, 128, 281, 78, 0, 110, 172, 136,
	97, 163, 95, 90, 0, 0, 0, 0, 109, 126,
	0, 111, 1172, 461, 145, 120, 0, 500, 499, 509,
	510, 502, 503, 504, 505, 506, 507, 508, 501, 0,
	0, 516, 0, 0, 76, 515, 0, 511, 512, 513,
	514, 0, 87, 0, 461, 0, 517, 69, 500, 499,
	509, 510, 502, 503, 504, 505, 506, 507, 508, 501,
	0, 0, 516, 0, 0, 0, 515, 0, 511, 512,
	513, 514, 0, 0, 0, 0, 0, 517, 0, 500,
	499, 509, 510, 502, 503, 504, 505, 506, 507, 508,
	501, 0, 0, 516, 0, 0, 0, 515, 0, 511,
	512, 513, 514, 0, 72, 73, 0, 68, 517, 0,
	0, 74, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 0, 131, 139,
	112, 152, 135, 159, 70, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 0, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 1173, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	78, 0, 110, 172, 136, 97, 163, 95, 90, 0,
	0, 0, 0, 109, 126, 0, 111, 0, 0, 145,
	120, 499, 509, 510, 502, 503, 504, 505, 506, 507,
	508, 501, 0, 1269, 516, 0, 1271, 0, 515, 76,
	511, 512, 513, 514, 0, 0, 0, 87, 0, 517,
	0, 0, 0, 0, 0, 0, 0, 500, 499, 509,
	510, 502, 503, 504, 505, 506, 507, 508, 501, 0,
	0, 516, 0, 0, 0, 515, 0, 511, 512, 513,
	514, 0, 0, 0, 0, 0, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 634, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 0,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 78, 0, 110, 172, 136,
	97, 163, 128, 0, 0, 0, 589, 0, 0, 0,
	0, 95, 90, 0, 0, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 591, 0, 0, 0, 0,
	0, 87, 648, 649, 650, 651, 652, 653, 654, 0,
	655, 656, 657, 658, 659, 636, 637, 638, 639, 620,
	621, 0, 0, 623, 0, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 640, 641, 642, 643, 644,
	645, 646, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 131, 139, 112,
	152, 135, 159, 191, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 0, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 0, 0, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 78,
	0, 110, 172, 136, 97, 163, 95, 90, 0, 0,
	0, 0, 109, 126, 0, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 87, 500, 499, 509,
	510, 502, 503, 504, 505, 506, 507, 508, 501, 940,
	0, 516, 0, 0, 0, 515, 0, 511, 512, 513,
	514, 0, 0, 0, 0, 0, 517, 0, 0, 500,
	499, 509, 510, 502, 503, 504, 505, 506, 507, 508,
	501, 0, 0, 516, 0, 0, 0, 515, 0, 511,
	512, 513, 514, 0, 0, 0, 0, 0, 517, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 78, 0, 110, 172, 136, 97,
	163, 95, 90, 0, 0, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 131, 139, 112,
	152, 135, 159, 191, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 0, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 78,
	0, 110, 172, 136, 97, 163, 95, 90, 0, 0,
	0, 0, 109, 126, 0, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 709, 0, 0, 710, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 78, 0, 110, 172, 136, 97,
	163, 95, 90, 0, 609, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 608, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 131, 139, 112,
	152, 135, 159, 191, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 0, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 110, 172, 136, 97, 163, 128, 0, 0, 0,
	589, 0, 0, 0, 0, 95, 90, 0, 0, 0,
	0, 109, 126, 0, 111, 0, 0, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 591,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 134, 0, 0, 148, 100,
	99, 108, 0, 0, 0, 91, 0, 140, 130, 160,
	0, 587, 139, 112, 152, 135, 159, 191, 167, 150,
	166, 79, 149, 158, 88, 142, 81, 156, 147, 118,
	104, 105, 80, 0, 138, 94, 98, 93, 127, 153,
	154, 92, 174, 84, 165, 83, 85, 164, 125, 151,
	157, 119, 116, 82, 155, 117, 115, 107, 96, 101,
	132, 114, 133, 102, 122, 121, 123, 0, 0, 0,
	0, 146, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 124, 86, 103, 143, 106, 113, 137,
	173, 129, 141, 89, 161, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 78, 0, 110, 172, 136, 97, 163,
	95, 90, 0, 0, 0, 0, 109, 126, 0, 111,
	0, 0, 145, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	134, 0, 0, 148, 100, 99, 108, 0, 0, 0,
	91, 0, 140, 130, 160, 0, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 0, 0, 0, 0, 146, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 78, 0,
	110, 172, 136, 97, 163, 95, 90, 0, 0, 0,
	0, 109, 126, 0, 111, 0, 0, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 591,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 134, 0, 0, 148, 100,
	99, 108, 0, 0, 0, 91, 0, 140, 130, 160,
	0, 131, 139, 112, 152, 135, 159, 191, 167, 150,
	166, 79, 149, 158, 88, 142, 81, 156, 147, 118,
	104, 105, 80, 0, 138, 94, 98, 93, 127, 153,
	154, 92, 174, 84, 165, 83, 85, 164, 125, 151,
	157, 119, 116, 82, 155, 117, 115, 107, 96, 101,
	132, 114, 133, 102, 122, 121, 123, 0, 0, 0,
	0, 146, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 124, 86, 103, 143, 106, 113, 137,
	173, 129, 141, 89, 161, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 78, 0, 110, 172, 136, 97, 163,
	95, 90, 0, 0, 0, 0, 109, 126, 0, 111,
	0, 0, 145, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 485, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	134, 0, 0, 148, 100, 99, 108, 0, 0, 0,
	91, 0, 140, 130, 160, 0, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 0, 0, 0, 0, 146, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 78, 0,
	110, 172, 136, 97, 163, 567, 95, 90, 0, 0,
	0, 0, 109, 126, 0, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 128, 0, 78, 0, 110, 172, 136, 97,
	163, 95, 90, 0, 0, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 131, 139, 112,
	152, 135, 159, 191, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 0, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 78,
	0, 110, 172, 136, 97, 163, 95, 90, 0, 0,
	0, 0, 109, 126, 0, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 78, 0, 110, 172, 136, 97,
	163, 95, 90, 0, 0, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 131, 139, 112,
	152, 135, 159, 191, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 0, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 78,
	0, 110, 172, 136, 97, 163, 95, 90, 0, 0,
	0, 0, 109, 126, 0, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 78, 0, 110, 172, 136, 97,
	163, 95, 90, 0, 0, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 634, 0, 0,
	0, 134, 0, 0, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 131, 139, 112,
	152, 135, 159, 191, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 622, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 635, 0, 0, 0, 0, 0, 78,
	0, 110, 172, 136, 97, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 648, 649, 650, 651, 652, 653,
	654, 0, 655, 656, 657, 658, 659, 636, 637, 638,
	639, 620, 621, 0, 0, 623, 763, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 640, 641, 642,
	643, 644, 645, 646, 647, 0, 0, 0, 0, 764,
	765, 24, 25, 49, 27, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 38, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 31, 32,
	34, 33, 36, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	45, 43, 0, 0, 46, 47, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 40,
	0, 41, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50,
}

var yyPact = [...]int16{
	11355, -1000, -173, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 826, 849, -1000, -1000, -1000, -1000, -1000, -1000,
	616, 7265, 39, 56, -18, 10339, 55, 1546, 11044, -1000,
	-11, -1000, -1000, 1934, -1000, -1000, -1000, -1000, 579, -1000,
	-1000, -1000, -1000, -1000, 813, 821, 627, 805, 700, -1000,
	5825, 36, 9163, 10104, 5093, -1000, 480, 49, 11044, -137,
	10809, 32, 32, 32, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 54, 11044, -1000, 11044,
	30, 479, 30, 30, 30, 11044, -1000, 84, -1000, -1000,
	-1000, -1000, 11044, 468, 758, 60, 3037, 3037, 3037, 3037,
	-3, 3037, -90, 653, -1000, -1000, -1000, -1000, 3037, -1000,
	-1000, -1000, -1000, -1000, -1000, 1874, -1000, -1000, -1000, -1000,
	374, 745, 6560, 6560, 826, -1000, 579, -1000, -1000, -1000,
	733, -1000, -1000, 234, 835, -1000, 2205, 83, -1000, 6560,
	2385, 512, -1000, -1000, 512, -1000, -1000, -1000, -1000, -1000,
	7030, 7030, 7030, 7030, 7030, 7030, 7030, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 512, -1000, 6316, 512, 512, 512, 512, 512, 512,
	512, 512, 512, 6560, 512, 512, 512, 512, 512, 512,
	512, 512, 512, 512, 512, 512, 512, 9869, 523, 689,
	-1000, -1000, -1000, 801, 8214, 8928, 11044, 495, -1000, 547,
	4836, -93, -1000, -1000, -1000, 167, 8684, -1000, -1000, -1000,
	742, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 475, -1000, 7644, 460, 3037,
	43, 637, 429, 187, 414, 11044, 11044, 3037, 41, 11044,
	799, 652, 11044, 412, 410, -1000, 4579, -1000, 3037, 3037,
	3037, 3037, 3037, 3037, 3037, 3037, -1000, -1000, -1000, -1000,
	-1000, -1000, 3037, 3037, -1000, -87, -1000, 11044, -1000, -1000,
	-1000, -1000, -1000, 844, 123, 284, 82, 563, -1000, 294,
	813, 374, 700, 8449, 668, -1000, -1000, 11044, -1000, 6560,
	6560, 355, -1000, 9633, -1000, -1000, 3551, 139, 7030, 92,
	156, 7030, 7030, 718, 92, 92, 7030, 7030, 7030, 7030,
	7030, 7030, 7030, 7030, 7030, 7030, 7030, 7030, 7030, 7030,
	7030, 7030, 7030, 7030, 7030, 11146, 325, 7030, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 403, -1000, 579, 151,
	151, 151, 151, 151, 151, 109, 5337, 374, 473, 291,
	6316, -1000, 5825, 5825, 6560, 6560, 10574, 10574, 5825, 806,
	182, 291, 10574, -1000, 374, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5825, 5825, 5825, 5825, 10, 11044, -1000, 10574,
	9163, 9163, 9163, 9163, 9163, -1000, 686, 684, -1000, 678,
	676, 665, 11044, -1000, 466, 8214, 117, 512, -1000, 9398,
	-1000, -1000, 10, 524, 9163, 11044, -1000, -1000, 4322, 547,
	-93, 540, -1000, -104, -108, 6069, 100, -1000, -1000, -1000,
	-1000, 2780, 211, 308, -73, -1000, -1000, -1000, 567, -1000,
	567, 567, 567, 567, -38, -38, -38, -38, -1000, -1000,
	-1000, -1000, -1000, 611, 609, -1000, 567, 567, 567, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 595, 595, 595, 584, 584,
	639, -1000, 11044, -153, 398, 3037, 779, 3037, -1000, 1380,
	-1000, 11044, -1000, -1000, 11044, 3037, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 215, -1000, -1000, -1000, -1000, 714, 6560, 6560, 4065,
	6560, -1000, -1000, -1000, 745, -1000, 806, 820, -1000, 726,
	724, 5825, -1000, -1000, 139, 264, -1000, -1000, 259, -1000,
	-1000, -1000, -1000, 81, 512, -1000, 7214, -1000, -1000, -1000,
	95, -177, -1000, 92, 7030, 7030, 7030, 2009, 7214, -1000,
	-1000, -1000, 7214, 7214, 7986, 300, 7447, 151, 1268, 1268,
	345, 345, 345, 345, 345, 1753, 1753, 7214, 7214, 7214,
	7214, -191, -1000, 567, -17, -21, -1000, -1000, -1000, -1000,
	7214, 374, 374, 5825, 546, -1000, -1000, 6560, -1000, 374,
	456, 456, 289, 346, 565, -1000, 79, 553, 456, 5825,
	179, -1000, 6560, 374, -1000, 456, 374, 456, 456, 511,
	512, -1000, 513, -1000, 152, 689, 628, 647, 816, -1000,
	-1000, -1000, -1000, 680, -1000, 666, -1000, -1000, -1000, -1000,
	-1000, 47, 46, 45, 10809, -1000, 833, 9163, 536, -1000,
	-1000, 540, -93, -116, -1000, -1000, -1000, 291, -1000, 389,
	537, 2523, -1000, -1000, -1000, -1000, -1000, -1000, 583, 764,
	184, 153, 379, -1000, -1000, 746, -1000, 200, -75, -1000,
	-1000, 292, -38, -38, -1000, -1000, 100, 738, 100, 100,
	100, 360, 360, -1000, -1000, -1000, -1000, 278, -1000, -1000,
	-1000, 269, -1000, 646, 10809, 3037, -1000, 3808, -1000, -1000,
	-1000, -1000, -1000, -1000, 548, 185, 181, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9, -1000,
	3037, -1000, 221, 11044, 11044, 712, 291, 291, 77, -1000,
	-1000, 11044, -1000, -1000, -1000, -1000, 539, -1000, -1000, -1000,
	3294, 5825, 11146, 6560, -1000, 2009, 7214, 7954, -1000, 7030,
	7030, -197, -1000, -1000, -1000, -1000, -1000, 456, 5825, 291,
	-1000, -1000, -1000, 11146, 325, 11146, 7030, 7030, 4065, 7030,
	7030, -147, 530, 157, -1000, 6560, 260, -1000, -1000, -1000,
	-1000, -1000, 645, 10574, 512, -1000, 7979, 10809, 826, 10574,
	6560, 6560, -1000, -1000, 6560, 580, -1000, 6560, -1000, -1000,
	-1000, 512, 512, 512, 434, -1000, 826, 536, -1000, -1000,
	-1000, -111, -113, -1000, -1000, 2780, -1000, 2780, 10809, -1000,
	377, 368, -1000, -1000, 642, 66, -1000, -1000, -1000, 476,
	100, 100, -1000, 160, -1000, -1000, -1000, 454, -1000, 452,
	525, 447, 11044, -1000, -1000, 522, -1000, 148, -1000, -1000,
	10809, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10809, 11044, -1000, -1000, -1000, -1000, -1000,
	10809, -1000, -1000, 351, 6560, -1000, -1000, -1000, 3808, -1000,
	833, 9163, -1000, -1000, 374, -191, 34, -1000, 7030, 7214,
	7214, -1000, -1000, -1000, 40, 374, 40, 7245, 7484, -1000,
	2202, 2154, 512, -144, -1000, 291, 6560, -1000, 769, 490,
	508, -1000, -1000, 5581, 374, 445, 76, 434, 813, -1000,
	291, 291, 291, 10809, 291, 10809, 10809, 10809, 7744, 10809,
	813, -1000, -1000, -1000, -1000, 2523, -1000, 428, -1000, 567,
	-1000, -1000, -62, 842, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -38, 347, -38, 258, -1000,
	255, 3037, 3808, 2780, -1000, 535, -1000, -1000, -1000, -1000,
	771, -1000, 291, 829, 509, -1000, -1000, 7214, -1000, -1000,
	-1000, -1000, 7030, 7030, -1000, 7030, 7030, 7030, 374, 344,
	291, 766, 763, -1000, 512, -1000, -1000, 534, 10809, 10809,
	-1000, -1000, 423, -1000, 418, 418, 418, 117, -1000, -1000,
	112, 10809, -1000, 172, -1000, -122, 100, -1000, 100, 457,
	408, -1000, -1000, -1000, 10809, 512, 818, 817, 7276, 7276,
	7276, 7276, -19, -1000, -1000, -1000, 7500, 841, -1000, 512,
	-1000, 579, 75, -1000, 10809, -1000, -1000, -1000, -1000, -1000,
	112, -1000, 364, 147, 324, -1000, 204, 762, -1000, 761,
	-1000, -1000, -1000, -1000, -1000, 407, 8, -1000, 6560, 6560,
	-1000, -1000, -1000, -1000, 374, 57, -157, 622, 100, 25,
	-1000, 10809, 10574, 508, 374, 10809, -1000, -1000, -1000, 248,
	-1000, -1000, -1000, 318, -1000, -1000, 637, 393, -1000, 10809,
	291, 499, -1000, 711, -151, -161, -1000, 754, 833, 10809,
	373, 498, -1000, -1000, -1000, -1000, -153, -1000, 8, 721,
	-1000, 709, -1000, -1000, 734, -1000, -1000, -1000, -1000, -1000,
	5, -154, 10574, -1, -159, 513, 512, -170, -1000, 6795,
	-1000, 7276, 374, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 139, 132, 621, 1053, 1052, 1051, 1050, 1049, 1048,
	1047, 1046, 1045, 1044, 1040, 1039, 1038, 1037, 1036, 1035,
	1034, 1033, 1030, 1029, 1028, 117, 1027, 1024, 1021, 58,
	1020, 62, 1019, 1018, 30, 131, 37, 32, 649, 1017,
	24, 53, 56, 1015, 40, 1013, 1012, 68, 1011, 52,
	1009, 999, 1531, 998, 996, 14, 7, 995, 991, 989,
	987, 59, 306, 986, 985, 983, 982, 980, 974, 41,
	11, 12, 26, 13, 973, 142, 36, 972, 38, 971,
	968, 967, 964, 25, 963, 47, 962, 19, 45, 961,
	9, 55, 28, 960, 959, 958, 957, 956, 5, 65,
	61, 954, 27, 48, 35, 953, 952, 410, 951, 949,
	948, 947, 946, 944, 151, 360, 943, 941, 938, 937,
	31, 172, 455, 463, 60, 936, 935, 934, 1238, 64,
	51, 16, 931, 23, 54, 29, 928, 927, 22, 66,
	926, 925, 924, 922, 920, 919, 21, 918, 916, 915,
	43, 10, 914, 913, 46, 42, 910, 904, 903, 39,
	50, 902, 33, 893, 892, 891, 890, 20, 15, 888,
	8, 887, 4, 882, 878, 2, 874, 17, 871, 3,
	867, 6, 34, 18, 864, 858, 0, 757, 856, 855,
	101,
}

var yyR1 = [...]uint8{
	0, 184, 185, 185, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 183, 183, 7, 7, 28, 28, 8, 9,
	9, 9, 188, 188, 47, 47, 91, 91, 10, 10,
	10, 10, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 136, 136, 11, 11, 11, 11, 11, 11, 11,
	181, 181, 180, 179, 179, 178, 178, 177, 16, 164,
	165, 165, 165, 160, 139, 139, 139, 139, 142, 142,
	140, 140, 140, 140, 140, 140, 140, 141, 141, 141,
	141, 141, 143, 143, 143, 143, 143, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 145, 145, 145, 145, 145, 145, 145, 145,
	159, 159, 146, 146, 154, 154, 155, 155, 155, 152,
	152, 153, 153, 156, 156, 156, 147, 147, 147, 147,
	147, 147, 147, 149, 149, 157, 157, 150, 150, 150,
	151, 151, 158, 158, 158, 158, 158, 148, 148, 161,
	161, 173, 173, 172, 172, 172, 163, 163, 169, 169,
	169, 169, 169, 162, 162, 171, 171, 170, 166, 166,
	166, 167, 167, 167, 168, 168, 168, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 176, 174, 174,
	175, 175, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 112, 112, 109, 109, 110, 110,
	111, 111, 111, 113, 113, 113, 137, 137, 137, 19,
	19, 22, 22, 23, 24, 21, 21, 20, 20, 20,
	20, 189, 25, 26, 26, 27, 27, 27, 31, 31,
	31, 29, 29, 30, 30, 36, 36, 35, 35, 37,
	37, 37, 37, 125, 125, 125, 124, 124, 39, 39,
	40, 40, 41, 41, 42, 42, 42, 54, 54, 90,
	90, 92, 92, 43, 43, 43, 43, 44, 44, 45,
	45, 46, 46, 132, 132, 131, 131, 131, 130, 130,
	48, 48, 48, 50, 49, 49, 49, 49, 51, 51,
	53, 53, 52, 52, 55, 55, 55, 55, 56, 56,
	38, 38, 38, 38, 38, 38, 38, 108, 108, 58,
	58, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 68, 68, 68, 68,
	68, 68, 59, 59, 59, 59, 59, 59, 59, 34,
	34, 69, 69, 69, 69, 69, 69, 75, 70, 70,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 66, 66, 66, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 65, 65, 65, 65, 65, 65,
	65, 65, 190, 190, 67, 67, 67, 67, 32, 32,
	32, 32, 32, 135, 135, 138, 138, 138, 138, 138,
	138, 138, 138, 79, 79, 33, 33, 77, 77, 78,
	80, 80, 76, 76, 76, 61, 61, 61, 61, 61,
	61, 61, 61, 63, 63, 63, 81, 81, 82, 82,
	83, 83, 84, 84, 85, 86, 86, 86, 87, 87,
	87, 87, 88, 88, 88, 60, 60, 60, 60, 60,
	60, 89, 89, 89, 89, 93, 93, 94, 94, 96,
	96, 96, 97, 97, 95, 95, 71, 71, 73, 73,
	72, 74, 98, 98, 102, 99, 99, 103, 103, 103,
	101, 101, 101, 127, 127, 127, 106, 106, 114, 114,
	115, 115, 107, 107, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 117, 117, 117, 118, 118, 119,
	119, 119, 126, 126, 122, 122, 123, 123, 128, 128,
	129, 129, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 186, 187, 133, 134, 134,
	134,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 0, 3, 7, 8, 1, 1, 8, 8,
	7, 6, 1, 1, 1, 3, 0, 4, 3, 4,
	5, 4, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 8, 4, 6, 5, 5, 5,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 3, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 3, 3,
	3, 3, 3, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 3, 4, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 4, 5, 6, 2, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 1, 2, 1, 2, 1,
	2, 3, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 4, 0, 3, 0,
	3, 3, 1, 3, 2, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -184, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -22, -23, -24,
	-21, -20, -3, -4, 6, 7, -28, 9, 10, 31,
	-16, 123, 124, 126, 125, 151, 127, 144, 51, 163,
	164, 166, 167, 146, 25, 145, 149, 150, -186, 8,
	247, 56, -185, 262, -83, 15, -27, 5, -25, -189,
	-25, -25, -25, -25, -25, -164, 56, -119, 132, 72,
	159, 239, 129, 130, 136, -122, 59, -121, 255, 163,
	174, 168, 195, 187, 185, 188, 226, 67, 166, 235,
	28, 147, 183, 179, 177, 27, 200, 260, 178, 142,
	141, 201, 205, 227, 172, 173, 229, 199, 143, 33,
	257, 36, 155, 230, 203, 198, 194, 197, 171, 193,
	40, 207, 206, 208, 225, 190, 34, 180, 18, 233,
	150, 153, 202, 204, 137, 157, 259, 231, 176, 154,
	149, 234, 167, 228, 237, 39, 213, 170, 140, 164,
	161, 191, 156, 181, 182, 196, 169, 192, 165, 158,
	151, 236, 214, 261, 189, 186, 162, 160, 218, 219,
	220, 221, 258, 232, 184, 215, -107, 132, 134, 130,
	130, 131, 132, 239, 129, 130, -52, -128, 59, -121,
	132, 159, 130, 108, 188, 123, 216, 131, 33, 157,
	-137, 130, -109, 160, 218, 219, 220, 221, 59, 228,
	227, 222, -128, 165, -1, 127, -133, -133, -133, -133,
	-2, -87, 17, 16, -5, -3, -186, 6, 20, 21,
	-31, 41, 42, -26, -37, 99, -38, -128, -57, 74,
	-62, 30, 59, -121, 23, -61, -58, -76, -74, -75,
	108, 109, 97, 98, 105, 75, 110, -66, -64, -65,
	-67, 61, 60, 68, 62, 63, 64, 65, 69, 70,
	71, -122, -72, -186, 209, 45, 46, 248, 249, 250,
	251, 254, 252, 77, 35, 238, 246, 245, 244, 242,
	243, 240, 241, 135, 239, 103, 247, -107, -40, -41,
	-42, -43, -54, -75, -186, -52, 11, -47, -52, -99,
	-136, 165, -103, 228, 227, -123, -101, -122, -120, 226,
	188, 225, 128, 73, 209, 22, 24, 211, 76, 108,
	16, 77, 107, 248, 123, 49, 240, 241, 238, 250,
	251, 239, 216, 30, 10, 25, 145, 21, 101, 125,
	80, 81, 148, 23, 146, 71, 19, 52, 11, 13,
	14, 135, 134, 92, 131, 47, 8, 110, 26, 89,
	43, 29, 45, 90, 17, 242, 243, 32, 254, 152,
	103, 50, 37, 74, 69, 53, 72, 15, 48, 91,
	126, 247, 46, 129, 6, 253, 31, 144, 44, 130,
	217, 79, 133, 70, 5, 136, 9, 51, 54, 244,
	245, 246, 35, 78, 12, -165, -160, 59, 131, -52,
	247, -122, -115, 135, -115, -115, 130, -52, -52, -114,
	135, 59, -114, -114, -114, -52, 112, -52, 59, 31,
	239, 59, 157, 130, 158, 132, -134, -186, -123, -134,
	-134, -134, 161, 162, -134, -110, 223, 53, -134, -1,
	-187, 58, -88, 19, 32, -38, -128, -84, -85, -38,
	-83, -2, -25, 37, -29, 21, 66, 11, -125, 73,
	72, 89, -124, 22, -122, 61, 112, -38, -59, 92,
	74, 90, 91, 117, 118, 119, 120, 121, 76, 94,
	93, 104, 97, 98, 99, 100, 101, 102, 103, 95,
	96, 113, 114, 115, 116, 111, 107, 122, 82, 83,
	84, 85, 86, 87, 88, -108, -186, -75, -186, -62,
	-62, -62, -62, -62, -62, -62, -186, -2, -70, -38,
	-186, -75, -186, -186, -186, -186, -186, -186, -186, -186,
	-79, -38, -186, -190, -186, -190, -190, -190, -190, -190,
	-190, -190, -186, -186, -186, -186, -53, 26, -52, 31,
	57, -48, -50, -49, -51, 43, 47, 49, 44, 45,
	46, 50, -132, 22, -40, -186, -131, 153, -130, 22,
	-128, 61, -52, -47, -188, 57, 11, 54, 57, -99,
	165, -100, -104, 229, 231, 82, -127, -122, 61, 30,
	31, 58, 57, -139, -142, -144, -143, -145, -140, -141,
	185, 186, 108, 189, 191, 192, 193, 194, 195, 196,
	197, 198, 199, 200, 31, 147, 181, 182, 183, 184,
	201, 202, 203, 204, 205, 206, 207, 208, 168, 169,
	170, 171, 172, 173, 174, 176, 177, 178, 179, 180,
	59, -134, 132, -181, 54, 59, 74, 59, -52, -52,
	-134, 133, -52, 23, 53, -52, 59, 59, -129, -128,
	-120, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -112, 217, 224, -52, 9, 92, 57, 18, 112,
	57, -86, 24, 25, -87, -187, -31, -63, -122, 62,
	65, -30, 44, -52, -38, -38, -68, 69, 74, 70,
	71, -124, 99, -129, -123, -120, -62, -69, -72, -75,
	61, 209, 65, 92, 90, 91, 76, -62, -62, -61,
	-69, -69, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -138, 256, 190, 213, 214, -139, -135, 59, 61,
	-62, 59, -36, 21, -35, -37, -187, 57, -187, -2,
	-35, -35, -38, -38, -76, -122, -128, -76, -35, -29,
	-77, -78, 78, -76, -187, -35, -36, -35, -35, -91,
	153, -52, -98, -102, -76, -41, -42, -42, -41, -42,
	43, 43, 43, 48, 43, 48, 43, -49, -128, -187,
	-55, 51, 134, 52, -186, -130, -91, 54, -40, -52,
	-103, -100, 57, 230, 232, 233, 53, -38, -151, 107,
	-166, -167, -168, -123, 61, 62, -160, -161, -169, 137,
	140, 136, -162, 131, 29, -156, 69, 74, -152, 214,
	-146, 56, -146, -146, -146, -146, -150, 188, -150, -150,
	-150, 56, 56, -146, -146, -146, -154, 56, -154, -154,
	-155, 56, -155, -126, 54, -52, -179, 258, -180, 59,
	-134, 23, -134, -116, 128, 125, 126, -176, 124, 211,
	188, 67, 30, 15, 248, 153, 261, 59, 154, -52,
	-52, -134, -111, 11, 92, 39, -38, -38, -129, -85,
	-88, -106, 19, 11, 35, 35, -35, 69, 70, 71,
	112, -186, 111, 263, -69, -62, -62, -62, -34, 148,
	73, 263, -146, 173, 173, -187, -187, -35, 57, -38,
	-187, -187, -187, 57, 54, 22, 57, 11, 112, 57,
	11, -187, -35, -80, -78, 80, -38, -187, -187, -187,
	-187, -187, -60, 31, 35, -2, -186, -186, -56, 57,
	12, 82, -45, -44, 53, 54, -46, 53, -44, 43,
	43, 131, 131, 131, -92, -122, -56, -40, -56, -104,
	-105, 234, 231, 237, 59, 57, -168, 82, 56, 29,
	-162, -162, 59, 59, -147, 30, 69, -153, 215, 62,
	-150, -150, -151, 31, -151, -151, -151, -159, 61, -159,
	62, 62, 53, -122, -134, -178, -177, -123, -133, -182,
	159, 138, 139, 142, 141, 59, 131, 29, 137, 140,
	153, 136, -182, 159, -117, -118, 133, 22, 131, 29,
	153, -134, -113, 90, 12, -128, -128, 40, 112, -52,
	-39, 11, 99, -123, -36, -138, -70, -34, 73, -62,
	-62, 264, -187, -37, -138, -135, -138, -62, -62, -123,
	-62, -62, 255, -83, 81, -38, 79, -183, 53, -98,
	-71, -73, -72, -186, -2, -89, -122, -92, -83, -102,
	-38, -38, -38, 56, -38, -186, -186, -186, -187, 57,
	-83, -56, 231, 235, 236, -167, -168, -171, -170, -122,
	59, 59, -149, 53, 61, 62, 63, 69, 238, 68,
	58, -151, -151, 59, 108, 58, 57, 58, 57, 58,
	57, -52, 57, 82, -133, -122, -133, -122, -52, -133,
	-122, 61, -38, -56, -40, -187, 264, -62, -187, -187,
	-187, -187, 57, 19, -187, 57, 19, -186, -33, 253,
	-38, -93, 27, -183, 57, -187, -187, -187, 57, 112,
	-187, -87, -90, -122, -90, -90, -90, -131, -122, -87,
	58, 57, -146, -157, 211, 9, -150, 61, -150, 62,
	62, -134, -177, -168, 56, 26, -81, 13, -62, -62,
	-62, -62, -62, -187, 61, -94, 28, 29, -73, 35,
	-2, -186, -122, -122, 57, 58, -187, -187, -187, -55,
	-173, -172, 54, 143, 67, -170, -158, 137, 29, 136,
	238, -151, -151, 58, 58, -90, -186, -82, 14, 16,
	-187, -187, -187, -187, -32, 92, 258, -96, -97, 53,
	-122, 56, 9, -71, -2, 112, -122, -172, 59, -163,
	82, 61, -148, 67, 29, 29, 58, -174, -175, 153,
	-38, -70, -187, 256, 50, 259, -95, 55, -151, 139,
	-90, -98, -187, -122, 62, 61, -181, -187, 57, -122,
	40, 257, 260, 34, 9, -56, -122, 58, -179, -175,
	35, 40, 31, 155, 258, -98, 156, 259, -56, -186,
	260, -62, 152, -187, -187,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 520, 0, 281, 281, 281, 281, 281, 281,
	0, 599, 582, 0, 0, 0, 0, -2, 270, 271,
	0, 273, 274, 0, 807, 807, 807, 807, 0, 36,
	37, 805, 1, 3, 528, 0, 0, 285, 288, 283,
	0, 582, 0, 0, 0, 63, 0, 0, 794, 0,
	795, 580, 580, 580, 600, 601, 604, 605, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 0, 0, 583, 0,
	578, 0, 578, 578, 578, 0, 229, 352, 608, 609,
	794, 795, 0, 0, 0, 0, 808, 808, 808, 808,
	0, 808, 258, 247, 249, 250, 251, 252, 808, 267,
	268, 257, 269, 272, 275, 0, 277, 278, 279, 280,
	28, 532, 0, 0, 520, 30, 0, 281, 286, 287,
	291, 289, 290, 282, 0, 299, 303, 0, 360, 0,
	365, 367, -2, -2, 0, 410, 411, 412, 413, 414,
	0, 0, 0, 0, 0, 0, 0, 441, 442, 443,
	444, 505, 506, 507, 508, 509, 510, 511, 512, 369,
	370, 502, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 493, 0, 472, 472, 472, 472, 472,
	472, 472, 472, 0, 0, 0, 0, 0, 0, 310,
	312, 313, 314, 333, 0, 335, 0, 0, 44, 48,
	0, 785, 565, -2, -2, 0, 0, 606, 607, -2,
	712, -2, 612, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 0, 80, 0, 0, 808,
	0, 70, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 230, 808, 808,
	808, 808, 808, 808, 808, 808, 239, 809, 810, 240,
	241, 242, 808, 808, 244, 0, 259, 0, 253, 276,
	29, 806, 23, 0, 0, 529, 0, 521, 522, 525,
	528, 28, 288, 0, 293, 292, 284, 0, 300, 0,
	0, 0, 304, 0, 306, 307, 0, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 393,
	394, 395, 396, 397, 398, 366, 0, 385, 0, 434,
	435, 436, 437, 438, 439, 440, 295, 28, 0, 408,
	0, 448, 0, 0, 0, 0, 0, 0, 0, 291,
	0, 494, 0, 464, 0, 465, 466, 467, 468, 469,
	470, 471, 0, 295, 0, 0, 46, 0, 351, 0,
	0, 0, 0, 0, 0, 340, 0, 0, 343, 0,
	0, 0, 0, 334, 0, 0, 354, 758, 336, 0,
	338, 339, -2, 0, 0, 0, 42, 43, 0, 49,
	785, 51, 52, 0, 0, 0, 160, 573, 574, 575,
	571, 188, 0, 143, 139, 85, 86, 87, 132, 89,
	132, 132, 132, 132, 157, 157, 157, 157, 115, 116,
	117, 118, 119, 0, 0, 102, 132, 132, 132, 106,
	122, 123, 124, 125, 126, 127, 128, 129, 90, 91,
	92, 93, 94, 95, 96, 134, 134, 134, 136, 136,
	602, 65, 0, 73, 0, 808, 0, 808, 78, 0,
	204, 0, 223, 579, 0, 808, 226, 227, 353, 610,
	611, 231, 232, 233, 234, 235, 236, 237, 238, 243,
	246, 260, 254, 255, 248, 533, 0, 0, 0, 0,
	0, 524, 526, 527, 532, 31, 291, 0, 513, 0,
	0, 0, 294, 26, 361, 362, 364, 386, 0, 388,
	390, 305, 301, 0, 503, -2, 371, 372, 401, 402,
	405, 0, 406, 0, 0, 0, 0, 399, 376, 378,
	379, 380, 381, 382, 0, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 485, 132, 487, 489, 492, 432, 483, 484,
	433, 0, 0, 0, 296, 297, 407, 0, 560, 28,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 0,
	500, 497, 0, 0, 473, 0, 0, 0, 0, 0,
	0, 350, 358, 562, 0, 311, 329, 331, 0, 326,
	341, 342, 344, 0, 346, 0, 348, 349, 315, 316,
	317, 0, 0, 0, 0, 337, 358, 0, 358, 45,
	566, 50, 0, 0, 55, 56, 567, 568, 569, 0,
	79, 189, 191, 194, 195, 196, 81, 82, 0, 0,
	0, 0, 0, 183, 184, 146, 144, 0, 141, 140,
	88, 0, 157, 157, 109, 110, 160, 0, 160, 160,
	160, 0, 0, 103, 104, 105, 97, 0, 98, 99,
	100, 0, 101, 0, 0, 808, 67, 0, 71, 72,
	68, 581, 69, 807, 0, 0, 594, 205, 584, 585,
	586, 587, 588, 589, 590, 591, 592, 593, 0, 222,
	808, 225, 263, 0, 0, 0, 530, 531, 0, 523,
	24, 0, 576, 577, 514, 515, 308, 387, 389, 391,
	0, 295, 0, 0, 373, 399, 377, 0, 374, 0,
	0, 0, 486, 488, 490, 368, 445, 0, 0, 409,
	-2, 449, 450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 520, 0, 498, 0, 0, 463, 474, 475,
	476, 477, 32, 0, 0, -2, 0, 0, 520, 0,
	0, 0, 323, 330, 0, 0, 324, 0, 325, 345,
	347, 0, 0, 0, 0, 321, 520, 358, 41, 53,
	54, 0, 0, 60, 161, 0, 192, 0, 0, 178,
	0, 0, 181, 182, 153, 0, 145, 84, 142, 0,
	160, 160, 111, 0, 112, 113, 114, 0, 130, 0,
	0, 0, 0, 603, 66, 74, 75, 0, 197, 807,
	0, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 807, 0, 0, 807, 595, 596, 597, 598,
	0, 224, 245, 0, 0, 261, 262, 534, 0, 25,
	358, 0, 302, 504, 0, 403, 0, 375, 0, 400,
	383, 491, 446, 298, 0, 0, 0, 0, 0, 503,
	0, 0, 0, 495, 462, 501, 0, 34, 545, 32,
	535, 556, 558, 0, 28, 0, 541, 0, 528, 563,
	359, 564, 327, 0, 332, 0, 0, 0, 335, 0,
	528, 40, 57, 58, 59, 190, 193, 0, 185, 132,
	179, 180, 155, 0, 147, 148, 149, 150, 151, 152,
	133, 107, 108, 158, 159, 157, 0, 157, 0, 137,
	0, 808, 0, 0, 198, 0, 199, 201, 202, 203,
	0, 264, 265, 516, 309, 447, 404, 384, 451, 453,
	452, 454, 0, 0, 457, 0, 0, 0, 0, 0,
	499, 547, 0, 35, 0, 559, -2, 0, 0, 0,
	47, 38, 0, 319, 0, 0, 0, 354, 322, 39,
	170, 0, 187, 162, 156, 0, 160, 131, 160, 0,
	0, 64, 76, 77, 0, 0, 518, 0, 0, 0,
	0, 0, 478, 461, 496, 33, 549, 0, 557, 0,
	-2, 0, 543, 542, 0, 328, 355, 356, 357, 318,
	169, 171, 0, 176, 0, 186, 167, 0, 164, 166,
	154, 120, 121, 135, 138, 0, 0, 27, 0, 0,
	455, 456, 458, 459, 0, 0, 0, 0, 160, 0,
	552, 0, 0, 538, 28, 0, 320, 172, 173, 0,
	177, 175, 83, 0, 163, 165, 70, 0, 218, 0,
	519, 517, 460, 0, 0, 0, 548, 0, 358, 0,
	0, 546, -2, 544, 174, 168, 73, 217, 0, 0,
	479, 0, 482, 554, 0, 550, 551, 553, 200, 219,
	0, 480, 0, 0, 0, 358, 0, 0, 555, 0,
	481, 0, 0, 220, 221,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	56, 58, 99, 97, 57, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 262,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 263, 3, 264, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:325
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:330
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:331
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:335
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:359
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:377
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:404
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:410
		{
			yyVAL.insertOptions = InsertOptions{}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:414
		{
			yyVAL.insertOptions = InsertOptions{
				OnDup:      OnDup(yyDollar[2].updateExprs),
				OnConflict: yyDollar[3].onConflict,
			}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:423
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.Options = yyDollar[7].insertOptions
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:435
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].insertOptions.OnDup))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, Options: yyDollar[8].insertOptions}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.str = InsertStr
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:451
		{
			yyVAL.str = ReplaceStr
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:457
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:476
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:481
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:485
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:490
		{
			yyVAL.partitions = nil
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:494
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:528
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:560
		{
			yyVAL.str = SessionStr
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
			yyVAL.str = GlobalStr
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:570
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:575
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:580
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:584
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:588
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:600
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:605
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:609
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:615
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:620
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:625
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:636
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:642
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:648
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:655
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:662
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:667
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:671
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:677
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:896
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:901
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:905
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:910
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:914
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:922
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:926
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:932
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:949
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:959
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:972
		{
			yyVAL.optVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:980
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1001
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1023
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1032
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1036
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1049
		{
			yyVAL.colKeyOpt = colKey
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1062
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1072
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1076
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1096
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1107
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1117
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1121
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1125
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1139
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1159
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1164
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1172
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = yyDollar[1].str
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1208
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1212
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1216
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1220
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1233
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1243
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1248
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1253
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1257
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1276
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1286
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1292
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1296
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1308
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1316
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1321
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1333
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1343
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1387
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1391
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1411
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1465
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.str = "extended "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1481
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1485
		{
			yyVAL.str = "full "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1491
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1499
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1505
		{
			yyVAL.showFilter = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1509
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1513
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1519
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1523
		{
			yyVAL.str = SessionStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1527
		{
			yyVAL.str = GlobalStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Begin{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Begin{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &Commit{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &Rollback{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[2].statement}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[3].statement, Analyze: true}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &OtherRead{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1592
		{
			setAllowComments(yylex, true)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1596
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1602
		{
			yyVAL.bytes2 = nil
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1606
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = UnionStr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1616
		{
			yyVAL.str = UnionAllStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1620
		{
			yyVAL.str = UnionDistinctStr
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1625
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1629
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = SQLCacheStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = DistinctStr
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1647
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1651
		{
			yyVAL.str = StraightJoinHint
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1656
		{
			yyVAL.selectExprs = nil
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1666
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1670
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1684
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1688
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1693
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1701
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1708
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1713
		{
			yyVAL.tableExprs = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1727
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1741
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1745
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1751
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1755
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1761
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1765
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1788
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1792
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1796
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1808
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1812
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1818
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1820
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1823
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1828
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1832
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1836
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1853
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.str = JoinStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = StraightJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = LeftJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = LeftJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1877
		{
			yyVAL.str = RightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.str = RightJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.str = NaturalJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1891
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1905
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1920
		{
			yyVAL.indexHints = nil
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1924
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1928
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1932
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1937
		{
			yyVAL.expr = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1941
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1959
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1963
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1967
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1977
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1981
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1987
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2001
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2009
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2021
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2027
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2031
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2035
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2047
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2051
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2055
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.str = IsNullStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2065
		{
			yyVAL.str = IsNotNullStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.str = IsTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = IsNotTrueStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = IsFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = IsNotFalseStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.str = EqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = LessThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = GreaterThanStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.str = LessEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.str = GreaterEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.str = NotEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2116
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2120
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.colTuple = &ConvertExpr{Expr: NewStrVal(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2138
		{
			yyVAL.colTuple = Array(yyDollar[3].exprs)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			// this is an array literal ('{a,b,c}', etc)
			// TODO this is weird and ugly but I need those quotes to be passed through
			tmp := make([]byte, len(yyDollar[1].bytes)+2)
			tmp[0] = '\''
			tmp[len(yyDollar[1].bytes)+1] = '\''
			copy(tmp[1:], yyDollar[1].bytes)
			yyVAL.colTuple = ListArg(tmp)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			// this is a positional parameter ($1, etc)
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2165
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2175
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2187
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2191
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2203
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2207
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2211
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2215
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2219
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2223
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2227
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2239
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2243
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2247
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2251
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2259
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2263
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2267
		{
			yyVAL.expr = &FunctionArgAssignmentExpr{Argument: yyDollar[1].expr, Operator: FuncArgAssignStr, Value: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2271
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2275
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2279
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2287
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2301
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2305
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2309
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("array"), Exprs: SelectExprs{&AliasedExpr{Expr: yyDollar[2].subquery}}}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2361
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2365
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2369
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2373
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 458:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2385
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 459:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2389
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 460:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2393
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 461:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2397
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2479
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2483
		{
			yyVAL.str = BooleanModeStr
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 481:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2495
		{
			yyVAL.str = QueryExpansionStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2501
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.convertType = &ConvertType{Type: "boolean"}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2519
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2527
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2535
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].convertType.Type + "[]"}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2544
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2548
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2553
		{
			yyVAL.str = string("")
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2557
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2567
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2573
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = nil
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2588
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2592
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2596
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2610
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &NullVal{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2654
		{
			yyVAL.exprs = nil
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2672
		{
			yyVAL.orderBy = nil
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2676
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2686
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2697
		{
			yyVAL.str = AscScr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.str = AscScr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2705
		{
			yyVAL.str = DescScr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2710
		{
			yyVAL.limit = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2718
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2722
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2727
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2731
		{
			yyVAL.str = ForUpdateStr
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2735
		{
			yyVAL.str = ShareModeStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2748
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2752
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2761
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2765
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2769
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2776
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2780
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2784
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2788
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2793
		{
			yyVAL.updateExprs = nil
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2797
		{
			yyVAL.updateExprs = yyDollar[4].updateExprs
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2802
		{
			yyVAL.onConflict = nil
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.onConflict = &OnConflict{Target: yyDollar[2].conflictTarget, Action: yyDollar[3].conflictAction}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2811
		{
			yyVAL.conflictTarget = nil
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2815
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Columns: yyDollar[1].columns,
				Collate: yyDollar[2].str,
				Where:   NewWhere(WhereStr, yyDollar[3].expr),
			}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Constraint: yyDollar[3].colIdent,
				Columns:    Columns{},
				Collate:    "",
				Where:      nil,
			}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2838
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2845
		{
			yyVAL.conflictAction = nil
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2849
		{
			yyVAL.conflictAction = &ConflictAction{
				Updates: yyDollar[4].updateExprs,
				Where:   NewWhere(WhereStr, yyDollar[5].expr),
			}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2858
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2862
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2878
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2894
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2898
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2904
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2914
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2920
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2924
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2928
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2935
		{
			yyVAL.bytes = []byte("charset")
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2950
		{
			yyVAL.expr = &Default{}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2959
		{
			yyVAL.byt = 0
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2961
		{
			yyVAL.byt = 1
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2964
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2969
		{
			yyVAL.str = ""
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2971
		{
			yyVAL.str = IgnoreStr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2975
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2977
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2979
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2981
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2985
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2989
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2993
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2996
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3006
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3009
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3013
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3016
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3018
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3022
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3026
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3050
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3269
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			decNesting(yylex)
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3283
		{
			forceEOF(yylex)
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3288
		{
			forceEOF(yylex)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			forceEOF(yylex)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
