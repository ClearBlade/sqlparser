// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import (
	"fmt"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func init() {
	yyErrorVerbose = true
}

//line sql.y:61
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	onConflict        *OnConflict
	conflictTarget    *ConflictTarget
	conflictAction    *ConflictAction
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CONFLICT = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const NOTHING = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const DO = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const INTERVAL = 57436
const TYPECAST = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const JSON_SUBOBJECT_OP = 57440
const JSON_UNQUOTE_SUBOBJECT_OP = 57441
const JSON_TXT_STR_EXISTS_OP = 57442
const JSON_ANY_KEYS_EXIST_OP = 57443
const JSON_ALL_KEYS_EXIST_OP = 57444
const JSON_LEFT_CONTAINS_RIGHT_OP = 57445
const JSON_RIGHT_CONTAINS_LEFT_OP = 57446
const FUNCTION_ARG_ASSIGNMENT = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const UNIQUE = 57461
const PRIMARY = 57462
const COLUMN = 57463
const CONSTRAINT = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const SHOW = 57469
const DESCRIBE = 57470
const EXPLAIN = 57471
const DATE = 57472
const ESCAPE = 57473
const REPAIR = 57474
const OPTIMIZE = 57475
const TRUNCATE = 57476
const MAXVALUE = 57477
const PARTITION = 57478
const REORGANIZE = 57479
const LESS = 57480
const THAN = 57481
const PROCEDURE = 57482
const TRIGGER = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const ARRAY = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const DATABASES = 57541
const TABLES = 57542
const VITESS_KEYSPACES = 57543
const VITESS_SHARDS = 57544
const VITESS_TABLETS = 57545
const VSCHEMA_TABLES = 57546
const EXTENDED = 57547
const FULL = 57548
const PROCESSLIST = 57549
const NAMES = 57550
const CHARSET = 57551
const GLOBAL = 57552
const SESSION = 57553
const ISOLATION = 57554
const LEVEL = 57555
const READ = 57556
const WRITE = 57557
const ONLY = 57558
const REPEATABLE = 57559
const COMMITTED = 57560
const UNCOMMITTED = 57561
const SERIALIZABLE = 57562
const CURRENT_TIMESTAMP = 57563
const DATABASE = 57564
const CURRENT_DATE = 57565
const CURRENT_TIME = 57566
const LOCALTIME = 57567
const LOCALTIMESTAMP = 57568
const UTC_DATE = 57569
const UTC_TIME = 57570
const UTC_TIMESTAMP = 57571
const REPLACE = 57572
const CONVERT = 57573
const CAST = 57574
const SUBSTR = 57575
const SUBSTRING = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const MATCH = 57579
const AGAINST = 57580
const BOOLEAN = 57581
const LANGUAGE = 57582
const WITH = 57583
const QUERY = 57584
const EXPANSION = 57585
const UNUSED = 57586

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONFLICT",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NOTHING",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"DO",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"TYPECAST",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"FUNCTION_ARG_ASSIGNMENT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	161, 265,
	162, 265,
	-2, 255,
	-1, 243,
	112, 607,
	-2, 603,
	-1, 244,
	112, 608,
	-2, 604,
	-1, 300,
	5, 28,
	-2, 535,
	-1, 320,
	82, 769,
	-2, 60,
	-1, 321,
	82, 730,
	-2, 61,
	-1, 326,
	82, 714,
	-2, 569,
	-1, 328,
	82, 751,
	-2, 571,
	-1, 610,
	54, 43,
	57, 43,
	-2, 45,
	-1, 740,
	112, 610,
	-2, 606,
	-1, 817,
	5, 29,
	-2, 536,
	-1, 971,
	5, 29,
	-2, 406,
	-1, 1000,
	5, 28,
	-2, 538,
	-1, 1218,
	5, 29,
	-2, 539,
}

const yyPrivate = 57344

const yyLast = 11501

var yyAct = [...]int16{
	274, 48, 1304, 907, 681, 823, 248, 546, 241, 1265,
	1159, 319, 841, 863, 887, 1065, 602, 1130, 604, 222,
	1135, 862, 217, 54, 859, 1023, 824, 1007, 576, 1068,
	1056, 790, 873, 620, 782, 787, 1012, 577, 325, 298,
	476, 806, 273, 470, 48, 897, 901, 456, 881, 48,
	742, 425, 619, 606, 821, 591, 959, 227, 246, 306,
	482, 939, 301, 776, 314, 490, 231, 781, 218, 219,
	220, 3, 316, 61, 1110, 962, 307, 954, 1289, 508,
	507, 517, 518, 510, 511, 512, 513, 514, 515, 516,
	509, 53, 235, 524, 792, 1332, 1322, 523, 469, 519,
	520, 521, 522, 1330, 1311, 1328, 908, 1321, 525, 1310,
	1121, 561, 1210, 429, 1274, 621, 1031, 622, 250, 1030,
	221, 854, 1032, 58, 449, 1154, 1155, 1153, 1165, 1166,
	1167, 855, 856, 300, 707, 1170, 1168, 190, 186, 187,
	188, 708, 464, 237, 1047, 2, 880, 1235, 454, 60,
	62, 166, 167, 168, 51, 888, 431, 965, 964, 745,
	214, 460, 461, 747, 1266, 1329, 1327, 311, 1305, 1089,
	822, 1129, 842, 844, 439, 789, 432, 1268, 184, 183,
	438, 184, 689, 305, 680, 1022, 1021, 1020, 244, 215,
	1134, 427, 435, 193, 185, 451, 1097, 453, 455, 455,
	455, 455, 1272, 455, 875, 979, 1086, 951, 820, 875,
	455, 1076, 1088, 714, 494, 67, 322, 48, 304, 953,
	181, 1174, 450, 452, 67, 860, 711, 67, 48, 875,
	1093, 489, 975, 1296, 1041, 974, 934, 488, 487, 1184,
	1010, 1074, 751, 534, 1290, 623, 536, 189, 1123, 478,
	488, 487, 67, 1267, 489, 843, 749, 750, 748, 426,
	537, 538, 539, 540, 541, 542, 543, 489, 807, 807,
	1175, 986, 684, 544, 1045, 548, 536, 550, 551, 552,
	553, 554, 555, 556, 557, 310, 560, 562, 562, 562,
	562, 562, 562, 562, 562, 570, 571, 572, 573, 479,
	579, 1197, 48, 962, 448, 1169, 874, 746, 1092, 1273,
	1271, 874, 603, 1075, 1087, 1309, 1085, 935, 1080, 1077,
	1070, 1071, 1078, 1073, 1072, 732, 734, 735, 487, 1299,
	733, 874, 484, 433, 434, 1079, 872, 870, 1294, 1314,
	871, 1082, 578, 586, 489, 877, 545, 457, 458, 459,
	878, 462, 480, 1241, 1240, 67, 67, 181, 466, 976,
	1060, 67, 467, 181, 535, 322, 584, 473, 477, 441,
	442, 443, 67, 580, 67, 182, 583, 783, 611, 784,
	67, 1059, 67, 545, 495, 1048, 181, 181, 181, 181,
	617, 181, 717, 718, 549, 948, 949, 950, 181, 563,
	564, 565, 566, 567, 568, 569, 524, 1315, 488, 487,
	523, 1297, 519, 520, 521, 522, 488, 487, 547, 1255,
	1238, 525, 1192, 1125, 1057, 489, 181, 1162, 559, 455,
	310, 469, 469, 489, 1318, 469, 1278, 455, 302, 488,
	487, 1216, 1302, 1216, 469, 1216, 1259, 455, 455, 455,
	455, 455, 455, 455, 455, 1161, 489, 1232, 1231, 1150,
	469, 455, 455, 1216, 1217, 1277, 508, 507, 517, 518,
	510, 511, 512, 513, 514, 515, 516, 509, 1181, 1180,
	524, 1177, 1178, 1171, 523, 1042, 519, 520, 521, 522,
	181, 67, 1033, 67, 631, 525, 1177, 1176, 719, 910,
	67, 67, 67, 786, 713, 741, 181, 695, 752, 753,
	969, 469, 181, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 694, 740, 785, 588, 469, 48, 819, 469,
	743, 685, 739, 712, 272, 743, 743, 721, 683, 548,
	792, 469, 1008, 755, 756, 24, 738, 736, 488, 487,
	754, 799, 802, 678, 630, 629, 468, 808, 523, 614,
	519, 520, 521, 522, 446, 489, 179, 679, 440, 525,
	1005, 426, 1136, 792, 299, 688, 1008, 588, 1009, 311,
	311, 311, 311, 311, 825, 696, 697, 698, 699, 700,
	701, 702, 703, 55, 603, 51, 845, 811, 545, 704,
	705, 1100, 615, 311, 815, 613, 744, 181, 804, 1183,
	794, 744, 744, 67, 67, 181, 981, 67, 851, 849,
	67, 729, 730, 588, 1009, 181, 181, 181, 181, 181,
	181, 181, 181, 848, 1179, 969, 613, 587, 826, 181,
	181, 829, 24, 978, 67, 838, 24, 969, 889, 890,
	891, 846, 24, 1076, 322, 847, 827, 828, 1034, 830,
	181, 852, 980, 588, 67, 794, 853, 864, 969, 1008,
	181, 999, 867, 616, 455, 299, 455, 883, 884, 885,
	886, 228, 547, 1074, 455, 715, 797, 798, 22, 977,
	51, 1245, 51, 894, 895, 896, 51, 310, 310, 310,
	310, 310, 51, 324, 882, 1144, 1037, 902, 898, 430,
	899, 900, 310, 547, 903, 893, 795, 796, 892, 170,
	1127, 310, 803, 1013, 1014, 682, 905, 1164, 727, 1136,
	952, 51, 324, 324, 324, 324, 810, 324, 812, 813,
	1061, 1016, 692, 740, 324, 226, 940, 575, 956, 957,
	958, 465, 739, 941, 835, 1075, 1019, 858, 1018, 836,
	1080, 1077, 1070, 1071, 1078, 1073, 1072, 67, 67, 67,
	67, 67, 492, 833, 832, 831, 1326, 1079, 834, 67,
	1320, 743, 67, 1069, 232, 233, 67, 509, 1096, 955,
	524, 67, 67, 936, 523, 181, 519, 520, 521, 522,
	837, 483, 597, 598, 1325, 525, 579, 946, 181, 1001,
	1213, 945, 301, 1006, 1256, 1052, 481, 963, 471, 628,
	447, 1044, 911, 1301, 913, 263, 262, 265, 266, 267,
	268, 472, 932, 264, 269, 1212, 582, 985, 1300, 311,
	1258, 1038, 1220, 998, 912, 1246, 937, 938, 578, 477,
	691, 1004, 324, 601, 483, 1026, 1017, 744, 625, 67,
	229, 230, 181, 814, 181, 1025, 1035, 1027, 67, 223,
	944, 67, 181, 1283, 224, 55, 1282, 1028, 943, 1248,
	1000, 1009, 485, 300, 1292, 1236, 710, 57, 1049, 1050,
	59, 612, 947, 52, 1039, 1040, 1, 455, 909, 1064,
	864, 918, 1051, 1303, 1053, 1054, 1055, 1264, 1158, 869,
	861, 424, 169, 1295, 1058, 868, 512, 513, 514, 515,
	516, 509, 455, 1270, 524, 1234, 970, 1067, 523, 876,
	519, 520, 521, 522, 1046, 879, 1081, 1163, 1298, 525,
	1043, 987, 635, 633, 634, 632, 1066, 637, 636, 201,
	317, 600, 1105, 624, 968, 904, 486, 310, 171, 1108,
	1109, 1084, 1083, 324, 914, 1091, 706, 933, 463, 203,
	983, 324, 533, 942, 1029, 323, 1116, 1117, 1103, 1119,
	1120, 324, 324, 324, 324, 324, 324, 324, 324, 1102,
	579, 1112, 48, 181, 994, 324, 324, 1122, 181, 181,
	1114, 1137, 825, 1106, 993, 825, 1126, 1104, 740, 1128,
	574, 1146, 1147, 1148, 581, 716, 723, 1118, 1132, 475,
	1281, 1139, 1138, 1247, 181, 1140, 492, 67, 1113, 324,
	1115, 984, 578, 558, 805, 249, 720, 731, 261, 1151,
	1157, 181, 258, 260, 1152, 1063, 1156, 593, 596, 597,
	598, 594, 259, 595, 599, 722, 496, 1013, 1014, 247,
	239, 309, 592, 1133, 1172, 1173, 590, 589, 1015, 1011,
	1090, 308, 864, 1099, 864, 1209, 593, 596, 597, 598,
	594, 1185, 595, 599, 181, 181, 1288, 181, 547, 800,
	800, 311, 726, 26, 1187, 800, 56, 1190, 234, 19,
	18, 17, 791, 793, 20, 21, 1198, 1195, 16, 15,
	181, 14, 1208, 67, 67, 30, 13, 1194, 12, 809,
	1124, 67, 800, 11, 10, 9, 8, 7, 6, 5,
	181, 4, 225, 23, 0, 1102, 816, 817, 818, 0,
	0, 0, 0, 1141, 1142, 0, 1214, 1143, 1221, 1223,
	1145, 324, 1224, 0, 1225, 1226, 1227, 0, 1228, 840,
	1035, 1230, 0, 0, 324, 0, 0, 0, 0, 0,
	0, 0, 0, 455, 0, 0, 181, 0, 0, 0,
	0, 1237, 0, 1239, 0, 181, 0, 0, 1244, 1243,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 1233,
	0, 0, 1249, 1250, 0, 1251, 1252, 1253, 0, 310,
	0, 0, 0, 181, 0, 181, 181, 0, 324, 0,
	324, 1066, 864, 0, 0, 0, 0, 1193, 324, 0,
	0, 1263, 0, 1269, 0, 0, 0, 1280, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 181, 324,
	0, 0, 1275, 1279, 1276, 0, 0, 0, 1291, 1211,
	0, 181, 67, 0, 1293, 0, 0, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 67,
	0, 1307, 0, 0, 0, 0, 0, 0, 1313, 825,
	0, 0, 0, 0, 322, 0, 0, 1316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 1312,
	1323, 1324, 199, 181, 0, 0, 0, 0, 0, 0,
	1331, 1242, 0, 181, 0, 181, 181, 181, 67, 181,
	1333, 0, 0, 0, 0, 181, 0, 474, 209, 0,
	0, 0, 0, 966, 967, 0, 0, 0, 0, 996,
	0, 971, 972, 973, 1002, 1003, 0, 0, 0, 0,
	982, 181, 181, 181, 65, 988, 0, 989, 990, 991,
	992, 0, 0, 65, 0, 0, 213, 0, 0, 924,
	1024, 0, 0, 0, 0, 0, 0, 194, 0, 0,
	0, 0, 0, 0, 923, 181, 0, 324, 238, 0,
	0, 65, 196, 0, 0, 0, 0, 0, 0, 202,
	198, 181, 0, 0, 0, 0, 1306, 547, 0, 312,
	0, 0, 0, 928, 181, 0, 0, 0, 0, 0,
	0, 922, 0, 0, 0, 181, 200, 0, 0, 204,
	1062, 324, 0, 324, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1207, 303, 181, 0, 324, 0, 919, 916,
	917, 0, 915, 0, 0, 197, 0, 205, 206, 207,
	208, 212, 0, 0, 65, 65, 211, 210, 0, 0,
	65, 0, 0, 0, 324, 0, 0, 926, 929, 0,
	0, 65, 0, 65, 0, 1111, 0, 0, 0, 65,
	0, 65, 1131, 0, 0, 0, 0, 0, 0, 0,
	800, 1024, 0, 800, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 508, 507, 517, 518,
	510, 511, 512, 513, 514, 515, 516, 509, 0, 324,
	524, 324, 1160, 0, 523, 920, 519, 520, 521, 522,
	1149, 0, 0, 0, 0, 525, 0, 315, 0, 0,
	0, 0, 428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 436, 1186, 437, 0, 0, 0, 0,
	0, 444, 925, 445, 0, 0, 0, 1188, 0, 0,
	0, 0, 0, 0, 1191, 927, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 585, 0, 0, 0, 0, 0, 0, 65,
	608, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	1196, 0, 0, 0, 1215, 0, 0, 0, 0, 1219,
	1199, 1200, 1201, 1202, 0, 0, 1205, 0, 0, 1131,
	0, 1131, 1131, 1131, 0, 1229, 0, 0, 0, 0,
	1218, 324, 0, 0, 0, 1222, 510, 511, 512, 513,
	514, 515, 516, 509, 0, 0, 524, 0, 0, 0,
	523, 0, 519, 520, 521, 522, 0, 324, 324, 324,
	0, 525, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 508, 507, 517, 518, 510, 511,
	512, 513, 514, 515, 516, 509, 0, 0, 524, 0,
	0, 1257, 523, 0, 519, 520, 521, 522, 0, 0,
	0, 0, 0, 525, 0, 0, 1254, 1160, 0, 0,
	0, 0, 65, 65, 0, 0, 65, 0, 0, 65,
	1131, 0, 1260, 1261, 1262, 0, 0, 0, 0, 960,
	0, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 0, 1284, 1285, 1286, 1287,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 0,
	0, 0, 0, 65, 0, 0, 0, 800, 0, 0,
	0, 0, 585, 0, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 1308, 0, 0, 0, 0,
	0, 0, 0, 0, 686, 687, 0, 0, 690, 0,
	1317, 693, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 238, 0, 0, 709, 0, 0, 238, 238,
	1335, 1336, 801, 801, 238, 640, 0, 0, 801, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 238, 238,
	238, 238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 801, 65, 65, 65, 65,
	65, 0, 0, 0, 653, 0, 0, 0, 839, 0,
	0, 65, 0, 0, 0, 608, 0, 0, 0, 0,
	65, 65, 0, 0, 0, 666, 667, 668, 669, 670,
	671, 672, 0, 673, 674, 675, 676, 677, 654, 655,
	656, 657, 638, 639, 0, 0, 641, 778, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 658, 659,
	660, 661, 662, 663, 664, 665, 0, 0, 0, 0,
	779, 780, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 24, 25, 49, 27, 28, 0, 0, 65, 0,
	24, 25, 49, 27, 28, 0, 0, 65, 0, 0,
	65, 44, 0, 850, 0, 0, 29, 0, 0, 0,
	44, 0, 0, 777, 0, 29, 0, 0, 0, 0,
	0, 0, 585, 0, 0, 0, 38, 0, 0, 0,
	0, 51, 0, 0, 238, 38, 0, 0, 0, 0,
	51, 24, 25, 49, 27, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 0, 0, 0, 0, 29, 0, 0, 0,
	906, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 931, 0, 0, 0, 38, 0, 0, 0,
	0, 51, 0, 0, 0, 0, 238, 0, 31, 32,
	34, 33, 36, 0, 0, 193, 0, 31, 32, 34,
	33, 216, 238, 0, 0, 0, 0, 0, 0, 37,
	45, 43, 0, 0, 46, 47, 35, 0, 37, 45,
	43, 0, 0, 46, 47, 35, 0, 0, 39, 40,
	0, 41, 42, 0, 0, 0, 0, 39, 40, 0,
	41, 42, 0, 0, 0, 0, 65, 0, 31, 32,
	34, 33, 36, 0, 0, 0, 0, 1206, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	45, 43, 0, 0, 46, 47, 35, 0, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 40,
	0, 41, 42, 508, 507, 517, 518, 510, 511, 512,
	513, 514, 515, 516, 509, 0, 0, 524, 0, 0,
	0, 523, 50, 519, 520, 521, 522, 0, 0, 0,
	0, 50, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1094, 1095, 0, 0, 0, 0, 0, 0,
	65, 0, 1203, 469, 0, 0, 0, 0, 0, 0,
	238, 0, 0, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 238, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 585, 508, 507,
	517, 518, 510, 511, 512, 513, 514, 515, 516, 509,
	0, 0, 524, 0, 653, 0, 523, 0, 519, 520,
	521, 522, 0, 801, 0, 0, 801, 525, 0, 0,
	0, 0, 0, 0, 0, 666, 667, 668, 669, 670,
	671, 672, 1098, 673, 674, 675, 676, 677, 654, 655,
	656, 657, 638, 639, 0, 0, 641, 0, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 658, 659,
	660, 661, 662, 663, 664, 665, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 0, 498, 0, 506, 0,
	0, 0, 0, 0, 526, 527, 528, 529, 530, 531,
	532, 65, 499, 500, 497, 508, 507, 517, 518, 510,
	511, 512, 513, 514, 515, 516, 509, 1107, 65, 524,
	0, 0, 0, 523, 0, 519, 520, 521, 522, 501,
	502, 503, 504, 505, 525, 0, 0, 508, 507, 517,
	518, 510, 511, 512, 513, 514, 515, 516, 509, 0,
	0, 524, 0, 0, 0, 523, 0, 519, 520, 521,
	522, 1182, 0, 0, 0, 0, 525, 608, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1189, 0, 0, 0, 0, 413, 403,
	0, 374, 415, 352, 366, 423, 367, 368, 396, 337,
	382, 116, 364, 340, 0, 355, 332, 361, 333, 353,
	376, 84, 379, 351, 405, 385, 98, 390, 421, 100,
	391, 0, 133, 109, 0, 0, 378, 407, 380, 401,
	373, 397, 343, 389, 416, 365, 394, 417, 0, 0,
	0, 0, 180, 0, 865, 866, 0, 0, 0, 0,
	77, 0, 393, 412, 363, 395, 330, 392, 0, 335,
	338, 422, 410, 358, 359, 1036, 0, 0, 0, 0,
	0, 0, 377, 381, 398, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 388, 0, 0, 0,
	339, 336, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 357, 399,
	801, 329, 402, 408, 372, 155, 411, 370, 369, 414,
	122, 0, 0, 136, 89, 88, 97, 406, 354, 362,
	80, 360, 128, 118, 148, 387, 119, 127, 101, 140,
	123, 147, 156, 157, 138, 154, 69, 137, 146, 78,
	130, 71, 144, 135, 107, 93, 94, 70, 0, 126,
	83, 87, 82, 115, 141, 142, 81, 164, 74, 153,
	73, 75, 152, 114, 139, 145, 108, 105, 72, 143,
	106, 104, 96, 85, 90, 120, 103, 121, 91, 111,
	110, 112, 331, 0, 334, 0, 134, 150, 165, 350,
	409, 158, 159, 160, 161, 0, 0, 0, 113, 76,
	92, 131, 95, 102, 125, 163, 117, 129, 79, 149,
	132, 346, 349, 344, 345, 383, 384, 418, 419, 420,
	400, 341, 0, 347, 348, 0, 404, 386, 68, 0,
	99, 162, 124, 86, 151, 413, 403, 0, 374, 415,
	352, 366, 423, 367, 368, 396, 337, 382, 116, 364,
	340, 0, 355, 332, 361, 333, 353, 376, 84, 379,
	351, 405, 385, 98, 390, 421, 100, 391, 0, 133,
	109, 0, 0, 378, 407, 380, 401, 373, 397, 343,
	389, 416, 365, 394, 417, 0, 0, 0, 0, 180,
	0, 865, 866, 0, 0, 0, 0, 77, 0, 393,
	412, 363, 395, 330, 392, 0, 335, 338, 422, 410,
	358, 359, 0, 0, 0, 0, 0, 0, 0, 377,
	381, 398, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 356, 0, 388, 0, 0, 0, 339, 336, 0,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 357, 399, 0, 329, 402,
	408, 372, 155, 411, 370, 369, 414, 122, 0, 0,
	136, 89, 88, 97, 406, 354, 362, 80, 360, 128,
	118, 148, 387, 119, 127, 101, 140, 123, 147, 156,
	157, 138, 154, 69, 137, 146, 78, 130, 71, 144,
	135, 107, 93, 94, 70, 0, 126, 83, 87, 82,
	115, 141, 142, 81, 164, 74, 153, 73, 75, 152,
	114, 139, 145, 108, 105, 72, 143, 106, 104, 96,
	85, 90, 120, 103, 121, 91, 111, 110, 112, 331,
	0, 334, 0, 134, 150, 165, 350, 409, 158, 159,
	160, 161, 0, 0, 0, 113, 76, 92, 131, 95,
	102, 125, 163, 117, 129, 79, 149, 132, 346, 349,
	344, 345, 383, 384, 418, 419, 420, 400, 341, 0,
	347, 348, 0, 404, 386, 68, 0, 99, 162, 124,
	86, 151, 413, 403, 0, 374, 415, 352, 366, 423,
	367, 368, 396, 337, 382, 116, 364, 340, 0, 355,
	332, 361, 333, 353, 376, 84, 379, 351, 405, 385,
	98, 390, 421, 100, 391, 0, 133, 109, 0, 0,
	378, 407, 380, 401, 373, 397, 343, 389, 416, 365,
	394, 417, 0, 51, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 393, 412, 363, 395,
	330, 392, 0, 335, 338, 422, 410, 358, 359, 0,
	0, 0, 0, 0, 0, 0, 377, 381, 398, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	388, 0, 0, 0, 339, 336, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 357, 399, 0, 329, 402, 408, 372, 155,
	411, 370, 369, 414, 122, 0, 0, 136, 89, 88,
	97, 406, 354, 362, 80, 360, 128, 118, 148, 387,
	119, 127, 101, 140, 123, 147, 156, 157, 138, 154,
	69, 137, 146, 78, 130, 71, 144, 135, 107, 93,
	94, 70, 0, 126, 83, 87, 82, 115, 141, 142,
	81, 164, 74, 153, 73, 75, 152, 114, 139, 145,
	108, 105, 72, 143, 106, 104, 96, 85, 90, 120,
	103, 121, 91, 111, 110, 112, 331, 0, 334, 0,
	134, 150, 165, 350, 409, 158, 159, 160, 161, 0,
	0, 0, 113, 76, 92, 131, 95, 102, 125, 163,
	117, 129, 79, 149, 132, 346, 349, 344, 345, 383,
	384, 418, 419, 420, 400, 341, 0, 347, 348, 0,
	404, 386, 68, 0, 99, 162, 124, 86, 151, 413,
	403, 0, 374, 415, 352, 366, 423, 367, 368, 396,
	337, 382, 116, 364, 340, 0, 355, 332, 361, 333,
	353, 376, 84, 379, 351, 405, 385, 98, 390, 421,
	100, 391, 0, 133, 109, 0, 0, 378, 407, 380,
	401, 373, 397, 343, 389, 416, 365, 394, 417, 0,
	0, 0, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 393, 412, 363, 395, 330, 392, 0,
	335, 338, 422, 410, 358, 359, 0, 0, 0, 0,
	0, 0, 0, 377, 381, 398, 371, 0, 0, 0,
	0, 0, 0, 1101, 0, 356, 0, 388, 0, 0,
	0, 339, 336, 0, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 357,
	399, 0, 329, 402, 408, 372, 155, 411, 370, 369,
	414, 122, 0, 0, 136, 89, 88, 97, 406, 354,
	362, 80, 360, 128, 118, 148, 387, 119, 127, 101,
	140, 123, 147, 156, 157, 138, 154, 69, 137, 146,
	78, 130, 71, 144, 135, 107, 93, 94, 70, 0,
	126, 83, 87, 82, 115, 141, 142, 81, 164, 74,
	153, 73, 75, 152, 114, 139, 145, 108, 105, 72,
	143, 106, 104, 96, 85, 90, 120, 103, 121, 91,
	111, 110, 112, 331, 0, 334, 0, 134, 150, 165,
	350, 409, 158, 159, 160, 161, 0, 0, 0, 113,
	76, 92, 131, 95, 102, 125, 163, 117, 129, 79,
	149, 132, 346, 349, 344, 345, 383, 384, 418, 419,
	420, 400, 341, 0, 347, 348, 0, 404, 386, 68,
	0, 99, 162, 124, 86, 151, 413, 403, 0, 374,
	415, 352, 366, 423, 367, 368, 396, 337, 382, 116,
	364, 340, 0, 355, 332, 361, 333, 353, 376, 84,
	379, 351, 405, 385, 98, 390, 421, 100, 391, 0,
	133, 109, 0, 0, 378, 407, 380, 401, 373, 397,
	343, 389, 416, 365, 394, 417, 0, 0, 0, 0,
	243, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	393, 412, 363, 395, 330, 392, 0, 335, 338, 422,
	410, 358, 359, 0, 0, 0, 0, 0, 0, 0,
	377, 381, 398, 371, 0, 0, 0, 0, 0, 0,
	737, 0, 356, 0, 388, 0, 0, 0, 339, 336,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 357, 399, 0, 329,
	402, 408, 372, 155, 411, 370, 369, 414, 122, 0,
	0, 136, 89, 88, 97, 406, 354, 362, 80, 360,
	128, 118, 148, 387, 119, 127, 101, 140, 123, 147,
	156, 157, 138, 154, 69, 137, 146, 78, 130, 71,
	144, 135, 107, 93, 94, 70, 0, 126, 83, 87,
	82, 115, 141, 142, 81, 164, 74, 153, 73, 75,
	152, 114, 139, 145, 108, 105, 72, 143, 106, 104,
	96, 85, 90, 120, 103, 121, 91, 111, 110, 112,
	331, 0, 334, 0, 134, 150, 165, 350, 409, 158,
	159, 160, 161, 0, 0, 0, 113, 76, 92, 131,
	95, 102, 125, 163, 117, 129, 79, 149, 132, 346,
	349, 344, 345, 383, 384, 418, 419, 420, 400, 341,
	0, 347, 348, 0, 404, 386, 68, 0, 99, 162,
	124, 86, 151, 413, 403, 0, 374, 415, 352, 366,
	423, 367, 368, 396, 337, 382, 116, 364, 340, 0,
	355, 332, 361, 333, 353, 376, 84, 379, 351, 405,
	385, 98, 390, 421, 100, 391, 0, 133, 109, 0,
	0, 378, 407, 380, 401, 373, 397, 343, 389, 416,
	365, 394, 417, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 393, 412, 363,
	395, 330, 392, 0, 335, 338, 422, 410, 358, 359,
	0, 0, 0, 0, 0, 0, 0, 377, 381, 398,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 356,
	0, 388, 0, 0, 0, 339, 336, 0, 375, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 357, 399, 0, 329, 402, 408, 372,
	155, 411, 370, 369, 414, 122, 0, 0, 136, 89,
	88, 97, 406, 354, 362, 80, 360, 128, 118, 148,
	387, 119, 127, 101, 140, 123, 147, 156, 157, 138,
	154, 69, 137, 146, 78, 130, 71, 144, 135, 107,
	93, 94, 70, 0, 126, 83, 87, 82, 115, 141,
	142, 81, 164, 74, 153, 73, 327, 152, 114, 139,
	145, 108, 105, 72, 143, 106, 104, 96, 85, 90,
	120, 103, 121, 91, 111, 110, 112, 331, 0, 334,
	0, 134, 150, 165, 350, 409, 158, 159, 160, 161,
	0, 0, 0, 328, 326, 92, 131, 95, 102, 125,
	163, 117, 129, 79, 149, 132, 346, 349, 344, 345,
	383, 384, 418, 419, 420, 400, 341, 0, 347, 348,
	0, 404, 386, 68, 0, 99, 162, 124, 86, 151,
	413, 403, 0, 374, 415, 352, 366, 423, 367, 368,
	396, 337, 382, 116, 364, 340, 0, 355, 332, 361,
	333, 353, 376, 84, 379, 351, 405, 385, 98, 390,
	421, 100, 391, 0, 133, 109, 0, 0, 378, 407,
	380, 401, 373, 397, 343, 389, 416, 365, 394, 417,
	0, 0, 0, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 393, 412, 363, 395, 330, 392,
	0, 335, 338, 422, 410, 358, 359, 0, 0, 0,
	0, 0, 0, 0, 377, 381, 398, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 356, 0, 388, 0,
	0, 0, 339, 336, 0, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	357, 399, 0, 329, 402, 408, 372, 155, 411, 370,
	369, 414, 122, 0, 0, 136, 89, 88, 97, 406,
	354, 362, 80, 360, 128, 118, 148, 387, 119, 127,
	101, 140, 123, 147, 156, 157, 138, 154, 69, 137,
	146, 78, 130, 71, 144, 135, 107, 93, 94, 70,
	0, 126, 83, 87, 82, 115, 141, 142, 81, 164,
	74, 153, 73, 75, 152, 114, 139, 145, 108, 105,
	72, 143, 106, 104, 96, 85, 90, 120, 103, 121,
	91, 111, 110, 112, 331, 0, 334, 0, 134, 150,
	165, 350, 409, 158, 159, 160, 161, 0, 0, 0,
	113, 76, 92, 131, 95, 102, 125, 163, 117, 129,
	79, 149, 132, 346, 349, 344, 345, 383, 384, 418,
	419, 420, 400, 341, 0, 347, 348, 0, 404, 386,
	68, 0, 99, 162, 124, 86, 151, 413, 403, 0,
	374, 415, 352, 366, 423, 367, 368, 396, 337, 382,
	116, 364, 340, 0, 355, 332, 361, 333, 353, 376,
	84, 379, 351, 405, 385, 98, 390, 421, 100, 391,
	0, 133, 109, 0, 0, 378, 407, 380, 401, 373,
	397, 343, 389, 416, 365, 394, 417, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 393, 412, 363, 395, 330, 392, 0, 335, 338,
	422, 410, 358, 359, 0, 0, 0, 0, 0, 0,
	0, 377, 381, 398, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 356, 0, 388, 0, 0, 0, 339,
	336, 0, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 357, 399, 0,
	329, 402, 408, 372, 155, 411, 370, 369, 414, 122,
	0, 0, 136, 89, 88, 97, 406, 354, 362, 80,
	360, 128, 118, 148, 387, 119, 127, 101, 140, 123,
	147, 156, 157, 138, 154, 69, 137, 146, 78, 130,
	71, 144, 135, 107, 93, 94, 70, 0, 126, 83,
	87, 82, 115, 141, 142, 81, 164, 74, 153, 73,
	75, 152, 114, 139, 145, 108, 105, 72, 143, 106,
	104, 96, 85, 90, 120, 103, 121, 91, 111, 110,
	112, 331, 0, 334, 0, 134, 150, 165, 350, 409,
	158, 159, 160, 161, 0, 0, 0, 113, 76, 92,
	131, 95, 102, 125, 163, 117, 129, 79, 149, 132,
	346, 349, 344, 345, 383, 384, 418, 419, 420, 400,
	341, 0, 347, 348, 0, 404, 386, 68, 0, 99,
	162, 124, 86, 151, 413, 403, 0, 374, 415, 352,
	366, 423, 367, 368, 396, 337, 382, 116, 364, 340,
	0, 355, 332, 361, 333, 353, 376, 84, 379, 351,
	405, 385, 98, 390, 421, 100, 391, 0, 133, 109,
	0, 0, 378, 407, 380, 401, 373, 397, 343, 389,
	416, 365, 394, 417, 0, 0, 0, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 393, 412,
	363, 395, 330, 392, 0, 335, 338, 422, 410, 358,
	359, 0, 0, 0, 0, 0, 0, 0, 377, 381,
	398, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	356, 0, 388, 0, 0, 0, 339, 336, 0, 375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 0, 357, 399, 0, 329, 402, 408,
	372, 155, 411, 370, 369, 414, 122, 0, 0, 136,
	89, 88, 97, 406, 354, 362, 80, 360, 128, 118,
	148, 387, 119, 127, 101, 140, 123, 147, 156, 157,
	138, 154, 69, 137, 618, 78, 130, 71, 144, 135,
	107, 93, 94, 70, 0, 126, 83, 87, 82, 115,
	141, 142, 81, 164, 74, 153, 73, 327, 152, 114,
	139, 145, 108, 105, 72, 143, 106, 104, 96, 85,
	90, 120, 103, 121, 91, 111, 110, 112, 331, 0,
	334, 0, 134, 150, 165, 350, 409, 158, 159, 160,
	161, 0, 0, 0, 328, 326, 92, 131, 95, 102,
	125, 163, 117, 129, 79, 149, 132, 346, 349, 344,
	345, 383, 384, 418, 419, 420, 400, 341, 0, 347,
	348, 0, 404, 386, 68, 0, 99, 162, 124, 86,
	151, 413, 403, 0, 374, 415, 352, 366, 423, 367,
	368, 396, 337, 382, 116, 364, 340, 0, 355, 332,
	361, 333, 353, 376, 84, 379, 351, 405, 385, 98,
	390, 421, 100, 391, 0, 133, 109, 0, 0, 378,
	407, 380, 401, 373, 397, 343, 389, 416, 365, 394,
	417, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 393, 412, 363, 395, 330,
	392, 0, 335, 338, 422, 410, 358, 359, 0, 0,
	0, 0, 0, 0, 0, 377, 381, 398, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 356, 0, 388,
	0, 0, 0, 339, 336, 0, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 357, 399, 0, 329, 402, 408, 372, 155, 411,
	370, 369, 414, 122, 0, 0, 136, 89, 88, 97,
	406, 354, 362, 80, 360, 128, 118, 148, 387, 119,
	127, 101, 140, 123, 147, 156, 157, 138, 154, 69,
	137, 146, 78, 130, 71, 144, 135, 107, 93, 94,
	70, 0, 126, 83, 87, 82, 115, 141, 142, 81,
	164, 74, 153, 73, 75, 152, 114, 139, 145, 108,
	105, 72, 143, 106, 104, 96, 85, 90, 120, 103,
	121, 91, 111, 110, 112, 331, 0, 334, 0, 134,
	150, 165, 350, 409, 158, 159, 160, 161, 0, 0,
	0, 113, 76, 92, 131, 95, 102, 125, 163, 117,
	129, 79, 149, 132, 346, 349, 344, 345, 383, 384,
	418, 419, 420, 400, 341, 0, 347, 348, 0, 404,
	386, 68, 0, 99, 162, 124, 86, 151, 413, 403,
	0, 374, 415, 352, 366, 423, 367, 368, 396, 337,
	382, 116, 364, 340, 0, 355, 332, 361, 333, 353,
	376, 84, 379, 351, 405, 385, 98, 390, 421, 100,
	391, 0, 133, 109, 0, 0, 378, 407, 380, 401,
	373, 397, 343, 389, 416, 365, 394, 417, 0, 0,
	0, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 393, 412, 363, 395, 330, 392, 0, 335,
	338, 422, 410, 358, 359, 0, 0, 0, 0, 0,
	0, 0, 377, 381, 398, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 388, 0, 0, 0,
	339, 336, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 357, 399,
	0, 329, 402, 408, 372, 155, 411, 370, 369, 414,
	122, 0, 0, 136, 89, 88, 97, 406, 354, 362,
	80, 360, 128, 118, 148, 387, 119, 127, 101, 140,
	123, 147, 156, 157, 138, 154, 69, 137, 318, 78,
	130, 71, 144, 135, 107, 93, 94, 70, 0, 126,
	83, 87, 82, 115, 141, 142, 81, 164, 74, 153,
	73, 327, 152, 114, 139, 145, 108, 105, 72, 143,
	106, 104, 96, 85, 90, 120, 103, 121, 91, 111,
	110, 112, 331, 0, 334, 0, 134, 150, 165, 350,
	409, 158, 159, 160, 161, 0, 0, 0, 328, 326,
	321, 320, 95, 102, 125, 163, 117, 129, 79, 149,
	132, 346, 349, 344, 345, 383, 384, 418, 419, 420,
	400, 341, 0, 347, 348, 0, 404, 386, 68, 0,
	99, 162, 124, 86, 151, 116, 0, 0, 0, 788,
	0, 245, 0, 0, 0, 84, 0, 242, 0, 0,
	98, 0, 285, 100, 0, 0, 133, 109, 0, 0,
	0, 0, 276, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 243, 263, 262, 265,
	266, 267, 268, 0, 77, 264, 269, 270, 271, 0,
	0, 240, 256, 0, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 236, 0, 0, 0,
	296, 0, 255, 0, 0, 251, 252, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 155,
	0, 0, 294, 0, 122, 0, 0, 136, 89, 88,
	97, 0, 0, 0, 80, 0, 128, 118, 148, 0,
	119, 127, 101, 140, 123, 147, 156, 157, 138, 154,
	69, 137, 146, 78, 130, 71, 144, 135, 107, 93,
	94, 70, 0, 126, 83, 87, 82, 115, 141, 142,
	81, 164, 74, 153, 73, 75, 152, 114, 139, 145,
	108, 105, 72, 143, 106, 104, 96, 85, 90, 120,
	103, 121, 91, 111, 110, 112, 275, 0, 0, 0,
	134, 150, 165, 0, 0, 158, 159, 160, 161, 0,
	0, 0, 113, 76, 92, 131, 95, 102, 125, 163,
	117, 129, 79, 149, 132, 286, 295, 292, 293, 290,
	291, 289, 288, 287, 297, 278, 279, 280, 281, 283,
	0, 282, 68, 116, 99, 162, 124, 86, 151, 245,
	0, 0, 0, 84, 0, 242, 0, 0, 98, 0,
	285, 100, 0, 0, 133, 109, 0, 0, 0, 0,
	276, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 243, 263, 262, 265, 266, 267,
	268, 0, 77, 264, 269, 270, 271, 0, 0, 240,
	256, 0, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 236, 0, 0, 0, 296, 0,
	255, 0, 0, 251, 252, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	294, 0, 122, 0, 0, 136, 89, 88, 97, 0,
	0, 0, 80, 0, 128, 118, 148, 0, 119, 127,
	101, 140, 123, 147, 156, 157, 138, 154, 69, 137,
	146, 78, 130, 71, 144, 135, 107, 93, 94, 70,
	0, 126, 83, 87, 82, 115, 141, 142, 81, 164,
	74, 153, 73, 75, 152, 114, 139, 145, 108, 105,
	72, 143, 106, 104, 96, 85, 90, 120, 103, 121,
	91, 111, 110, 112, 275, 0, 0, 0, 134, 150,
	165, 0, 0, 158, 159, 160, 161, 0, 0, 0,
	113, 76, 92, 131, 95, 102, 125, 163, 117, 129,
	79, 149, 132, 286, 295, 292, 293, 290, 291, 289,
	288, 287, 297, 278, 279, 280, 281, 283, 0, 282,
	68, 116, 99, 162, 124, 86, 151, 245, 0, 0,
	0, 84, 0, 242, 0, 0, 98, 0, 285, 100,
	0, 0, 133, 109, 0, 0, 0, 0, 276, 277,
	0, 0, 0, 0, 0, 0, 857, 0, 0, 51,
	0, 0, 243, 263, 262, 265, 266, 267, 268, 0,
	77, 264, 269, 270, 271, 0, 0, 240, 256, 0,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 0, 0, 0, 0, 296, 0, 255, 0,
	0, 251, 252, 257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 294, 0,
	122, 0, 0, 136, 89, 88, 97, 0, 0, 0,
	80, 0, 128, 118, 148, 0, 119, 127, 101, 140,
	123, 147, 156, 157, 138, 154, 69, 137, 146, 78,
	130, 71, 144, 135, 107, 93, 94, 70, 0, 126,
	83, 87, 82, 115, 141, 142, 81, 164, 74, 153,
	73, 75, 152, 114, 139, 145, 108, 105, 72, 143,
	106, 104, 96, 85, 90, 120, 103, 121, 91, 111,
	110, 112, 275, 0, 0, 0, 134, 150, 165, 0,
	0, 158, 159, 160, 161, 0, 0, 0, 113, 76,
	92, 131, 95, 102, 125, 163, 117, 129, 79, 149,
	132, 286, 295, 292, 293, 290, 291, 289, 288, 287,
	297, 278, 279, 280, 281, 283, 0, 282, 68, 116,
	99, 162, 124, 86, 151, 245, 0, 0, 0, 84,
	0, 242, 0, 0, 98, 0, 285, 100, 0, 0,
	133, 109, 0, 0, 0, 0, 276, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 469,
	243, 263, 262, 265, 266, 267, 268, 0, 77, 264,
	269, 270, 271, 0, 0, 240, 256, 0, 284, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	0, 0, 0, 0, 296, 0, 255, 0, 0, 251,
	252, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 294, 0, 122, 0,
	0, 136, 89, 88, 97, 0, 0, 0, 80, 0,
	128, 118, 148, 0, 119, 127, 101, 140, 123, 147,
	156, 157, 138, 154, 69, 137, 146, 78, 130, 71,
	144, 135, 107, 93, 94, 70, 0, 126, 83, 87,
	82, 115, 141, 142, 81, 164, 74, 153, 73, 75,
	152, 114, 139, 145, 108, 105, 72, 143, 106, 104,
	96, 85, 90, 120, 103, 121, 91, 111, 110, 112,
	275, 0, 0, 0, 134, 150, 165, 0, 0, 158,
	159, 160, 161, 0, 0, 0, 113, 76, 92, 131,
	95, 102, 125, 163, 117, 129, 79, 149, 132, 286,
	295, 292, 293, 290, 291, 289, 288, 287, 297, 278,
	279, 280, 281, 283, 24, 282, 68, 0, 99, 162,
	124, 86, 151, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 84, 0, 242, 0,
	0, 98, 0, 285, 100, 0, 0, 133, 109, 0,
	0, 0, 0, 276, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 243, 263, 262,
	265, 266, 267, 268, 0, 77, 264, 269, 270, 271,
	0, 0, 240, 256, 0, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 0, 0, 0,
	0, 296, 0, 255, 0, 0, 251, 252, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 294, 0, 122, 0, 0, 136, 89,
	88, 97, 0, 0, 0, 80, 0, 128, 118, 148,
	0, 119, 127, 101, 140, 123, 147, 156, 157, 138,
	154, 69, 137, 146, 78, 130, 71, 144, 135, 107,
	93, 94, 70, 0, 126, 83, 87, 82, 115, 141,
	142, 81, 164, 74, 153, 73, 75, 152, 114, 139,
	145, 108, 105, 72, 143, 106, 104, 96, 85, 90,
	120, 103, 121, 91, 111, 110, 112, 275, 0, 0,
	0, 134, 150, 165, 0, 0, 158, 159, 160, 161,
	0, 0, 0, 113, 76, 92, 131, 95, 102, 125,
	163, 117, 129, 79, 149, 132, 286, 295, 292, 293,
	290, 291, 289, 288, 287, 297, 278, 279, 280, 281,
	283, 0, 282, 68, 116, 99, 162, 124, 86, 151,
	245, 0, 0, 0, 84, 0, 242, 0, 0, 98,
	0, 285, 100, 0, 0, 133, 109, 0, 0, 0,
	0, 276, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 243, 263, 262, 265, 266,
	267, 268, 0, 77, 264, 269, 270, 271, 0, 0,
	240, 256, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 0, 0, 0, 0, 296,
	0, 255, 0, 0, 251, 252, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 294, 0, 122, 0, 0, 136, 89, 88, 97,
	0, 0, 0, 80, 0, 128, 118, 148, 0, 119,
	127, 101, 140, 123, 147, 156, 157, 138, 154, 69,
	137, 146, 78, 130, 71, 144, 135, 107, 93, 94,
	70, 0, 126, 83, 87, 82, 115, 141, 142, 81,
	164, 74, 153, 73, 75, 152, 114, 139, 145, 108,
	105, 72, 143, 106, 104, 96, 85, 90, 120, 103,
	121, 91, 111, 110, 112, 275, 0, 0, 0, 134,
	150, 165, 0, 0, 158, 159, 160, 161, 0, 0,
	0, 113, 76, 92, 131, 95, 102, 125, 163, 117,
	129, 79, 149, 132, 286, 295, 292, 293, 290, 291,
	289, 288, 287, 297, 278, 279, 280, 281, 283, 116,
	282, 68, 0, 99, 162, 124, 86, 151, 0, 84,
	0, 0, 0, 0, 98, 0, 285, 100, 0, 0,
	133, 109, 0, 0, 0, 0, 276, 277, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	243, 263, 262, 265, 266, 267, 268, 0, 77, 264,
	269, 270, 271, 0, 0, 0, 256, 0, 284, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	0, 0, 0, 0, 296, 0, 255, 0, 0, 251,
	252, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 294, 0, 122, 0,
	0, 136, 89, 88, 97, 0, 0, 0, 80, 0,
	128, 118, 148, 1334, 119, 127, 101, 140, 123, 147,
	156, 157, 138, 154, 69, 137, 146, 78, 130, 71,
	144, 135, 107, 93, 94, 70, 0, 126, 83, 87,
	82, 115, 141, 142, 81, 164, 74, 153, 73, 75,
	152, 114, 139, 145, 108, 105, 72, 143, 106, 104,
	96, 85, 90, 120, 103, 121, 91, 111, 110, 112,
	275, 0, 0, 0, 134, 150, 165, 0, 0, 158,
	159, 160, 161, 0, 0, 0, 113, 76, 92, 131,
	95, 102, 125, 163, 117, 129, 79, 149, 132, 286,
	295, 292, 293, 290, 291, 289, 288, 287, 297, 278,
	279, 280, 281, 283, 116, 282, 68, 0, 99, 162,
	124, 86, 151, 0, 84, 0, 0, 0, 0, 98,
	0, 285, 100, 0, 0, 133, 109, 0, 0, 0,
	0, 276, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 243, 263, 262, 265, 266,
	267, 268, 0, 77, 264, 269, 270, 271, 0, 0,
	0, 256, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 0, 0, 0, 0, 296,
	0, 255, 0, 0, 251, 252, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 294, 0, 122, 0, 0, 136, 89, 88, 97,
	0, 0, 0, 80, 0, 128, 118, 148, 0, 119,
	127, 101, 140, 123, 147, 156, 157, 138, 154, 69,
	137, 146, 78, 130, 71, 144, 135, 107, 93, 94,
	70, 0, 126, 83, 87, 82, 115, 141, 142, 81,
	164, 74, 153, 73, 75, 152, 114, 139, 145, 108,
	105, 72, 143, 106, 104, 96, 85, 90, 120, 103,
	121, 91, 111, 110, 112, 275, 0, 0, 1204, 134,
	150, 165, 0, 0, 158, 159, 160, 161, 0, 0,
	0, 113, 76, 92, 131, 95, 102, 125, 163, 117,
	129, 79, 149, 132, 286, 295, 292, 293, 290, 291,
	289, 288, 287, 297, 278, 279, 280, 281, 283, 0,
	282, 68, 0, 99, 162, 124, 86, 151, 116, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 98, 0, 0, 100, 0, 0, 133,
	109, 0, 508, 507, 517, 518, 510, 511, 512, 513,
	514, 515, 516, 509, 961, 0, 524, 0, 0, 180,
	523, 493, 519, 520, 521, 522, 0, 77, 0, 0,
	0, 525, 488, 487, 508, 507, 517, 518, 510, 511,
	512, 513, 514, 515, 516, 509, 0, 0, 524, 489,
	0, 0, 523, 0, 519, 520, 521, 522, 0, 0,
	0, 0, 0, 525, 508, 507, 517, 518, 510, 511,
	512, 513, 514, 515, 516, 509, 0, 0, 524, 0,
	0, 0, 523, 0, 519, 520, 521, 522, 0, 0,
	0, 0, 155, 525, 0, 0, 0, 122, 0, 0,
	136, 89, 88, 97, 0, 0, 0, 80, 0, 128,
	118, 148, 0, 119, 127, 101, 140, 123, 147, 156,
	157, 138, 154, 69, 137, 146, 78, 130, 71, 144,
	135, 107, 93, 94, 70, 0, 126, 83, 87, 82,
	115, 141, 142, 81, 164, 74, 153, 73, 75, 152,
	114, 139, 145, 108, 105, 72, 143, 106, 104, 96,
	85, 90, 120, 103, 121, 91, 111, 110, 112, 0,
	0, 0, 0, 134, 150, 165, 0, 0, 158, 159,
	160, 161, 0, 0, 0, 113, 76, 92, 131, 95,
	102, 125, 163, 117, 129, 79, 149, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 68, 0, 99, 162, 124,
	86, 151, 84, 0, 0, 0, 0, 98, 0, 0,
	100, 0, 0, 133, 109, 507, 517, 518, 510, 511,
	512, 513, 514, 515, 516, 509, 0, 0, 524, 0,
	0, 0, 523, 180, 519, 520, 521, 522, 0, 0,
	0, 77, 0, 525, 0, 0, 173, 517, 518, 510,
	511, 512, 513, 514, 515, 516, 509, 0, 0, 524,
	0, 0, 0, 523, 0, 519, 520, 521, 522, 0,
	0, 0, 0, 0, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 172, 0, 0, 0,
	178, 122, 0, 0, 136, 89, 88, 97, 0, 0,
	0, 80, 0, 128, 118, 148, 0, 119, 127, 101,
	140, 123, 147, 174, 157, 138, 154, 69, 137, 146,
	78, 130, 71, 144, 135, 107, 93, 94, 70, 0,
	126, 83, 87, 82, 115, 141, 142, 81, 164, 74,
	153, 73, 75, 152, 114, 139, 145, 108, 105, 72,
	143, 106, 104, 96, 85, 90, 120, 103, 121, 91,
	111, 110, 112, 0, 0, 0, 0, 134, 150, 165,
	0, 0, 158, 159, 160, 161, 0, 0, 0, 113,
	76, 92, 131, 95, 102, 125, 163, 117, 129, 79,
	149, 132, 0, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 99, 162, 124, 86, 151, 116, 0, 0, 0,
	0, 607, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 98, 0, 0, 100, 0, 0, 133, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 609,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 122, 0, 0, 136, 89,
	88, 97, 0, 0, 0, 80, 0, 128, 118, 148,
	0, 119, 127, 101, 140, 123, 147, 156, 157, 138,
	154, 69, 137, 146, 78, 130, 71, 144, 135, 107,
	93, 94, 70, 0, 126, 83, 87, 82, 115, 141,
	142, 81, 164, 74, 153, 73, 75, 152, 114, 139,
	145, 108, 105, 72, 143, 106, 104, 96, 85, 90,
	120, 103, 121, 91, 111, 110, 112, 0, 0, 0,
	0, 134, 150, 165, 0, 0, 158, 159, 160, 161,
	0, 0, 0, 113, 76, 92, 131, 95, 102, 125,
	163, 117, 129, 79, 149, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 68, 0, 99, 162, 124, 86, 151,
	84, 0, 0, 0, 0, 98, 0, 0, 100, 0,
	0, 133, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 995, 0, 0, 997, 0,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 122,
	0, 0, 136, 89, 88, 97, 0, 0, 0, 80,
	0, 128, 118, 148, 0, 119, 127, 101, 140, 123,
	147, 156, 157, 138, 154, 69, 137, 146, 78, 130,
	71, 144, 135, 107, 93, 94, 70, 0, 126, 83,
	87, 82, 115, 141, 142, 81, 164, 74, 153, 73,
	75, 152, 114, 139, 145, 108, 105, 72, 143, 106,
	104, 96, 85, 90, 120, 103, 121, 91, 111, 110,
	112, 0, 0, 0, 0, 134, 150, 165, 0, 0,
	158, 159, 160, 161, 0, 0, 0, 113, 76, 92,
	131, 95, 102, 125, 163, 117, 129, 79, 149, 132,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 68, 0, 99,
	162, 124, 86, 151, 84, 0, 0, 0, 0, 98,
	0, 0, 100, 0, 0, 133, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 122, 0, 0, 136, 89, 88, 97,
	0, 0, 0, 80, 0, 128, 118, 148, 0, 119,
	127, 101, 140, 123, 147, 156, 157, 138, 154, 69,
	137, 146, 78, 130, 71, 144, 135, 107, 93, 94,
	70, 0, 126, 83, 87, 82, 115, 141, 142, 81,
	164, 74, 153, 73, 75, 152, 114, 139, 145, 108,
	105, 72, 143, 106, 104, 96, 85, 90, 120, 103,
	121, 91, 111, 110, 112, 0, 0, 0, 0, 134,
	150, 165, 0, 0, 158, 159, 160, 161, 0, 0,
	0, 113, 76, 92, 131, 95, 102, 125, 163, 117,
	129, 79, 149, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 68, 0, 99, 162, 124, 86, 151, 84, 0,
	0, 0, 0, 98, 0, 0, 100, 0, 0, 133,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 0, 724, 0, 0, 725, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 122, 0, 0,
	136, 89, 88, 97, 0, 0, 0, 80, 0, 128,
	118, 148, 0, 119, 127, 101, 140, 123, 147, 156,
	157, 138, 154, 69, 137, 146, 78, 130, 71, 144,
	135, 107, 93, 94, 70, 0, 126, 83, 87, 82,
	115, 141, 142, 81, 164, 74, 153, 73, 75, 152,
	114, 139, 145, 108, 105, 72, 143, 106, 104, 96,
	85, 90, 120, 103, 121, 91, 111, 110, 112, 0,
	0, 0, 0, 134, 150, 165, 0, 0, 158, 159,
	160, 161, 0, 0, 0, 113, 76, 92, 131, 95,
	102, 125, 163, 117, 129, 79, 149, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 68, 0, 99, 162, 124,
	86, 151, 84, 0, 627, 0, 0, 98, 0, 0,
	100, 0, 0, 133, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 626, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 122, 0, 0, 136, 89, 88, 97, 0, 0,
	0, 80, 0, 128, 118, 148, 0, 119, 127, 101,
	140, 123, 147, 156, 157, 138, 154, 69, 137, 146,
	78, 130, 71, 144, 135, 107, 93, 94, 70, 0,
	126, 83, 87, 82, 115, 141, 142, 81, 164, 74,
	153, 73, 75, 152, 114, 139, 145, 108, 105, 72,
	143, 106, 104, 96, 85, 90, 120, 103, 121, 91,
	111, 110, 112, 0, 0, 0, 0, 134, 150, 165,
	0, 0, 158, 159, 160, 161, 0, 0, 0, 113,
	76, 92, 131, 95, 102, 125, 163, 117, 129, 79,
	149, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 99, 162, 124, 86, 151, 116, 0, 0, 0,
	0, 607, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 98, 0, 0, 100, 0, 0, 133, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 609,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 122, 0, 0, 136, 89,
	88, 97, 0, 0, 0, 80, 0, 128, 118, 148,
	0, 605, 127, 101, 140, 123, 147, 156, 157, 138,
	154, 69, 137, 146, 78, 130, 71, 144, 135, 107,
	93, 94, 70, 0, 126, 83, 87, 82, 115, 141,
	142, 81, 164, 74, 153, 73, 75, 152, 114, 139,
	145, 108, 105, 72, 143, 106, 104, 96, 85, 90,
	120, 103, 121, 91, 111, 110, 112, 0, 0, 0,
	0, 134, 150, 165, 0, 0, 158, 159, 160, 161,
	0, 0, 0, 113, 76, 92, 131, 95, 102, 125,
	163, 117, 129, 79, 149, 132, 0, 0, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 68, 0, 99, 162, 124, 86, 151,
	84, 0, 0, 0, 0, 98, 0, 0, 100, 0,
	0, 133, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 122,
	0, 0, 136, 89, 88, 97, 0, 0, 0, 80,
	0, 128, 118, 148, 0, 119, 127, 101, 140, 123,
	147, 156, 157, 138, 154, 69, 137, 146, 78, 130,
	71, 144, 135, 107, 93, 94, 70, 0, 126, 83,
	87, 82, 115, 141, 142, 81, 164, 74, 153, 73,
	75, 152, 114, 139, 145, 108, 105, 72, 143, 106,
	104, 96, 85, 90, 120, 103, 121, 91, 111, 110,
	112, 0, 0, 0, 0, 134, 150, 165, 0, 0,
	158, 159, 160, 161, 0, 0, 0, 113, 76, 92,
	131, 95, 102, 125, 163, 117, 129, 79, 149, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 68, 0, 99,
	162, 124, 86, 151, 84, 0, 0, 0, 0, 98,
	0, 0, 100, 0, 0, 133, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 122, 0, 0, 136, 89, 88, 97,
	0, 0, 0, 80, 0, 128, 118, 148, 0, 119,
	127, 101, 140, 123, 147, 156, 157, 138, 154, 69,
	137, 146, 78, 130, 71, 144, 135, 107, 93, 94,
	70, 0, 126, 83, 87, 82, 115, 141, 142, 81,
	164, 74, 153, 73, 75, 152, 114, 139, 145, 108,
	105, 72, 143, 106, 104, 96, 85, 90, 120, 103,
	121, 91, 111, 110, 112, 0, 0, 0, 0, 134,
	150, 165, 0, 0, 158, 159, 160, 161, 0, 0,
	0, 113, 76, 92, 131, 95, 102, 125, 163, 117,
	129, 79, 149, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 68, 0, 99, 162, 124, 86, 151, 84, 0,
	0, 0, 0, 98, 0, 0, 100, 0, 0, 133,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 609, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 122, 0, 0,
	136, 89, 88, 97, 0, 0, 0, 80, 0, 128,
	118, 148, 0, 119, 127, 101, 140, 123, 147, 156,
	157, 138, 154, 69, 137, 146, 78, 130, 71, 144,
	135, 107, 93, 94, 70, 0, 126, 83, 87, 82,
	115, 141, 142, 81, 164, 74, 153, 73, 75, 152,
	114, 139, 145, 108, 105, 72, 143, 106, 104, 96,
	85, 90, 120, 103, 121, 91, 111, 110, 112, 0,
	0, 0, 0, 134, 150, 165, 0, 0, 158, 159,
	160, 161, 0, 0, 0, 113, 76, 92, 131, 95,
	102, 125, 163, 117, 129, 79, 149, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 68, 0, 99, 162, 124,
	86, 151, 84, 0, 0, 0, 0, 98, 0, 0,
	100, 0, 0, 133, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 493, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	0, 122, 0, 0, 136, 89, 88, 97, 0, 0,
	0, 80, 0, 128, 118, 148, 0, 119, 127, 101,
	140, 123, 147, 156, 157, 138, 154, 69, 137, 146,
	78, 130, 71, 144, 135, 107, 93, 94, 70, 0,
	126, 83, 87, 82, 115, 141, 142, 81, 164, 74,
	153, 73, 75, 152, 114, 139, 145, 108, 105, 72,
	143, 106, 104, 96, 85, 90, 120, 103, 121, 91,
	111, 110, 112, 0, 0, 0, 0, 134, 150, 165,
	0, 0, 158, 159, 160, 161, 0, 0, 0, 113,
	76, 92, 131, 95, 102, 125, 163, 117, 129, 79,
	149, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 68,
	0, 99, 162, 124, 86, 151, 63, 84, 0, 0,
	0, 0, 98, 0, 0, 100, 0, 0, 133, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 122, 0, 0, 136,
	89, 88, 97, 0, 0, 0, 80, 0, 128, 118,
	148, 0, 119, 127, 101, 140, 123, 147, 156, 157,
	138, 154, 69, 137, 146, 78, 130, 71, 144, 135,
	107, 93, 94, 70, 0, 126, 83, 87, 82, 115,
	141, 142, 81, 164, 74, 153, 73, 75, 152, 114,
	139, 145, 108, 105, 72, 143, 106, 104, 96, 85,
	90, 120, 103, 121, 91, 111, 110, 112, 0, 0,
	0, 0, 134, 150, 165, 0, 0, 158, 159, 160,
	161, 0, 0, 0, 113, 76, 92, 131, 95, 102,
	125, 163, 117, 129, 79, 149, 132, 0, 0, 0,
	0, 0, 0, 0, 313, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 68, 0, 99, 162, 124, 86,
	151, 84, 0, 0, 0, 0, 98, 0, 0, 100,
	0, 0, 133, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	122, 0, 0, 136, 89, 88, 97, 0, 0, 0,
	80, 0, 128, 118, 148, 0, 119, 127, 101, 140,
	123, 147, 156, 157, 138, 154, 69, 137, 146, 78,
	130, 71, 144, 135, 107, 93, 94, 70, 0, 126,
	83, 87, 82, 115, 141, 142, 81, 164, 74, 153,
	73, 75, 152, 114, 139, 145, 108, 105, 72, 143,
	106, 104, 96, 85, 90, 120, 103, 121, 91, 111,
	110, 112, 0, 0, 0, 0, 134, 150, 165, 0,
	0, 158, 159, 160, 161, 0, 0, 0, 113, 76,
	92, 131, 95, 102, 125, 163, 117, 129, 79, 149,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 68, 0,
	99, 162, 124, 86, 151, 84, 0, 0, 0, 0,
	98, 0, 0, 100, 0, 0, 133, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 155,
	0, 0, 0, 0, 122, 0, 0, 136, 89, 88,
	97, 0, 0, 0, 80, 0, 128, 118, 148, 0,
	119, 127, 101, 140, 123, 147, 156, 157, 138, 154,
	69, 137, 146, 78, 130, 71, 144, 135, 107, 93,
	94, 70, 0, 126, 83, 87, 82, 115, 141, 142,
	81, 164, 74, 153, 73, 75, 152, 114, 139, 145,
	108, 105, 72, 143, 106, 104, 96, 85, 90, 120,
	103, 121, 91, 111, 110, 112, 0, 0, 0, 0,
	134, 150, 165, 0, 0, 158, 159, 160, 161, 0,
	0, 0, 113, 76, 92, 131, 95, 102, 125, 163,
	117, 129, 79, 149, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 68, 0, 99, 162, 124, 86, 151, 84,
	0, 0, 0, 0, 98, 0, 0, 100, 0, 0,
	133, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 122, 0,
	0, 136, 89, 88, 97, 0, 0, 0, 80, 0,
	128, 118, 148, 0, 119, 127, 101, 140, 123, 147,
	156, 157, 138, 154, 69, 137, 146, 78, 130, 71,
	144, 135, 107, 93, 94, 70, 0, 126, 83, 87,
	82, 115, 141, 142, 81, 164, 74, 153, 73, 75,
	152, 114, 139, 145, 108, 105, 72, 143, 106, 104,
	96, 85, 90, 120, 103, 121, 91, 111, 110, 112,
	0, 0, 0, 0, 134, 150, 165, 0, 0, 158,
	159, 160, 161, 0, 0, 0, 113, 76, 92, 131,
	95, 102, 125, 163, 117, 129, 79, 149, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 68, 0, 99, 162,
	124, 86, 151, 84, 0, 0, 0, 0, 98, 0,
	0, 100, 0, 0, 133, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 122, 0, 0, 136, 89, 88, 97, 0,
	0, 0, 80, 0, 128, 118, 148, 0, 119, 127,
	101, 140, 123, 147, 156, 157, 138, 154, 69, 137,
	146, 78, 130, 71, 144, 135, 107, 93, 94, 70,
	0, 126, 83, 87, 82, 115, 141, 142, 81, 164,
	74, 153, 73, 75, 152, 114, 139, 145, 108, 105,
	72, 143, 106, 104, 96, 85, 90, 120, 103, 121,
	91, 111, 110, 112, 0, 0, 0, 0, 134, 150,
	165, 0, 0, 158, 159, 160, 161, 0, 0, 0,
	113, 76, 92, 131, 95, 102, 125, 163, 117, 129,
	79, 149, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	68, 0, 99, 162, 124, 86, 151, 84, 0, 0,
	0, 0, 98, 0, 0, 100, 0, 0, 133, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 122, 0, 0, 136,
	89, 88, 97, 0, 0, 0, 80, 0, 128, 118,
	148, 0, 119, 127, 101, 140, 123, 147, 156, 157,
	138, 154, 69, 137, 146, 78, 130, 71, 144, 135,
	107, 93, 94, 70, 0, 126, 83, 87, 82, 115,
	141, 142, 81, 164, 74, 153, 73, 75, 152, 114,
	139, 145, 108, 105, 72, 143, 106, 104, 96, 85,
	90, 120, 103, 121, 91, 111, 110, 112, 0, 0,
	0, 0, 134, 150, 165, 0, 0, 158, 159, 160,
	161, 0, 0, 0, 113, 76, 92, 131, 95, 102,
	125, 163, 117, 129, 79, 149, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 99, 162, 124, 86,
	151,
}

var yyPact = [...]int16{
	2075, -1000, -171, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 870, 892, -1000, -1000, 10069, -1000, -1000, -1000,
	673, 7474, 47, 64, 8, 10537, 63, 1289, 11239, -1000,
	-5, -1000, -1000, 2024, -1000, -1000, -1000, -1000, 656, -1000,
	-1000, -1000, -1000, -1000, 862, 868, 685, 849, 753, -1000,
	5565, 650, 44, 11239, -1000, 106, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9366, 10303, 5083, -1000,
	522, 60, 11239, -134, 10771, 41, 41, 41, -1000, -1000,
	-1000, -1000, 62, 11239, -1000, 11239, 39, 519, 39, 39,
	39, 11239, -1000, 11239, 515, 799, 65, 3027, 3027, 3027,
	3027, 0, 3027, -81, 708, -1000, -1000, -1000, -1000, 3027,
	-1000, -1000, -1000, -1000, -1000, -1000, 2015, -1000, -1000, -1000,
	-1000, 374, 809, 6526, 6526, 870, -1000, 656, -1000, -1000,
	-1000, 789, -1000, -1000, 266, 881, -1000, 7240, 102, -1000,
	6526, 2342, 644, -1000, -1000, 644, -1000, -1000, -1000, -1000,
	-1000, 6996, 6996, 6996, 6996, 6996, 6996, 6996, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 644, -1000, 6288, 644, 644, 644, 644, 644,
	644, 644, 644, 644, 6526, 644, 644, 644, 644, 644,
	644, 644, 644, 644, 644, 644, 644, 644, 704, 644,
	-1000, 9132, 10069, -1000, 4826, 616, 1043, -1000, -1000, -1000,
	840, 8186, 8898, 11239, 558, -1000, 626, 4569, -114, -1000,
	-1000, -1000, 163, 8654, -1000, -1000, -1000, 798, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 507, -1000, 2197, 504, 3027, 52,
	681, 489, 198, 482, 11239, 11239, 3027, 49, 11239, 836,
	699, 11239, 473, 448, -1000, -1000, 3027, 3027, 3027, 3027,
	3027, 3027, 3027, 3027, -1000, -1000, -1000, -1000, -1000, -1000,
	3027, 3027, -1000, -83, -1000, 11239, -1000, -1000, -1000, -1000,
	-1000, 887, 134, 486, 101, 638, -1000, 367, 862, 374,
	753, 8420, 694, -1000, -1000, 11239, -1000, 6526, 6526, 256,
	-1000, 9834, -1000, -1000, 3541, 142, 6996, 98, 166, 6996,
	6996, 775, 98, 98, 6996, 6996, 6996, 6996, 6996, 6996,
	6996, 6996, 6996, 6996, 6996, 6996, 6996, 6996, 6996, 6996,
	6996, 6996, 6996, 1797, 318, 6996, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 444, -1000, 656, 299, 299, 299,
	299, 299, 299, 457, 5327, 374, 493, 165, 6288, -1000,
	5565, 5565, 6526, 6526, 11005, 11005, 5565, 842, 190, 165,
	11005, -1000, 374, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5565, 5565, 5565, 5565, -1000, 853, 557, -1000, -1000, 6041,
	374, 481, 96, 17, -1000, -1000, -1000, 11005, 9366, 9366,
	9366, 9366, 9366, -1000, 742, 741, -1000, 740, 721, 767,
	11239, -1000, 478, 8186, 121, 644, -1000, 9600, -1000, -1000,
	17, 589, 9366, 11239, -1000, -1000, 3798, 626, -114, 619,
	-1000, -109, -101, 5803, 118, -1000, -1000, -1000, -1000, 2770,
	200, 276, -68, -1000, -1000, -1000, 658, -1000, 658, 658,
	658, 658, -33, -33, -33, -33, -1000, -1000, -1000, -1000,
	-1000, 672, 669, -1000, 658, 658, 658, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 662, 662, 662, 661, 661, 682, -1000,
	11239, -152, 440, 3027, 830, 3027, -1000, 1374, -1000, 11239,
	-1000, -1000, 11239, 3027, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 225, -1000, -1000, -1000,
	-1000, 764, 6526, 6526, 4312, 6526, -1000, -1000, -1000, 809,
	-1000, 842, 869, -1000, 786, 782, 5565, -1000, -1000, 142,
	255, -1000, -1000, 326, -1000, -1000, -1000, -1000, 95, 644,
	-1000, 7251, -1000, -1000, -1000, 108, -186, -1000, 98, 6996,
	6996, 6996, 1651, 7251, -1000, -1000, -1000, 7251, 7251, 7221,
	7452, 7421, 299, 827, 827, 693, 693, 693, 693, 693,
	1609, 1609, 7251, 7251, 7251, 7251, -188, -1000, 658, -15,
	-16, -1000, -1000, -1000, -1000, 7251, 374, 374, 5565, 621,
	-1000, -1000, 6526, -1000, 374, 453, 453, 178, 336, 642,
	-1000, 93, 615, 453, 5565, 191, -1000, 6526, 374, -1000,
	453, 374, 453, 453, 7952, 644, -1000, -1000, 646, 10771,
	10771, 549, 644, 622, -1000, 158, 1043, 680, 698, 1014,
	-1000, -1000, -1000, -1000, 725, -1000, 723, -1000, -1000, -1000,
	-1000, -1000, 56, 55, 54, 10771, -1000, 879, 9366, 576,
	-1000, -1000, 619, -114, -115, -1000, -1000, -1000, 165, -1000,
	433, 611, 2513, -1000, -1000, -1000, -1000, -1000, -1000, 660,
	822, 180, 175, 426, -1000, -1000, 801, -1000, 205, -71,
	-1000, -1000, 323, -33, -33, -1000, -1000, 118, 794, 118,
	118, 118, 363, 363, -1000, -1000, -1000, -1000, 319, -1000,
	-1000, -1000, 298, -1000, 697, 10771, 3027, -1000, 4055, -1000,
	-1000, -1000, -1000, -1000, -1000, 634, 182, 183, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16,
	-1000, 3027, -1000, 218, 11239, 11239, 758, 165, 165, 84,
	-1000, -1000, 11239, -1000, -1000, -1000, -1000, 600, -1000, -1000,
	-1000, 3284, 5565, 1797, 6526, -1000, 1651, 7251, 2374, -1000,
	6996, 6996, -190, -1000, -1000, -1000, -1000, -1000, 453, 5565,
	165, -1000, -1000, -1000, 1797, 318, 1797, 6996, 6996, 4312,
	6996, 6996, -145, 588, 167, -1000, 6526, 344, -1000, -1000,
	-1000, -1000, -1000, 675, 118, 32, -1000, 10771, -1000, 644,
	-1000, 656, 78, -1000, 686, 11005, 10771, 870, 11005, 6526,
	6526, -1000, -1000, 6526, 659, -1000, 6526, -1000, -1000, -1000,
	644, 644, 644, 402, -1000, 870, 576, -1000, -1000, -1000,
	-104, -110, -1000, -1000, 2770, -1000, 2770, 10771, -1000, 396,
	368, -1000, -1000, 684, 67, -1000, -1000, -1000, 425, 118,
	118, -1000, 162, -1000, -1000, -1000, 439, -1000, 424, 587,
	421, 11239, -1000, -1000, 562, -1000, 157, -1000, -1000, 10771,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10771, 11239, -1000, -1000, -1000, -1000, -1000, 10771,
	-1000, -1000, 361, 6526, -1000, -1000, -1000, 4055, -1000, 879,
	9366, -1000, -1000, 374, -188, 37, -1000, 6996, 7251, 7251,
	-1000, -1000, -1000, 40, 374, 40, 2235, 7189, -1000, 2150,
	1473, 644, -141, -1000, 165, 6526, -1000, 811, 879, 10771,
	406, -1000, 557, 374, 10771, -1000, 824, 529, 402, 862,
	-1000, 165, 165, 165, 10771, 165, 10771, 10771, 10771, 7718,
	10771, 862, -1000, -1000, -1000, -1000, 2513, -1000, 400, -1000,
	658, -1000, -1000, -64, 886, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -33, 359, -33, 292,
	-1000, 291, 3027, 4055, 2770, -1000, 645, -1000, -1000, -1000,
	-1000, 828, -1000, 165, 876, 530, -1000, -1000, 7251, -1000,
	-1000, -1000, -1000, 6996, 6996, -1000, 6996, 6996, 6996, 374,
	358, 165, -1000, 793, -1000, -1000, 10771, -1000, -1000, -1000,
	821, -1000, -1000, -1000, 388, 386, 386, 386, 121, -1000,
	-1000, 110, 10771, -1000, 173, -1000, -124, 118, -1000, 118,
	407, 378, -1000, -1000, -1000, 10771, 644, 872, 867, 373,
	373, 373, 373, -14, -1000, -1000, 3798, -1000, 885, -1000,
	-1000, -1000, -1000, -1000, 110, -1000, 279, 151, 350, -1000,
	262, 819, -1000, 804, -1000, -1000, -1000, -1000, -1000, 384,
	15, -1000, 6526, 6526, -1000, -1000, -1000, -1000, 374, 59,
	-155, 879, 11005, -1000, -1000, 277, -1000, -1000, -1000, 346,
	-1000, -1000, 681, 377, -1000, 10771, 165, 526, -1000, 750,
	-150, -164, -1000, 495, -1000, -1000, -152, -1000, 15, 779,
	-1000, 746, -1000, -1000, -1000, 11, -153, 9, -156, 644,
	-165, 6761, -1000, 373, 374, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 145, 71, 698, 1143, 1142, 1141, 1139, 1138, 1137,
	1136, 1135, 1134, 1133, 1128, 1126, 1125, 1121, 1119, 1118,
	1115, 1114, 1111, 1110, 1109, 123, 1108, 1106, 1103, 60,
	1102, 66, 1096, 1085, 56, 175, 35, 31, 143, 1083,
	16, 59, 76, 1081, 36, 1079, 1078, 64, 1077, 55,
	1076, 1072, 1429, 73, 1071, 12, 27, 1070, 1069, 1066,
	39, 58, 8, 1065, 1062, 1053, 1052, 1048, 1047, 50,
	7, 28, 42, 37, 1045, 118, 6, 1044, 41, 1043,
	1041, 1033, 1030, 23, 1029, 40, 1025, 19, 43, 1024,
	17, 54, 25, 20, 1020, 1016, 1014, 1004, 5, 72,
	52, 985, 26, 11, 33, 984, 983, 375, 982, 979,
	978, 977, 976, 975, 180, 156, 974, 972, 971, 968,
	38, 188, 544, 47, 65, 966, 965, 963, 1347, 61,
	53, 18, 961, 22, 148, 34, 960, 959, 63, 67,
	958, 957, 955, 954, 953, 952, 48, 950, 948, 947,
	14, 24, 945, 944, 45, 46, 939, 935, 933, 30,
	51, 925, 32, 923, 922, 921, 920, 21, 13, 919,
	10, 918, 9, 917, 913, 2, 911, 15, 909, 3,
	908, 4, 29, 906, 903, 0, 566, 901, 900, 111,
}

var yyR1 = [...]uint8{
	0, 183, 184, 184, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 7, 28, 28, 8, 9, 9,
	9, 187, 187, 47, 47, 91, 91, 10, 10, 10,
	10, 100, 100, 104, 104, 104, 105, 105, 105, 105,
	136, 136, 11, 11, 11, 11, 11, 11, 11, 181,
	181, 180, 179, 179, 178, 178, 177, 16, 164, 165,
	165, 165, 160, 139, 139, 139, 139, 142, 142, 140,
	140, 140, 140, 140, 140, 140, 141, 141, 141, 141,
	141, 143, 143, 143, 143, 143, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 145, 145, 145, 145, 145, 145, 145, 145, 159,
	159, 146, 146, 154, 154, 155, 155, 155, 152, 152,
	153, 153, 156, 156, 156, 147, 147, 147, 147, 147,
	147, 147, 149, 149, 157, 157, 150, 150, 150, 151,
	151, 158, 158, 158, 158, 158, 148, 148, 161, 161,
	173, 173, 172, 172, 172, 163, 163, 169, 169, 169,
	169, 169, 162, 162, 171, 171, 170, 166, 166, 166,
	167, 167, 167, 168, 168, 168, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 176, 174, 174, 175,
	175, 13, 14, 14, 14, 14, 14, 15, 15, 17,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 112, 112, 109, 109, 110, 110, 111,
	111, 111, 113, 113, 113, 137, 137, 137, 19, 19,
	22, 22, 23, 24, 21, 21, 20, 20, 20, 20,
	188, 25, 26, 26, 27, 27, 27, 31, 31, 31,
	29, 29, 30, 30, 36, 36, 35, 35, 37, 37,
	37, 37, 125, 125, 125, 124, 124, 39, 39, 40,
	40, 41, 41, 42, 42, 42, 54, 54, 90, 90,
	92, 92, 43, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 132, 132, 131, 131, 131, 130, 130, 48,
	48, 48, 50, 49, 49, 49, 49, 51, 51, 53,
	53, 52, 52, 55, 55, 55, 55, 56, 56, 38,
	38, 38, 38, 38, 38, 38, 108, 108, 58, 58,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 68, 68, 68, 68, 68,
	68, 59, 59, 59, 59, 59, 59, 59, 34, 34,
	69, 69, 69, 69, 69, 69, 75, 70, 70, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 66, 66, 66, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 65, 65, 65, 65, 65, 65, 65,
	65, 189, 189, 67, 67, 67, 67, 32, 32, 32,
	32, 32, 135, 135, 138, 138, 138, 138, 138, 138,
	138, 138, 79, 79, 33, 33, 77, 77, 78, 80,
	80, 76, 76, 76, 61, 61, 61, 61, 61, 61,
	61, 61, 63, 63, 63, 81, 81, 82, 82, 83,
	83, 84, 84, 85, 86, 86, 86, 87, 87, 87,
	87, 88, 88, 88, 60, 60, 60, 60, 60, 60,
	89, 89, 89, 89, 93, 93, 94, 94, 96, 96,
	96, 97, 97, 95, 95, 71, 71, 73, 73, 72,
	74, 98, 98, 102, 99, 99, 103, 103, 103, 101,
	101, 101, 127, 127, 127, 106, 106, 114, 114, 115,
	115, 107, 107, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 117, 118, 118, 119, 119,
	119, 126, 126, 122, 122, 123, 123, 128, 128, 129,
	129, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 185, 186, 133, 134, 134, 134,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 4, 7, 8, 1, 1, 8, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 8, 4, 6, 5, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 1,
	3, 3, 8, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 0, 1, 2, 0, 2, 2, 2, 2,
	2, 2, 0, 3, 0, 1, 0, 3, 3, 0,
	2, 0, 2, 1, 2, 1, 0, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 1, 3, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 3, 3,
	3, 3, 4, 3, 6, 4, 2, 4, 2, 2,
	2, 2, 3, 1, 1, 0, 1, 0, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 3, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 3, 3, 3,
	3, 3, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 3, 4, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 4, 5, 6, 2, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 1, 2, 1, 2, 1, 2,
	3, 1, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 0, 4, 0, 3,
	3, 1, 3, 2, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -183, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -22, -23, -24,
	-21, -20, -3, -4, 6, 7, -28, 9, 10, 31,
	-16, 123, 124, 126, 125, 151, 127, 144, 51, 163,
	164, 166, 167, 146, 26, 145, 149, 150, -185, 8,
	247, 56, -184, 262, -83, 15, -27, 5, -25, -188,
	-25, -53, -25, 27, -52, -128, 59, -121, 255, 163,
	174, 168, 195, 187, 185, 188, 226, 67, 166, 235,
	147, 183, 179, 177, 28, 200, 260, 178, 142, 141,
	201, 205, 227, 172, 173, 229, 199, 143, 33, 257,
	36, 155, 230, 203, 198, 194, 197, 171, 193, 40,
	207, 206, 208, 225, 190, 180, 18, 233, 150, 153,
	202, 204, 137, 157, 259, 231, 176, 154, 149, 234,
	167, 228, 237, 39, 213, 170, 140, 164, 161, 191,
	156, 181, 182, 196, 169, 192, 165, 158, 151, 236,
	214, 261, 189, 186, 162, 132, 159, 160, 218, 219,
	220, 221, 258, 232, 184, 215, -25, -25, -25, -164,
	56, -119, 132, 72, 159, 239, 129, 130, 136, -122,
	59, -121, -107, 132, 134, 130, 130, 131, 132, 239,
	129, 130, -52, 130, 108, 188, 123, 216, 131, 33,
	157, -137, 130, -109, 160, 218, 219, 220, 221, 59,
	228, 227, 222, -128, 165, -1, 127, -133, -133, -133,
	-133, -2, -87, 17, 16, -5, -3, -185, 6, 21,
	22, -31, 41, 42, -26, -37, 99, -38, -128, -57,
	74, -62, 30, 59, -121, 24, -61, -58, -76, -74,
	-75, 108, 109, 97, 98, 105, 75, 110, -66, -64,
	-65, -67, 61, 60, 68, 62, 63, 64, 65, 69,
	70, 71, -122, -72, -185, 209, 45, 46, 248, 249,
	250, 251, 254, 252, 77, 35, 238, 246, 245, 244,
	242, 243, 240, 241, 135, 239, 103, 247, -60, 35,
	-2, -185, -107, -52, 112, -40, -41, -42, -43, -54,
	-75, -185, -52, 11, -47, -52, -99, -136, 165, -103,
	228, 227, -123, -101, -122, -120, 226, 188, 225, 128,
	73, 209, 23, 25, 211, 76, 108, 16, 77, 107,
	20, 248, 123, 49, 240, 241, 238, 250, 251, 239,
	216, 30, 10, 26, 145, 22, 101, 125, 80, 81,
	148, 24, 146, 71, 19, 52, 11, 13, 14, 135,
	134, 92, 131, 47, 8, 110, 27, 89, 43, 29,
	45, 90, 17, 242, 243, 32, 254, 152, 103, 50,
	34, 37, 74, 69, 53, 72, 15, 48, 91, 126,
	247, 46, 129, 6, 253, 31, 144, 44, 130, 217,
	79, 133, 70, 5, 136, 9, 51, 54, 244, 245,
	246, 35, 78, 12, -165, -160, 59, 131, -52, 247,
	-122, -115, 135, -115, -115, 130, -52, -52, -114, 135,
	59, -114, -114, -114, -52, -52, 59, 31, 239, 59,
	157, 130, 158, 132, -134, -185, -123, -134, -134, -134,
	161, 162, -134, -110, 223, 53, -134, -1, -186, 58,
	-88, 19, 32, -38, -128, -84, -85, -38, -83, -2,
	-25, 37, -29, 22, 66, 11, -125, 73, 72, 89,
	-124, 23, -122, 61, 112, -38, -59, 92, 74, 90,
	91, 117, 118, 119, 120, 121, 76, 94, 93, 104,
	97, 98, 99, 100, 101, 102, 103, 95, 96, 113,
	114, 115, 116, 111, 107, 122, 82, 83, 84, 85,
	86, 87, 88, -108, -185, -75, -185, -62, -62, -62,
	-62, -62, -62, -62, -185, -2, -70, -38, -185, -75,
	-185, -185, -185, -185, -185, -185, -185, -185, -79, -38,
	-185, -189, -185, -189, -189, -189, -189, -189, -189, -189,
	-185, -185, -185, -185, -94, 53, -71, -73, -72, -185,
	-2, -89, -122, -53, -129, -128, -120, 31, 57, -48,
	-50, -49, -51, 43, 47, 49, 44, 45, 46, 50,
	-132, 23, -40, -185, -131, 153, -130, 23, -128, 61,
	-52, -47, -187, 57, 11, 54, 57, -99, 165, -100,
	-104, 229, 231, 82, -127, -122, 61, 30, 31, 58,
	57, -139, -142, -144, -143, -145, -140, -141, 185, 186,
	108, 189, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 31, 147, 181, 182, 183, 184, 201, 202,
	203, 204, 205, 206, 207, 208, 168, 169, 170, 171,
	172, 173, 174, 176, 177, 178, 179, 180, 59, -134,
	132, -181, 54, 59, 74, 59, -52, -52, -134, 133,
	-52, 24, 53, -52, 59, 59, -134, -134, -134, -134,
	-134, -134, -134, -134, -134, -134, -112, 217, 224, -52,
	9, 92, 57, 18, 112, 57, -86, 25, 26, -87,
	-186, -31, -63, -122, 62, 65, -30, 44, -52, -38,
	-38, -68, 69, 74, 70, 71, -124, 99, -129, -123,
	-120, -62, -69, -72, -75, 61, 209, 65, 92, 90,
	91, 76, -62, -62, -61, -69, -69, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -138, 256, 190, 213,
	214, -139, -135, 59, 61, -62, 59, -36, 22, -35,
	-37, -186, 57, -186, -2, -35, -35, -38, -38, -76,
	-122, -128, -76, -35, -29, -77, -78, 78, -76, -186,
	-35, -36, -35, -35, 20, 57, -186, -186, -186, 57,
	112, -91, 153, -98, -102, -76, -41, -42, -42, -41,
	-42, 43, 43, 43, 48, 43, 48, 43, -49, -128,
	-186, -55, 51, 134, 52, -185, -130, -91, 54, -40,
	-52, -103, -100, 57, 230, 232, 233, 53, -38, -151,
	107, -166, -167, -168, -123, 61, 62, -160, -161, -169,
	137, 140, 136, -162, 131, 29, -156, 69, 74, -152,
	214, -146, 56, -146, -146, -146, -146, -150, 188, -150,
	-150, -150, 56, 56, -146, -146, -146, -154, 56, -154,
	-154, -155, 56, -155, -126, 54, -52, -179, 258, -180,
	59, -134, 24, -134, -116, 128, 125, 126, -176, 124,
	211, 188, 67, 30, 15, 248, 153, 261, 59, 154,
	-52, -52, -134, -111, 11, 92, 39, -38, -38, -129,
	-85, -88, -106, 19, 11, 35, 35, -35, 69, 70,
	71, 112, -185, 111, 263, -69, -62, -62, -62, -34,
	148, 73, 263, -146, 173, 173, -186, -186, -35, 57,
	-38, -186, -186, -186, 57, 54, 23, 57, 11, 112,
	57, 11, -186, -35, -80, -78, 80, -38, -186, -186,
	-186, -186, -186, -96, -97, 53, -122, 56, -73, 35,
	-2, -185, -122, -122, -60, 31, -185, -56, 57, 12,
	82, -45, -44, 53, 54, -46, 53, -44, 43, 43,
	131, 131, 131, -92, -122, -56, -40, -56, -104, -105,
	234, 231, 237, 59, 57, -168, 82, 56, 29, -162,
	-162, 59, 59, -147, 30, 69, -153, 215, 62, -150,
	-150, -151, 31, -151, -151, -151, -159, 61, -159, 62,
	62, 53, -122, -134, -178, -177, -123, -133, -182, 159,
	138, 139, 142, 141, 59, 131, 29, 137, 140, 153,
	136, -182, 159, -117, -118, 133, 23, 131, 29, 153,
	-134, -113, 90, 12, -128, -128, 40, 112, -52, -39,
	11, 99, -123, -36, -138, -70, -34, 73, -62, -62,
	264, -186, -37, -138, -135, -138, -62, -62, -123, -62,
	-62, 255, -83, 81, -38, 79, -95, 55, -151, 139,
	-90, -122, -71, -2, 112, -93, 53, -98, -92, -83,
	-102, -38, -38, -38, 56, -38, -185, -185, -185, -186,
	57, -83, -56, 231, 235, 236, -167, -168, -171, -170,
	-122, 59, 59, -149, 53, 61, 62, 63, 69, 238,
	68, 58, -151, -151, 59, 108, 58, 57, 58, 57,
	58, 57, -52, 57, 82, -133, -122, -133, -122, -52,
	-133, -122, 61, -38, -56, -40, -186, 264, -62, -186,
	-186, -186, -186, 57, 19, -186, 57, 19, -185, -33,
	253, -38, 34, 9, -56, -122, 57, 58, -186, -122,
	28, -93, -186, -87, -90, -90, -90, -90, -131, -122,
	-87, 58, 57, -146, -157, 211, 9, -150, 61, -150,
	62, 62, -134, -177, -168, 56, 27, -81, 13, -62,
	-62, -62, -62, -62, -186, 61, 31, -122, 29, 58,
	-186, -186, -186, -55, -173, -172, 54, 143, 67, -170,
	-158, 137, 29, 136, 238, -151, -151, 58, 58, -90,
	-185, -82, 14, 16, -186, -186, -186, -186, -32, 92,
	258, -103, 9, -172, 59, -163, 82, 61, -148, 67,
	29, 29, 58, -174, -175, 153, -38, -70, -186, 256,
	50, 259, -56, -98, 62, 61, -181, -186, 57, -122,
	40, 257, 260, -179, -175, 35, 40, 155, 258, 156,
	259, -185, 260, -62, 152, -186, -186,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 519, 0, 280, 280, 280, 280, 280, 280,
	0, 598, 581, 0, 0, 0, 0, -2, 269, 270,
	0, 272, 273, 0, 806, 806, 806, 806, 0, 35,
	36, 804, 1, 3, 527, 0, 0, 284, 287, 282,
	0, 0, 581, 0, 350, 351, 607, 608, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 0, 0, 0, 62,
	0, 0, 793, 0, 794, 579, 579, 579, 599, 600,
	603, 604, 0, 0, 582, 0, 577, 0, 577, 577,
	577, 0, 228, 0, 0, 0, 0, 807, 807, 807,
	807, 0, 807, 257, 246, 248, 249, 250, 251, 807,
	266, 267, 256, 268, 271, 274, 0, 276, 277, 278,
	279, 28, 531, 0, 0, 519, 30, 0, 280, 285,
	286, 290, 288, 289, 281, 0, 298, 302, 0, 359,
	0, 364, 366, -2, -2, 0, 409, 410, 411, 412,
	413, 0, 0, 0, 0, 0, 0, 0, 440, 441,
	442, 443, 504, 505, 506, 507, 508, 509, 510, 511,
	368, 369, 501, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 492, 0, 471, 471, 471, 471,
	471, 471, 471, 471, 0, 0, 0, 0, 546, 0,
	-2, 0, 0, 349, 0, 0, 309, 311, 312, 313,
	332, 0, 334, 0, 0, 43, 47, 0, 784, 564,
	-2, -2, 0, 0, 605, 606, -2, 713, -2, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 0, 79, 0, 0, 807, 0,
	69, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 0, 227, 229, 807, 807, 807, 807,
	807, 807, 807, 807, 238, 808, 809, 239, 240, 241,
	807, 807, 243, 0, 258, 0, 252, 275, 29, 805,
	23, 0, 0, 528, 0, 520, 521, 524, 527, 28,
	287, 0, 292, 291, 283, 0, 299, 0, 0, 0,
	303, 0, 305, 306, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 392, 393, 394,
	395, 396, 397, 365, 0, 384, 0, 433, 434, 435,
	436, 437, 438, 439, 294, 28, 0, 407, 0, 447,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 493,
	0, 463, 0, 464, 465, 466, 467, 468, 469, 470,
	0, 294, 0, 0, 32, 0, 534, 555, 557, 0,
	28, 0, 540, 45, 352, 609, 610, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 342, 0, 0, 0,
	0, 333, 0, 0, 353, 757, 335, 0, 337, 338,
	-2, 0, 0, 0, 41, 42, 0, 48, 784, 50,
	51, 0, 0, 0, 159, 572, 573, 574, 570, 187,
	0, 142, 138, 84, 85, 86, 131, 88, 131, 131,
	131, 131, 156, 156, 156, 156, 114, 115, 116, 117,
	118, 0, 0, 101, 131, 131, 131, 105, 121, 122,
	123, 124, 125, 126, 127, 128, 89, 90, 91, 92,
	93, 94, 95, 133, 133, 133, 135, 135, 601, 64,
	0, 72, 0, 807, 0, 807, 77, 0, 203, 0,
	222, 578, 0, 807, 225, 226, 230, 231, 232, 233,
	234, 235, 236, 237, 242, 245, 259, 253, 254, 247,
	532, 0, 0, 0, 0, 0, 523, 525, 526, 531,
	31, 290, 0, 512, 0, 0, 0, 293, 26, 360,
	361, 363, 385, 0, 387, 389, 304, 300, 0, 502,
	-2, 370, 371, 400, 401, 404, 0, 405, 0, 0,
	0, 0, 398, 375, 377, 378, 379, 380, 381, 0,
	414, 415, 416, 417, 418, 419, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 429, 430, 484, 131, 486,
	488, 491, 431, 482, 483, 432, 0, 0, 0, 295,
	296, 406, 0, 559, 28, 0, 0, 0, 0, 0,
	501, 0, 0, 0, 0, 499, 496, 0, 0, 472,
	0, 0, 0, 0, 548, 0, 558, -2, 0, 0,
	0, 0, 0, 357, 561, 0, 310, 328, 330, 0,
	325, 340, 341, 343, 0, 345, 0, 347, 348, 314,
	315, 316, 0, 0, 0, 0, 336, 357, 0, 357,
	44, 565, 49, 0, 0, 54, 55, 566, 567, 568,
	0, 78, 188, 190, 193, 194, 195, 80, 81, 0,
	0, 0, 0, 0, 182, 183, 145, 143, 0, 140,
	139, 87, 0, 156, 156, 108, 109, 159, 0, 159,
	159, 159, 0, 0, 102, 103, 104, 96, 0, 97,
	98, 99, 0, 100, 0, 0, 807, 66, 0, 70,
	71, 67, 580, 68, 806, 0, 0, 593, 204, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 0,
	221, 807, 224, 262, 0, 0, 0, 529, 530, 0,
	522, 24, 0, 575, 576, 513, 514, 307, 386, 388,
	390, 0, 294, 0, 0, 372, 398, 376, 0, 373,
	0, 0, 0, 485, 487, 489, 367, 444, 0, 0,
	408, -2, 448, 449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 0, 497, 0, 0, 462, 473,
	474, 475, 476, 0, 159, 0, 551, 0, 556, 0,
	-2, 0, 542, 541, 544, 0, 0, 519, 0, 0,
	0, 322, 329, 0, 0, 323, 0, 324, 344, 346,
	0, 0, 0, 0, 320, 519, 357, 40, 52, 53,
	0, 0, 59, 160, 0, 191, 0, 0, 177, 0,
	0, 180, 181, 152, 0, 144, 83, 141, 0, 159,
	159, 110, 0, 111, 112, 113, 0, 129, 0, 0,
	0, 0, 602, 65, 73, 74, 0, 196, 806, 0,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 806, 0, 0, 806, 594, 595, 596, 597, 0,
	223, 244, 0, 0, 260, 261, 533, 0, 25, 357,
	0, 301, 503, 0, 402, 0, 374, 0, 399, 382,
	490, 445, 297, 0, 0, 0, 0, 0, 502, 0,
	0, 0, 494, 461, 500, 0, 547, 0, 357, 0,
	0, 318, 537, 28, 0, 33, 0, 544, 0, 527,
	562, 358, 563, 326, 0, 331, 0, 0, 0, 334,
	0, 527, 39, 56, 57, 58, 189, 192, 0, 184,
	131, 178, 179, 154, 0, 146, 147, 148, 149, 150,
	151, 132, 106, 107, 157, 158, 156, 0, 156, 0,
	136, 0, 807, 0, 0, 197, 0, 198, 200, 201,
	202, 0, 263, 264, 515, 308, 446, 403, 383, 450,
	452, 451, 453, 0, 0, 456, 0, 0, 0, 0,
	0, 498, 553, 0, 549, 550, 0, 552, -2, 543,
	0, 34, 46, 37, 0, 0, 0, 0, 353, 321,
	38, 169, 0, 186, 161, 155, 0, 159, 130, 159,
	0, 0, 63, 75, 76, 0, 0, 517, 0, 0,
	0, 0, 0, 477, 460, 495, 0, 319, 0, 327,
	354, 355, 356, 317, 168, 170, 0, 175, 0, 185,
	166, 0, 163, 165, 153, 119, 120, 134, 137, 0,
	0, 27, 0, 0, 454, 455, 457, 458, 0, 0,
	0, 357, 0, 171, 172, 0, 176, 174, 82, 0,
	162, 164, 69, 0, 217, 0, 518, 516, 459, 0,
	0, 0, 554, 545, 173, 167, 72, 216, 0, 0,
	478, 0, 481, 199, 218, 0, 479, 0, 0, 0,
	0, 0, 480, 0, 0, 219, 220,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	56, 58, 99, 97, 57, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 262,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 263, 3, 264, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:327
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:332
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:333
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:337
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:361
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:369
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:373
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:379
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:402
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:406
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:412
		{
			fmt.Println("INSERT PARSE")
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[3].ins
			ins.Action = yyDollar[1].str
			//ins.Comments = $2
			//ins.Ignore = $3
			ins.Table = yyDollar[2].tableName
			ins.OnConflict = yyDollar[4].onConflict
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:424
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:436
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:448
		{
			fmt.Println("INSERT CALED")
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			fmt.Println("REPLACE CALED")
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:460
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:470
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:474
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:479
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:480
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:484
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:488
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:493
		{
			yyVAL.partitions = nil
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:497
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:507
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:511
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:515
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:521
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:525
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:531
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:545
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:549
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:553
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:557
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:563
		{
			yyVAL.str = SessionStr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
			yyVAL.str = GlobalStr
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:578
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:599
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:603
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:608
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:634
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:639
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:645
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:651
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:670
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:674
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:680
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:702
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:761
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:904
		{
			yyVAL.optVal = nil
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:908
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:917
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:935
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:975
		{
			yyVAL.optVal = nil
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:987
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:995
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:999
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1004
		{
			yyVAL.optVal = nil
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1008
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1022
		{
			yyVAL.str = ""
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1026
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1030
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1035
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1044
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1052
		{
			yyVAL.colKeyOpt = colKey
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1065
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1069
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1075
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1079
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1085
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1089
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1110
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1120
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1175
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1183
		{
			yyVAL.str = yyDollar[1].str
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1187
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1191
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1197
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1201
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1205
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1211
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1215
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1219
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1223
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1236
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1246
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1251
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1256
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1260
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1279
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1289
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1295
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1299
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1305
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1311
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1319
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1324
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1346
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1351
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1390
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1414
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1440
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1444
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1474
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1478
		{
			yyVAL.str = "extended "
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1484
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = "full "
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1494
		{
			yyVAL.str = ""
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1502
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1508
		{
			yyVAL.showFilter = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1512
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1516
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1522
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1526
		{
			yyVAL.str = SessionStr
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.str = GlobalStr
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1536
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1540
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Begin{}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Begin{}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.statement = &Commit{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Rollback{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[2].statement}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[3].statement, Analyze: true}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &OtherRead{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1595
		{
			setAllowComments(yylex, true)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1599
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1605
		{
			yyVAL.bytes2 = nil
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1609
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1615
		{
			yyVAL.str = UnionStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = UnionAllStr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1623
		{
			yyVAL.str = UnionDistinctStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1636
		{
			yyVAL.str = SQLCacheStr
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1641
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.str = DistinctStr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1650
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.str = StraightJoinHint
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1659
		{
			yyVAL.selectExprs = nil
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1673
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1683
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1687
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1691
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1696
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1704
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1711
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1716
		{
			yyVAL.tableExprs = nil
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1720
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1726
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1740
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1744
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1748
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1754
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1758
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1764
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1768
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1774
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1778
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1791
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1795
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1799
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1803
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1811
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1815
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1817
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1821
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1823
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1826
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1828
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1831
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1839
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = JoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1866
		{
			yyVAL.str = StraightJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1872
		{
			yyVAL.str = LeftJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = LeftJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = RightJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1884
		{
			yyVAL.str = RightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = NaturalJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1904
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1908
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1918
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1923
		{
			yyVAL.indexHints = nil
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1927
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1931
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1935
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1940
		{
			yyVAL.expr = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1944
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1954
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1958
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1962
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1966
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1974
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1980
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1984
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1990
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1994
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2000
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2004
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2008
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2012
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2016
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2020
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2024
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2030
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2034
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2038
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2046
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2050
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2054
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2058
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = IsNullStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = IsNotNullStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = IsTrueStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.str = IsNotTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.str = IsFalseStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2084
		{
			yyVAL.str = IsNotFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = EqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = LessThanStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = GreaterThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = LessEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = GreaterEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = NotEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2119
		{
			yyVAL.expr = nil
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2123
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.colTuple = &ConvertExpr{Expr: NewStrVal(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2141
		{
			yyVAL.colTuple = Array(yyDollar[3].exprs)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			// this is an array literal ('{a,b,c}', etc)
			// TODO this is weird and ugly but I need those quotes to be passed through
			tmp := make([]byte, len(yyDollar[1].bytes)+2)
			tmp[0] = '\''
			tmp[len(yyDollar[1].bytes)+1] = '\''
			copy(tmp[1:], yyDollar[1].bytes)
			yyVAL.colTuple = ListArg(tmp)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2155
		{
			// this is a positional parameter ($1, etc)
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2162
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2178
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2182
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2198
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2258
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &FunctionArgAssignmentExpr{Argument: yyDollar[1].expr, Operator: FuncArgAssignStr, Value: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2282
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2290
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2312
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2348
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("array"), Exprs: SelectExprs{&AliasedExpr{Expr: yyDollar[2].subquery}}}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2352
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 457:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 458:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 459:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2396
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2464
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2472
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2476
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2482
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2486
		{
			yyVAL.str = BooleanModeStr
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2490
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 480:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = QueryExpansionStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2514
		{
			yyVAL.convertType = &ConvertType{Type: "boolean"}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2538
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].convertType.Type + "[]"}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2542
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2556
		{
			yyVAL.str = string("")
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2566
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2570
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2576
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = nil
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2595
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2599
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &NullVal{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2657
		{
			yyVAL.exprs = nil
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2661
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = nil
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2675
		{
			yyVAL.orderBy = nil
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2679
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2685
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2689
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2695
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2700
		{
			yyVAL.str = AscScr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = AscScr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.str = DescScr
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2713
		{
			yyVAL.limit = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2721
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2725
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2730
		{
			yyVAL.str = ""
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2734
		{
			yyVAL.str = ForUpdateStr
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2738
		{
			yyVAL.str = ShareModeStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2751
		{
			fmt.Println("INSERT DATA 1")
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2756
		{
			fmt.Println("INSERT DATA 2")
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			fmt.Println("INSERT DATA 3")
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2767
		{
			fmt.Println("INSERT DATA 4")
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2772
		{
			fmt.Println("INSERT DATA 5")
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2777
		{
			fmt.Println("INSERT DATA 6")
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2793
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2797
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2802
		{
			fmt.Println("DUP 1")
			yyVAL.updateExprs = nil
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2807
		{
			fmt.Println("DUP 2")
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2813
		{
			yyVAL.onConflict = nil
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2817
		{
			yyVAL.onConflict = &OnConflict{Target: yyDollar[3].conflictTarget, Action: yyDollar[4].conflictAction}
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2822
		{
			yyVAL.conflictTarget = nil
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2826
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Columns: yyDollar[1].columns,
				Collate: yyDollar[2].str,
				Where:   NewWhere(WhereStr, yyDollar[3].expr),
			}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2834
		{
			fmt.Printf("CONSTRAINT IS %v\n", yyDollar[3].colIdent)
			yyVAL.conflictTarget = &ConflictTarget{
				Constraint: yyDollar[3].colIdent,
				Columns:    Columns{},
				Collate:    "",
				Where:      nil,
			}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2846
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2850
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2857
		{
			yyVAL.conflictAction = nil
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2861
		{
			yyVAL.conflictAction = &ConflictAction{
				Update: yyDollar[4].setExpr,
				Where:  NewWhere(WhereStr, yyDollar[5].expr),
			}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2874
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2884
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2910
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2916
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2926
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2932
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2936
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2940
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2947
		{
			yyVAL.bytes = []byte("charset")
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &Default{}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2971
		{
			yyVAL.byt = 0
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2973
		{
			yyVAL.byt = 1
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2976
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2978
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2981
		{
			yyVAL.str = ""
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.str = IgnoreStr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2989
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2993
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2997
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3001
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3008
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3010
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3012
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3016
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3021
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3028
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3045
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3051
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3055
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3062
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			decNesting(yylex)
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3295
		{
			forceEOF(yylex)
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3300
		{
			forceEOF(yylex)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3304
		{
			forceEOF(yylex)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3308
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
