// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func init() {
	yyErrorVerbose = true
}

//line sql.y:57
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	onConflict        *OnConflict
	conflictTarget    *ConflictTarget
	conflictAction    *ConflictAction
	insertOptions     InsertOptions
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const CONFLICT = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const NOTHING = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const DO = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const CONCAT = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const INTERVAL = 57437
const TYPECAST = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const JSON_SUBOBJECT_OP = 57441
const JSON_UNQUOTE_SUBOBJECT_OP = 57442
const JSON_TXT_STR_EXISTS_OP = 57443
const JSON_ANY_KEYS_EXIST_OP = 57444
const JSON_ALL_KEYS_EXIST_OP = 57445
const JSON_LEFT_CONTAINS_RIGHT_OP = 57446
const JSON_RIGHT_CONTAINS_LEFT_OP = 57447
const FUNCTION_ARG_ASSIGNMENT = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const CONSTRAINT = 57465
const SPATIAL = 57466
const FULLTEXT = 57467
const FOREIGN = 57468
const KEY_BLOCK_SIZE = 57469
const SHOW = 57470
const DESCRIBE = 57471
const EXPLAIN = 57472
const DATE = 57473
const ESCAPE = 57474
const REPAIR = 57475
const OPTIMIZE = 57476
const TRUNCATE = 57477
const MAXVALUE = 57478
const PARTITION = 57479
const REORGANIZE = 57480
const LESS = 57481
const THAN = 57482
const PROCEDURE = 57483
const TRIGGER = 57484
const VINDEX = 57485
const VINDEXES = 57486
const STATUS = 57487
const VARIABLES = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const REAL = 57502
const DOUBLE = 57503
const FLOAT_TYPE = 57504
const DECIMAL = 57505
const NUMERIC = 57506
const TIME = 57507
const TIMESTAMP = 57508
const DATETIME = 57509
const YEAR = 57510
const CHAR = 57511
const VARCHAR = 57512
const BOOL = 57513
const CHARACTER = 57514
const VARBINARY = 57515
const NCHAR = 57516
const TEXT = 57517
const TINYTEXT = 57518
const MEDIUMTEXT = 57519
const LONGTEXT = 57520
const BLOB = 57521
const TINYBLOB = 57522
const MEDIUMBLOB = 57523
const LONGBLOB = 57524
const JSON = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const ARRAY = 57535
const NULLX = 57536
const AUTO_INCREMENT = 57537
const APPROXNUM = 57538
const SIGNED = 57539
const UNSIGNED = 57540
const ZEROFILL = 57541
const DATABASES = 57542
const TABLES = 57543
const VITESS_KEYSPACES = 57544
const VITESS_SHARDS = 57545
const VITESS_TABLETS = 57546
const VSCHEMA_TABLES = 57547
const EXTENDED = 57548
const FULL = 57549
const PROCESSLIST = 57550
const NAMES = 57551
const CHARSET = 57552
const GLOBAL = 57553
const SESSION = 57554
const ISOLATION = 57555
const LEVEL = 57556
const READ = 57557
const WRITE = 57558
const ONLY = 57559
const REPEATABLE = 57560
const COMMITTED = 57561
const UNCOMMITTED = 57562
const SERIALIZABLE = 57563
const CURRENT_TIMESTAMP = 57564
const DATABASE = 57565
const CURRENT_DATE = 57566
const CURRENT_TIME = 57567
const LOCALTIME = 57568
const LOCALTIMESTAMP = 57569
const UTC_DATE = 57570
const UTC_TIME = 57571
const UTC_TIMESTAMP = 57572
const REPLACE = 57573
const CONVERT = 57574
const CAST = 57575
const SUBSTR = 57576
const SUBSTRING = 57577
const GROUP_CONCAT = 57578
const SEPARATOR = 57579
const MATCH = 57580
const AGAINST = 57581
const BOOLEAN = 57582
const LANGUAGE = 57583
const WITH = 57584
const QUERY = 57585
const EXPANSION = 57586
const UNUSED = 57587

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"CONFLICT",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NOTHING",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"DO",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"CONCAT",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"TYPECAST",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"FUNCTION_ARG_ASSIGNMENT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	162, 266,
	163, 266,
	-2, 256,
	-1, 242,
	113, 612,
	-2, 608,
	-1, 243,
	113, 613,
	-2, 609,
	-1, 315,
	83, 774,
	-2, 61,
	-1, 316,
	83, 734,
	-2, 62,
	-1, 321,
	83, 717,
	-2, 574,
	-1, 323,
	83, 755,
	-2, 576,
	-1, 595,
	54, 44,
	57, 44,
	-2, 46,
	-1, 728,
	113, 615,
	-2, 611,
	-1, 956,
	5, 29,
	-2, 407,
	-1, 981,
	5, 28,
	-2, 540,
	-1, 1192,
	5, 29,
	-2, 541,
	-1, 1236,
	5, 28,
	-2, 543,
	-1, 1308,
	5, 29,
	-2, 544,
}

const yyPrivate = 57344

const yyLast = 11508

var yyAct = [...]int16{
	274, 48, 1294, 892, 984, 808, 666, 541, 844, 1247,
	1106, 826, 1134, 1107, 1042, 273, 221, 848, 1103, 54,
	847, 216, 1198, 587, 809, 589, 872, 1000, 771, 781,
	1045, 1033, 320, 944, 605, 866, 858, 989, 792, 730,
	470, 778, 886, 464, 48, 604, 882, 765, 805, 48,
	250, 418, 314, 245, 576, 476, 301, 226, 591, 924,
	484, 783, 770, 306, 230, 311, 309, 217, 218, 219,
	247, 1087, 947, 939, 909, 53, 1336, 463, 1318, 1333,
	1301, 1330, 893, 1317, 1093, 1186, 300, 422, 1256, 908,
	234, 3, 1008, 1300, 1128, 1007, 553, 606, 1009, 607,
	780, 839, 184, 180, 181, 182, 302, 1129, 1130, 840,
	841, 458, 777, 448, 695, 2, 1024, 865, 913, 1210,
	443, 696, 873, 950, 949, 213, 907, 1140, 1141, 1142,
	454, 455, 1332, 1329, 1145, 1143, 1295, 1066, 806, 1305,
	220, 431, 432, 1267, 502, 501, 511, 512, 504, 505,
	506, 507, 508, 509, 510, 503, 1254, 1248, 518, 214,
	425, 177, 517, 178, 513, 514, 515, 516, 178, 51,
	1250, 860, 243, 519, 733, 827, 829, 665, 735, 674,
	999, 998, 1281, 428, 904, 901, 902, 997, 900, 420,
	1195, 192, 445, 179, 447, 58, 1074, 449, 449, 449,
	449, 1018, 449, 860, 77, 968, 936, 702, 189, 449,
	488, 189, 183, 911, 914, 438, 48, 938, 1149, 444,
	446, 60, 61, 62, 63, 64, 845, 48, 699, 483,
	1286, 1053, 1159, 987, 608, 189, 189, 77, 482, 1063,
	481, 189, 528, 77, 472, 530, 1065, 1249, 906, 517,
	919, 513, 514, 515, 516, 1094, 483, 1070, 793, 828,
	519, 1051, 669, 531, 1255, 1253, 1022, 1289, 1150, 1172,
	793, 905, 965, 539, 859, 543, 478, 530, 545, 546,
	547, 548, 549, 947, 552, 554, 554, 554, 554, 554,
	554, 554, 554, 562, 563, 564, 565, 566, 567, 568,
	1299, 442, 296, 297, 298, 1144, 859, 588, 910, 1268,
	1310, 451, 452, 453, 739, 456, 860, 960, 473, 1216,
	959, 912, 460, 734, 434, 435, 436, 862, 737, 738,
	736, 461, 920, 863, 1052, 482, 1069, 481, 198, 1057,
	1054, 1047, 1048, 1055, 1050, 1049, 419, 424, 1215, 1064,
	189, 1062, 189, 483, 1037, 482, 1056, 481, 189, 1036,
	705, 706, 1059, 1096, 208, 189, 540, 1284, 1311, 77,
	77, 77, 77, 483, 77, 596, 1025, 701, 602, 1287,
	481, 77, 555, 556, 557, 558, 559, 560, 561, 506,
	507, 508, 509, 510, 503, 1230, 483, 518, 540, 1213,
	772, 517, 773, 513, 514, 515, 516, 1167, 482, 77,
	481, 176, 519, 1034, 193, 1137, 700, 1240, 1323, 859,
	426, 427, 449, 474, 857, 855, 483, 1136, 856, 195,
	449, 482, 1019, 481, 1314, 463, 201, 197, 961, 1240,
	1292, 449, 449, 449, 449, 449, 449, 449, 449, 483,
	933, 934, 935, 1240, 463, 449, 449, 240, 503, 1240,
	1241, 518, 1010, 199, 895, 517, 203, 513, 514, 515,
	516, 683, 189, 299, 1207, 1206, 519, 1125, 463, 189,
	189, 189, 616, 1194, 463, 77, 1156, 1155, 482, 707,
	481, 77, 775, 518, 194, 1152, 1153, 517, 681, 513,
	514, 515, 516, 720, 722, 723, 483, 731, 519, 721,
	1152, 1151, 731, 731, 954, 463, 573, 463, 783, 463,
	463, 728, 196, 680, 204, 205, 206, 207, 211, 679,
	670, 48, 668, 210, 209, 664, 744, 745, 663, 709,
	615, 614, 986, 673, 543, 440, 724, 599, 726, 742,
	433, 419, 1260, 1259, 684, 685, 686, 687, 688, 689,
	690, 691, 263, 743, 265, 266, 267, 268, 692, 693,
	264, 269, 1146, 985, 306, 306, 306, 306, 306, 24,
	1104, 986, 776, 55, 985, 783, 572, 985, 450, 588,
	600, 830, 833, 598, 77, 598, 1077, 1190, 306, 272,
	189, 189, 77, 573, 189, 799, 1158, 189, 1235, 1154,
	1011, 189, 573, 77, 77, 77, 77, 77, 77, 77,
	77, 834, 540, 794, 804, 954, 573, 77, 77, 51,
	811, 75, 189, 814, 838, 785, 954, 802, 803, 823,
	601, 1184, 954, 810, 832, 703, 786, 787, 77, 837,
	790, 831, 189, 317, 836, 874, 875, 876, 77, 868,
	869, 870, 871, 798, 319, 800, 801, 852, 51, 449,
	423, 449, 1220, 867, 1119, 879, 880, 881, 1303, 449,
	785, 812, 813, 22, 815, 976, 462, 578, 581, 582,
	583, 579, 24, 580, 584, 974, 1014, 990, 991, 887,
	1139, 883, 878, 227, 24, 888, 884, 885, 877, 532,
	533, 534, 535, 536, 537, 538, 502, 501, 511, 512,
	504, 505, 506, 507, 508, 509, 510, 503, 937, 979,
	518, 975, 66, 980, 517, 728, 513, 514, 515, 516,
	225, 973, 51, 189, 925, 519, 189, 189, 189, 189,
	189, 926, 731, 51, 51, 990, 991, 667, 189, 890,
	1104, 189, 1038, 993, 677, 189, 459, 820, 818, 996,
	189, 189, 821, 819, 77, 822, 940, 582, 583, 715,
	995, 817, 896, 816, 898, 231, 232, 77, 1327, 1316,
	1073, 921, 917, 477, 1326, 1320, 319, 319, 319, 319,
	931, 319, 1328, 948, 930, 1029, 982, 983, 319, 475,
	578, 581, 582, 583, 579, 932, 580, 584, 465, 613,
	1319, 441, 1021, 1291, 1290, 1233, 1015, 1221, 1232, 1188,
	964, 466, 897, 676, 306, 586, 486, 1002, 189, 1004,
	477, 77, 222, 77, 228, 229, 929, 189, 1265, 223,
	189, 77, 994, 55, 928, 1264, 1223, 1003, 986, 479,
	1278, 1211, 698, 57, 59, 1012, 597, 52, 1, 894,
	1041, 903, 1293, 1005, 1246, 1133, 854, 846, 417, 65,
	953, 1028, 1285, 1030, 1031, 1032, 853, 1252, 1209, 861,
	1023, 864, 449, 1016, 1017, 1026, 1027, 981, 1138, 1288,
	1020, 317, 620, 618, 619, 977, 617, 622, 621, 200,
	1035, 312, 319, 585, 609, 889, 480, 449, 610, 67,
	1061, 1044, 511, 512, 504, 505, 506, 507, 508, 509,
	510, 503, 1058, 1060, 518, 899, 1068, 694, 517, 918,
	513, 514, 515, 516, 457, 202, 527, 1082, 729, 519,
	927, 740, 741, 1006, 318, 468, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 1083, 1274, 774, 1273, 1080,
	1302, 1109, 1231, 48, 1089, 1105, 1081, 1187, 1111, 1091,
	704, 187, 469, 1263, 212, 1222, 1108, 1102, 1121, 1122,
	1123, 728, 963, 77, 1114, 1040, 189, 1090, 1127, 1092,
	1115, 1113, 550, 791, 248, 719, 237, 261, 187, 187,
	77, 319, 1126, 258, 187, 260, 259, 275, 710, 319,
	1067, 1132, 1131, 978, 490, 1147, 1148, 246, 238, 304,
	319, 319, 319, 319, 319, 319, 319, 319, 569, 577,
	810, 575, 574, 992, 319, 319, 810, 988, 303, 1076,
	1185, 1266, 714, 77, 77, 26, 77, 1160, 56, 233,
	19, 18, 17, 20, 1110, 711, 21, 727, 306, 16,
	1162, 1169, 15, 1165, 14, 486, 30, 13, 319, 77,
	12, 11, 189, 189, 1177, 10, 9, 8, 7, 6,
	189, 1170, 5, 4, 224, 23, 0, 0, 0, 77,
	0, 504, 505, 506, 507, 508, 509, 510, 503, 0,
	249, 518, 0, 236, 1189, 517, 0, 513, 514, 515,
	516, 1197, 0, 187, 0, 187, 519, 0, 0, 0,
	0, 187, 0, 1205, 1200, 1201, 1202, 0, 187, 1012,
	1203, 0, 795, 0, 0, 77, 77, 0, 449, 0,
	708, 0, 0, 0, 0, 0, 795, 795, 0, 0,
	0, 1208, 795, 1218, 0, 0, 0, 1219, 1212, 0,
	1214, 0, 0, 305, 77, 0, 77, 77, 0, 0,
	317, 1109, 0, 0, 1237, 941, 942, 943, 0, 0,
	0, 319, 0, 849, 1234, 0, 1108, 0, 0, 0,
	1053, 189, 0, 0, 319, 1245, 0, 0, 0, 77,
	1251, 1257, 1262, 1258, 0, 0, 0, 782, 784, 0,
	0, 0, 77, 189, 0, 0, 1109, 0, 48, 77,
	1051, 797, 0, 1261, 0, 0, 1279, 77, 0, 0,
	189, 1108, 0, 0, 0, 187, 1283, 0, 0, 0,
	0, 0, 187, 593, 187, 0, 0, 0, 319, 0,
	319, 1217, 0, 1297, 825, 0, 0, 0, 319, 0,
	0, 0, 0, 1304, 1307, 1236, 0, 0, 0, 0,
	0, 727, 77, 0, 77, 77, 77, 189, 77, 1312,
	1306, 0, 319, 0, 77, 0, 0, 0, 0, 1321,
	0, 0, 0, 1052, 0, 0, 1324, 1325, 1057, 1054,
	1047, 1048, 1055, 1050, 1049, 0, 0, 0, 0, 1280,
	77, 77, 77, 1335, 1331, 1056, 1334, 0, 0, 0,
	0, 1046, 0, 0, 0, 0, 467, 471, 0, 810,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 489, 0, 529, 0, 77, 77, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 187, 187, 0, 0, 187, 0, 0,
	187, 0, 0, 77, 682, 0, 0, 544, 542, 810,
	0, 0, 0, 1085, 1086, 77, 551, 0, 0, 0,
	0, 0, 0, 77, 0, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 305, 0, 0,
	1001, 1098, 1099, 1100, 1101, 187, 849, 0, 0, 0,
	0, 0, 0, 0, 682, 0, 0, 319, 0, 0,
	77, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 951, 0, 0, 952, 0, 0, 77, 0,
	0, 307, 956, 957, 958, 0, 0, 962, 77, 0,
	0, 967, 1043, 0, 0, 969, 970, 971, 972, 0,
	1039, 319, 0, 319, 0, 237, 0, 0, 0, 0,
	0, 237, 237, 0, 0, 237, 0, 186, 796, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 237, 237,
	237, 237, 796, 796, 0, 1079, 187, 0, 796, 187,
	187, 187, 187, 187, 0, 310, 319, 0, 0, 0,
	421, 824, 1173, 0, 187, 0, 0, 0, 593, 0,
	0, 0, 0, 187, 187, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 795,
	0, 0, 1112, 1001, 0, 795, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	849, 0, 849, 0, 0, 717, 718, 0, 0, 0,
	0, 319, 732, 319, 1135, 0, 0, 732, 732, 0,
	0, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 187, 0, 1224, 0, 0, 1225, 1226,
	1088, 1227, 1228, 0, 0, 0, 1161, 0, 0, 429,
	0, 430, 0, 0, 0, 0, 0, 437, 682, 1163,
	0, 0, 0, 1079, 439, 0, 1166, 542, 0, 0,
	237, 788, 789, 0, 319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1124, 0, 0,
	0, 0, 0, 0, 305, 305, 305, 305, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 305, 1199,
	849, 1199, 1199, 1199, 0, 1204, 0, 0, 0, 0,
	0, 319, 843, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1043, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 319, 319, 319,
	237, 0, 0, 0, 0, 0, 0, 1171, 0, 1181,
	0, 571, 0, 0, 0, 0, 0, 1174, 1175, 1176,
	595, 0, 0, 0, 0, 1179, 0, 1182, 0, 187,
	0, 0, 0, 1337, 1238, 1239, 1191, 1192, 1193, 0,
	1196, 0, 0, 0, 0, 0, 0, 1135, 502, 501,
	511, 512, 504, 505, 506, 507, 508, 509, 510, 503,
	1199, 0, 518, 0, 922, 923, 517, 471, 513, 514,
	515, 516, 1276, 0, 0, 0, 0, 519, 0, 0,
	1282, 0, 0, 0, 502, 501, 511, 512, 504, 505,
	506, 507, 508, 509, 510, 503, 0, 732, 518, 0,
	0, 0, 517, 945, 513, 514, 515, 516, 0, 0,
	0, 0, 1229, 519, 0, 1071, 1072, 1199, 795, 0,
	0, 1309, 0, 187, 0, 0, 0, 1242, 1243, 1244,
	0, 0, 0, 237, 0, 1315, 0, 0, 0, 671,
	672, 0, 0, 675, 0, 1322, 678, 955, 0, 0,
	237, 0, 1269, 1270, 1271, 1272, 0, 966, 0, 0,
	0, 0, 0, 0, 682, 0, 0, 0, 795, 0,
	0, 697, 0, 0, 0, 796, 0, 0, 0, 0,
	0, 796, 0, 0, 0, 0, 24, 25, 49, 27,
	28, 716, 0, 1298, 305, 0, 0, 24, 25, 49,
	27, 28, 0, 0, 0, 44, 0, 1308, 0, 0,
	0, 29, 0, 0, 0, 0, 44, 0, 0, 0,
	1313, 0, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 0, 0, 187, 0, 51, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 1339, 1340, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 31, 32, 34, 33, 36, 0,
	835, 192, 0, 0, 0, 31, 32, 34, 33, 215,
	593, 0, 0, 0, 0, 37, 45, 43, 0, 1095,
	46, 47, 35, 0, 0, 0, 37, 45, 43, 0,
	0, 46, 47, 35, 39, 40, 0, 41, 42, 0,
	1116, 1117, 0, 0, 1118, 39, 40, 1120, 41, 42,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 779,
	0, 244, 0, 0, 0, 95, 90, 891, 241, 0,
	0, 109, 126, 283, 111, 0, 915, 145, 120, 916,
	0, 0, 0, 277, 278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 242, 263, 262,
	265, 266, 267, 268, 0, 87, 264, 269, 270, 271,
	0, 0, 0, 239, 256, 0, 282, 0, 50, 0,
	0, 0, 0, 0, 1168, 0, 0, 0, 305, 50,
	0, 0, 0, 0, 0, 0, 253, 254, 235, 0,
	0, 0, 294, 0, 255, 0, 0, 251, 252, 257,
	1178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 542, 796, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 292, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 796, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 276, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 284, 293, 290,
	291, 288, 289, 287, 286, 285, 295, 279, 280, 296,
	297, 298, 0, 281, 78, 0, 110, 172, 136, 97,
	163, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1296, 542,
	0, 0, 0, 0, 0, 0, 0, 406, 396, 1075,
	368, 408, 346, 360, 416, 361, 362, 389, 332, 376,
	128, 358, 0, 349, 327, 355, 328, 347, 370, 95,
	90, 373, 345, 398, 379, 109, 126, 414, 111, 384,
	0, 145, 120, 0, 0, 372, 400, 374, 394, 367,
	390, 337, 383, 409, 359, 387, 410, 0, 0, 0,
	0, 76, 0, 850, 851, 0, 0, 0, 0, 87,
	0, 386, 405, 357, 388, 0, 325, 385, 0, 330,
	333, 415, 403, 352, 353, 1013, 0, 0, 0, 0,
	0, 0, 371, 375, 391, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 382, 0, 0, 0,
	334, 331, 0, 369, 0, 0, 0, 0, 0, 0,
	1157, 0, 0, 0, 0, 0, 336, 0, 351, 392,
	0, 324, 395, 401, 366, 190, 404, 364, 363, 407,
	134, 0, 1164, 148, 100, 99, 108, 399, 348, 356,
	91, 354, 140, 130, 160, 381, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 326, 0, 329, 0, 146, 162, 175, 344,
	402, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 340, 343, 338, 339, 377, 378, 411, 412, 413,
	393, 335, 0, 341, 342, 0, 397, 380, 78, 0,
	110, 172, 136, 97, 163, 406, 396, 0, 368, 408,
	346, 360, 416, 361, 362, 389, 332, 376, 128, 358,
	0, 349, 327, 355, 328, 347, 370, 95, 90, 373,
	345, 398, 379, 109, 126, 414, 111, 384, 0, 145,
	120, 0, 0, 372, 400, 374, 394, 367, 390, 337,
	383, 409, 359, 387, 410, 0, 0, 0, 0, 76,
	0, 850, 851, 0, 0, 0, 0, 87, 0, 386,
	405, 357, 388, 0, 325, 385, 0, 330, 333, 415,
	403, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	371, 375, 391, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 382, 0, 0, 0, 334, 331,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 351, 392, 0, 324,
	395, 401, 366, 190, 404, 364, 363, 407, 134, 0,
	0, 148, 100, 99, 108, 399, 348, 356, 91, 354,
	140, 130, 160, 381, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	326, 0, 329, 0, 146, 162, 175, 344, 402, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 340,
	343, 338, 339, 377, 378, 411, 412, 413, 393, 335,
	0, 341, 342, 0, 397, 380, 78, 0, 110, 172,
	136, 97, 163, 406, 396, 0, 368, 408, 346, 360,
	416, 361, 362, 389, 332, 376, 128, 358, 0, 349,
	327, 355, 328, 347, 370, 95, 90, 373, 345, 398,
	379, 109, 126, 414, 111, 384, 0, 145, 120, 0,
	0, 372, 400, 374, 394, 367, 390, 337, 383, 409,
	359, 387, 410, 0, 51, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 386, 405, 357,
	388, 0, 325, 385, 0, 330, 333, 415, 403, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 371, 375,
	391, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	350, 0, 382, 0, 0, 0, 334, 331, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 351, 392, 0, 324, 395, 401,
	366, 190, 404, 364, 363, 407, 134, 0, 0, 148,
	100, 99, 108, 399, 348, 356, 91, 354, 140, 130,
	160, 381, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 326, 0,
	329, 0, 146, 162, 175, 344, 402, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 340, 343, 338,
	339, 377, 378, 411, 412, 413, 393, 335, 0, 341,
	342, 0, 397, 380, 78, 0, 110, 172, 136, 97,
	163, 406, 396, 0, 368, 408, 346, 360, 416, 361,
	362, 389, 332, 376, 128, 358, 0, 349, 327, 355,
	328, 347, 370, 95, 90, 373, 345, 398, 379, 109,
	126, 414, 111, 384, 0, 145, 120, 0, 0, 372,
	400, 374, 394, 367, 390, 337, 383, 409, 359, 387,
	410, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 386, 405, 357, 388, 0,
	325, 385, 0, 330, 333, 415, 403, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 371, 375, 391, 365,
	0, 0, 0, 0, 0, 0, 1078, 0, 350, 0,
	382, 0, 0, 0, 334, 331, 0, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 351, 392, 0, 324, 395, 401, 366, 190,
	404, 364, 363, 407, 134, 0, 0, 148, 100, 99,
	108, 399, 348, 356, 91, 354, 140, 130, 160, 381,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 326, 0, 329, 0,
	146, 162, 175, 344, 402, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 340, 343, 338, 339, 377,
	378, 411, 412, 413, 393, 335, 0, 341, 342, 0,
	397, 380, 78, 0, 110, 172, 136, 97, 163, 406,
	396, 0, 368, 408, 346, 360, 416, 361, 362, 389,
	332, 376, 128, 358, 0, 349, 327, 355, 328, 347,
	370, 95, 90, 373, 345, 398, 379, 109, 126, 414,
	111, 384, 0, 145, 120, 0, 0, 372, 400, 374,
	394, 367, 390, 337, 383, 409, 359, 387, 410, 0,
	0, 0, 0, 242, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 386, 405, 357, 388, 0, 325, 385,
	0, 330, 333, 415, 403, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 371, 375, 391, 365, 0, 0,
	0, 0, 0, 0, 725, 0, 350, 0, 382, 0,
	0, 0, 334, 331, 0, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	351, 392, 0, 324, 395, 401, 366, 190, 404, 364,
	363, 407, 134, 0, 0, 148, 100, 99, 108, 399,
	348, 356, 91, 354, 140, 130, 160, 381, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 326, 0, 329, 0, 146, 162,
	175, 344, 402, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 340, 343, 338, 339, 377, 378, 411,
	412, 413, 393, 335, 0, 341, 342, 0, 397, 380,
	78, 0, 110, 172, 136, 97, 163, 406, 396, 0,
	368, 408, 346, 360, 416, 361, 362, 389, 332, 376,
	128, 358, 0, 349, 327, 355, 328, 347, 370, 95,
	90, 373, 345, 398, 379, 109, 126, 414, 111, 384,
	0, 145, 120, 0, 0, 372, 400, 374, 394, 367,
	390, 337, 383, 409, 359, 387, 410, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 386, 405, 357, 388, 0, 325, 385, 0, 330,
	333, 415, 403, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 371, 375, 391, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 382, 0, 0, 0,
	334, 331, 0, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 351, 392,
	0, 324, 395, 401, 366, 190, 404, 364, 363, 407,
	134, 0, 0, 148, 100, 99, 108, 399, 348, 356,
	91, 354, 140, 130, 160, 381, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 326, 0, 329, 0, 146, 162, 175, 344,
	402, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 340, 343, 338, 339, 377, 378, 411, 412, 413,
	393, 335, 0, 341, 342, 0, 397, 380, 78, 0,
	110, 172, 136, 97, 163, 406, 396, 0, 368, 408,
	346, 360, 416, 361, 362, 389, 332, 376, 128, 358,
	0, 349, 327, 355, 328, 347, 370, 95, 90, 373,
	345, 398, 379, 109, 126, 414, 111, 384, 0, 145,
	120, 0, 0, 372, 400, 374, 394, 367, 390, 337,
	383, 409, 359, 387, 410, 0, 0, 0, 0, 242,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 386,
	405, 357, 388, 0, 325, 385, 0, 330, 333, 415,
	403, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	371, 375, 391, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 382, 0, 0, 0, 334, 331,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 351, 392, 0, 324,
	395, 401, 366, 190, 404, 364, 363, 407, 134, 0,
	0, 148, 100, 99, 108, 399, 348, 356, 91, 354,
	140, 130, 160, 381, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	326, 0, 329, 0, 146, 162, 175, 344, 402, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 340,
	343, 338, 339, 377, 378, 411, 412, 413, 393, 335,
	0, 341, 342, 0, 397, 380, 78, 0, 110, 172,
	136, 97, 163, 406, 396, 0, 368, 408, 346, 360,
	416, 361, 362, 389, 332, 376, 128, 358, 0, 349,
	327, 355, 328, 347, 370, 95, 90, 373, 345, 398,
	379, 109, 126, 414, 111, 384, 0, 145, 120, 0,
	0, 372, 400, 374, 394, 367, 390, 337, 383, 409,
	359, 387, 410, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 386, 405, 357,
	388, 0, 325, 385, 0, 330, 333, 415, 403, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 371, 375,
	391, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	350, 0, 382, 0, 0, 0, 334, 331, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 351, 392, 0, 324, 395, 401,
	366, 190, 404, 364, 363, 407, 134, 0, 0, 148,
	100, 99, 108, 399, 348, 356, 91, 354, 140, 130,
	160, 381, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 322, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 326, 0,
	329, 0, 146, 162, 175, 344, 402, 168, 169, 170,
	171, 0, 0, 0, 323, 321, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 340, 343, 338,
	339, 377, 378, 411, 412, 413, 393, 335, 0, 341,
	342, 0, 397, 380, 78, 0, 110, 172, 136, 97,
	163, 406, 396, 0, 368, 408, 346, 360, 416, 361,
	362, 389, 332, 376, 128, 358, 0, 349, 327, 355,
	328, 347, 370, 95, 90, 373, 345, 398, 379, 109,
	126, 414, 111, 384, 0, 145, 120, 0, 0, 372,
	400, 374, 394, 367, 390, 337, 383, 409, 359, 387,
	410, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 386, 405, 357, 388, 0,
	325, 385, 0, 330, 333, 415, 403, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 371, 375, 391, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 350, 0,
	382, 0, 0, 0, 334, 331, 0, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 351, 392, 0, 324, 395, 401, 366, 190,
	404, 364, 363, 407, 134, 0, 0, 148, 100, 99,
	108, 399, 348, 356, 91, 354, 140, 130, 160, 381,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 326, 0, 329, 0,
	146, 162, 175, 344, 402, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 340, 343, 338, 339, 377,
	378, 411, 412, 413, 393, 335, 0, 341, 342, 0,
	397, 380, 78, 0, 110, 172, 136, 97, 163, 406,
	396, 0, 368, 408, 346, 360, 416, 361, 362, 389,
	332, 376, 128, 358, 0, 349, 327, 355, 328, 347,
	370, 95, 90, 373, 345, 398, 379, 109, 126, 414,
	111, 384, 0, 145, 120, 0, 0, 372, 400, 374,
	394, 367, 390, 337, 383, 409, 359, 387, 410, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 386, 405, 357, 388, 0, 325, 385,
	0, 330, 333, 415, 403, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 371, 375, 391, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 0, 382, 0,
	0, 0, 334, 331, 0, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	351, 392, 0, 324, 395, 401, 366, 190, 404, 364,
	363, 407, 134, 0, 0, 148, 100, 99, 108, 399,
	348, 356, 91, 354, 140, 130, 160, 381, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	603, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 322, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 326, 0, 329, 0, 146, 162,
	175, 344, 402, 168, 169, 170, 171, 0, 0, 0,
	323, 321, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 340, 343, 338, 339, 377, 378, 411,
	412, 413, 393, 335, 0, 341, 342, 0, 397, 380,
	78, 0, 110, 172, 136, 97, 163, 406, 396, 0,
	368, 408, 346, 360, 416, 361, 362, 389, 332, 376,
	128, 358, 0, 349, 327, 355, 328, 347, 370, 95,
	90, 373, 345, 398, 379, 109, 126, 414, 111, 384,
	0, 145, 120, 0, 0, 372, 400, 374, 394, 367,
	390, 337, 383, 409, 359, 387, 410, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 386, 405, 357, 388, 0, 325, 385, 0, 330,
	333, 415, 403, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 371, 375, 391, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 382, 0, 0, 0,
	334, 331, 0, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 351, 392,
	0, 324, 395, 401, 366, 190, 404, 364, 363, 407,
	134, 0, 0, 148, 100, 99, 108, 399, 348, 356,
	91, 354, 140, 130, 160, 381, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 313, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 322, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 326, 0, 329, 0, 146, 162, 175, 344,
	402, 168, 169, 170, 171, 0, 0, 0, 323, 321,
	316, 315, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 340, 343, 338, 339, 377, 378, 411, 412, 413,
	393, 335, 0, 341, 342, 0, 397, 380, 78, 0,
	110, 172, 136, 97, 163, 128, 0, 0, 0, 0,
	244, 0, 0, 0, 95, 90, 0, 241, 0, 0,
	109, 126, 283, 111, 0, 0, 145, 120, 0, 0,
	0, 0, 277, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 463, 242, 263, 262, 265,
	266, 267, 268, 0, 87, 264, 269, 270, 271, 0,
	0, 0, 239, 256, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 0, 0, 0,
	0, 294, 0, 255, 0, 0, 251, 252, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 292, 0, 134, 0, 0, 148, 100,
	99, 108, 0, 0, 0, 91, 0, 140, 130, 160,
	0, 131, 139, 112, 152, 135, 159, 191, 167, 150,
	166, 79, 149, 158, 88, 142, 81, 156, 147, 118,
	104, 105, 80, 0, 138, 94, 98, 93, 127, 153,
	154, 92, 174, 84, 165, 83, 85, 164, 125, 151,
	157, 119, 116, 82, 155, 117, 115, 107, 96, 101,
	132, 114, 133, 102, 122, 121, 123, 276, 0, 0,
	0, 146, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 124, 86, 103, 143, 106, 113, 137,
	173, 129, 141, 89, 161, 144, 284, 293, 290, 291,
	288, 289, 287, 286, 285, 295, 279, 280, 296, 297,
	298, 0, 281, 78, 0, 110, 172, 136, 97, 163,
	128, 0, 0, 0, 0, 244, 0, 0, 0, 95,
	90, 0, 241, 0, 0, 109, 126, 283, 111, 0,
	0, 145, 120, 0, 0, 0, 0, 277, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 242, 263, 262, 265, 266, 267, 268, 0, 87,
	264, 269, 270, 271, 0, 0, 0, 239, 256, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 235, 0, 0, 0, 294, 0, 255, 0,
	0, 251, 252, 257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 292, 0,
	134, 0, 0, 148, 100, 99, 108, 0, 0, 0,
	91, 0, 140, 130, 160, 0, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 276, 0, 0, 0, 146, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 284, 293, 290, 291, 288, 289, 287, 286, 285,
	295, 279, 280, 296, 297, 298, 0, 281, 78, 0,
	110, 172, 136, 97, 163, 128, 0, 0, 0, 0,
	244, 0, 0, 0, 95, 90, 0, 241, 0, 0,
	109, 126, 283, 111, 0, 0, 145, 120, 0, 0,
	0, 0, 277, 278, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 51, 0, 0, 242, 263, 262, 265,
	266, 267, 268, 0, 87, 264, 269, 270, 271, 0,
	0, 0, 239, 256, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 0, 0, 0,
	0, 294, 0, 255, 0, 0, 251, 252, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 292, 0, 134, 0, 0, 148, 100,
	99, 108, 0, 0, 0, 91, 0, 140, 130, 160,
	0, 131, 139, 112, 152, 135, 159, 191, 167, 150,
	166, 79, 149, 158, 88, 142, 81, 156, 147, 118,
	104, 105, 80, 0, 138, 94, 98, 93, 127, 153,
	154, 92, 174, 84, 165, 83, 85, 164, 125, 151,
	157, 119, 116, 82, 155, 117, 115, 107, 96, 101,
	132, 114, 133, 102, 122, 121, 123, 276, 0, 0,
	0, 146, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 124, 86, 103, 143, 106, 113, 137,
	173, 129, 141, 89, 161, 144, 284, 293, 290, 291,
	288, 289, 287, 286, 285, 295, 279, 280, 296, 297,
	298, 24, 281, 78, 0, 110, 172, 136, 97, 163,
	0, 0, 0, 128, 0, 0, 0, 0, 244, 0,
	0, 0, 95, 90, 0, 241, 0, 0, 109, 126,
	283, 111, 0, 0, 145, 120, 0, 0, 0, 0,
	277, 278, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 242, 263, 262, 265, 266, 267,
	268, 0, 87, 264, 269, 270, 271, 0, 0, 0,
	239, 256, 0, 282, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 0, 0, 0, 0, 294,
	0, 255, 0, 0, 251, 252, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 292, 0, 134, 0, 0, 148, 100, 99, 108,
	0, 0, 0, 91, 0, 140, 130, 160, 0, 131,
	139, 112, 152, 135, 159, 191, 167, 150, 166, 79,
	149, 158, 88, 142, 81, 156, 147, 118, 104, 105,
	80, 0, 138, 94, 98, 93, 127, 153, 154, 92,
	174, 84, 165, 83, 85, 164, 125, 151, 157, 119,
	116, 82, 155, 117, 115, 107, 96, 101, 132, 114,
	133, 102, 122, 121, 123, 276, 0, 0, 0, 146,
	162, 175, 0, 0, 168, 169, 170, 171, 0, 0,
	0, 124, 86, 103, 143, 106, 113, 137, 173, 129,
	141, 89, 161, 144, 284, 293, 290, 291, 288, 289,
	287, 286, 285, 295, 279, 280, 296, 297, 298, 0,
	281, 78, 0, 110, 172, 136, 97, 163, 128, 0,
	0, 0, 0, 244, 0, 0, 0, 95, 90, 0,
	241, 0, 0, 109, 126, 283, 111, 0, 0, 145,
	120, 0, 0, 0, 0, 277, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 242,
	263, 262, 265, 266, 267, 268, 0, 87, 264, 269,
	270, 271, 0, 0, 0, 239, 256, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	0, 0, 0, 0, 294, 0, 255, 0, 0, 251,
	252, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 292, 0, 134, 0,
	0, 148, 100, 99, 108, 0, 0, 0, 91, 0,
	140, 130, 160, 0, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	276, 0, 0, 0, 146, 162, 175, 0, 0, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 284,
	293, 290, 291, 288, 289, 287, 286, 285, 295, 279,
	280, 296, 297, 298, 128, 281, 78, 0, 110, 172,
	136, 97, 163, 95, 90, 0, 0, 0, 0, 109,
	126, 283, 111, 0, 0, 145, 120, 0, 0, 0,
	0, 277, 278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 242, 263, 262, 265, 266,
	267, 268, 0, 87, 264, 269, 270, 271, 0, 0,
	0, 0, 256, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 0, 0, 0, 0,
	294, 0, 255, 0, 0, 251, 252, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 292, 0, 134, 0, 0, 148, 100, 99,
	108, 0, 0, 0, 91, 0, 140, 130, 160, 1338,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 276, 0, 0, 0,
	146, 162, 175, 0, 0, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 284, 293, 290, 291, 288,
	289, 287, 286, 285, 295, 279, 280, 296, 297, 298,
	128, 281, 78, 0, 110, 172, 136, 97, 163, 95,
	90, 0, 0, 0, 0, 109, 126, 283, 111, 0,
	0, 145, 120, 0, 0, 0, 0, 277, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 242, 263, 262, 265, 266, 267, 268, 0, 87,
	264, 269, 270, 271, 0, 0, 0, 0, 256, 0,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 0, 0, 0, 0, 294, 0, 255, 0,
	0, 251, 252, 257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 292, 0,
	134, 0, 0, 148, 100, 99, 108, 0, 0, 0,
	91, 0, 140, 130, 160, 0, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 276, 0, 0, 0, 146, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 284, 293, 290, 291, 288, 289, 287, 286, 285,
	295, 279, 280, 296, 297, 298, 0, 281, 78, 0,
	110, 172, 136, 97, 163, 128, 0, 0, 0, 485,
	0, 0, 0, 0, 95, 90, 0, 0, 0, 0,
	109, 126, 0, 111, 0, 0, 145, 120, 0, 502,
	501, 511, 512, 504, 505, 506, 507, 508, 509, 510,
	503, 0, 0, 518, 0, 0, 76, 517, 487, 513,
	514, 515, 516, 0, 87, 0, 0, 0, 519, 482,
	0, 481, 0, 0, 0, 0, 0, 0, 0, 0,
	492, 0, 500, 0, 0, 0, 0, 483, 520, 521,
	522, 523, 524, 525, 526, 0, 493, 494, 491, 502,
	501, 511, 512, 504, 505, 506, 507, 508, 509, 510,
	503, 0, 0, 518, 0, 0, 0, 517, 0, 513,
	514, 515, 516, 495, 496, 497, 498, 499, 519, 0,
	190, 0, 0, 0, 0, 134, 0, 0, 148, 100,
	99, 108, 0, 0, 0, 91, 0, 140, 130, 160,
	0, 131, 139, 112, 152, 135, 159, 191, 167, 150,
	166, 79, 149, 158, 88, 142, 81, 156, 147, 118,
	104, 105, 80, 0, 138, 94, 98, 93, 127, 153,
	154, 92, 174, 84, 165, 83, 85, 164, 125, 151,
	157, 119, 116, 82, 155, 117, 115, 107, 96, 101,
	132, 114, 133, 102, 122, 121, 123, 0, 0, 0,
	0, 146, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 124, 86, 103, 143, 106, 113, 137,
	173, 129, 141, 89, 161, 144, 0, 0, 1183, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 78, 0, 110, 172, 136, 97, 163,
	95, 90, 0, 0, 0, 0, 109, 126, 0, 111,
	1180, 463, 145, 120, 0, 502, 501, 511, 512, 504,
	505, 506, 507, 508, 509, 510, 503, 0, 0, 518,
	0, 0, 76, 517, 0, 513, 514, 515, 516, 0,
	87, 0, 463, 0, 519, 69, 0, 502, 501, 511,
	512, 504, 505, 506, 507, 508, 509, 510, 503, 0,
	0, 518, 0, 0, 0, 517, 0, 513, 514, 515,
	516, 0, 0, 0, 0, 0, 519, 0, 502, 501,
	511, 512, 504, 505, 506, 507, 508, 509, 510, 503,
	0, 0, 518, 0, 0, 0, 517, 0, 513, 514,
	515, 516, 0, 72, 73, 0, 68, 519, 0, 0,
	74, 134, 0, 0, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 131, 139, 112,
	152, 135, 159, 70, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 0, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 78,
	0, 110, 172, 136, 97, 163, 95, 90, 0, 0,
	0, 0, 109, 126, 0, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 1275, 0, 0, 1277, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 87, 502, 501, 511,
	512, 504, 505, 506, 507, 508, 509, 510, 503, 946,
	0, 518, 0, 0, 0, 517, 0, 513, 514, 515,
	516, 0, 0, 0, 0, 0, 519, 0, 0, 502,
	501, 511, 512, 504, 505, 506, 507, 508, 509, 510,
	503, 0, 0, 518, 0, 0, 0, 517, 0, 513,
	514, 515, 516, 0, 0, 0, 0, 0, 519, 0,
	0, 0, 190, 0, 0, 0, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 637, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 0,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 78, 0, 110, 172, 136,
	97, 163, 128, 0, 0, 0, 592, 0, 0, 0,
	0, 95, 90, 0, 0, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 594, 0, 0, 0, 0,
	0, 87, 0, 651, 652, 653, 654, 655, 656, 657,
	0, 658, 659, 660, 661, 662, 639, 640, 641, 642,
	623, 624, 0, 0, 626, 0, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 643, 644, 645, 646,
	647, 648, 649, 650, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 0, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 0, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	78, 0, 110, 172, 136, 97, 163, 95, 90, 0,
	0, 0, 0, 109, 126, 0, 111, 0, 0, 145,
	120, 501, 511, 512, 504, 505, 506, 507, 508, 509,
	510, 503, 0, 0, 518, 0, 51, 0, 517, 76,
	513, 514, 515, 516, 0, 0, 0, 87, 0, 519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 134, 0,
	0, 148, 100, 99, 108, 0, 0, 0, 91, 0,
	140, 130, 160, 0, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	0, 0, 0, 0, 146, 162, 175, 0, 0, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 78, 0, 110, 172,
	136, 97, 163, 95, 90, 0, 0, 0, 0, 109,
	126, 0, 111, 0, 0, 145, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 188, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 100, 99,
	108, 0, 0, 0, 91, 0, 140, 130, 160, 0,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 0, 0, 0, 0,
	146, 162, 175, 0, 0, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 78, 0, 110, 172, 136, 97, 163, 95,
	90, 0, 0, 0, 0, 109, 126, 0, 111, 0,
	0, 145, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 712, 0, 0, 713, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	134, 0, 0, 148, 100, 99, 108, 0, 0, 0,
	91, 0, 140, 130, 160, 0, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 0, 0, 0, 0, 146, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 78, 0,
	110, 172, 136, 97, 163, 95, 90, 0, 612, 0,
	0, 109, 126, 0, 111, 0, 0, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 611,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 110, 172, 136, 97,
	163, 128, 0, 0, 0, 592, 0, 0, 0, 0,
	95, 90, 0, 0, 0, 0, 109, 126, 0, 111,
	0, 0, 145, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 594, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 590, 139, 112,
	152, 135, 159, 191, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 0, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 78,
	0, 110, 172, 136, 97, 163, 95, 90, 0, 0,
	0, 0, 109, 126, 0, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 0, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 0,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 78, 0, 110, 172, 136,
	97, 163, 95, 90, 0, 0, 0, 0, 109, 126,
	0, 111, 0, 0, 145, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 594, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 134, 0, 0, 148, 100, 99, 108,
	0, 0, 0, 91, 0, 140, 130, 160, 0, 131,
	139, 112, 152, 135, 159, 191, 167, 150, 166, 79,
	149, 158, 88, 142, 81, 156, 147, 118, 104, 105,
	80, 0, 138, 94, 98, 93, 127, 153, 154, 92,
	174, 84, 165, 83, 85, 164, 125, 151, 157, 119,
	116, 82, 155, 117, 115, 107, 96, 101, 132, 114,
	133, 102, 122, 121, 123, 0, 0, 0, 0, 146,
	162, 175, 0, 0, 168, 169, 170, 171, 0, 0,
	0, 124, 86, 103, 143, 106, 113, 137, 173, 129,
	141, 89, 161, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 78, 0, 110, 172, 136, 97, 163, 95, 90,
	0, 0, 0, 0, 109, 126, 0, 111, 0, 0,
	145, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 487, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 134,
	0, 0, 148, 100, 99, 108, 0, 0, 0, 91,
	0, 140, 130, 160, 0, 131, 139, 112, 152, 135,
	159, 191, 167, 150, 166, 79, 149, 158, 88, 142,
	81, 156, 147, 118, 104, 105, 80, 0, 138, 94,
	98, 93, 127, 153, 154, 92, 174, 84, 165, 83,
	85, 164, 125, 151, 157, 119, 116, 82, 155, 117,
	115, 107, 96, 101, 132, 114, 133, 102, 122, 121,
	123, 0, 0, 0, 0, 146, 162, 175, 0, 0,
	168, 169, 170, 171, 0, 0, 0, 124, 86, 103,
	143, 106, 113, 137, 173, 129, 141, 89, 161, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 78, 0, 110,
	172, 136, 97, 163, 570, 95, 90, 0, 0, 0,
	0, 109, 126, 0, 111, 0, 0, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 308, 0, 0, 0, 0,
	0, 0, 128, 0, 78, 0, 110, 172, 136, 97,
	163, 95, 90, 0, 0, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 0, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 0, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	78, 0, 110, 172, 136, 97, 163, 95, 90, 0,
	0, 0, 0, 109, 126, 0, 111, 0, 0, 145,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 190, 0, 0, 0, 0, 134, 0,
	0, 148, 100, 99, 108, 0, 0, 0, 91, 0,
	140, 130, 160, 0, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	0, 0, 0, 0, 146, 162, 175, 0, 0, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 78, 0, 110, 172,
	136, 97, 163, 95, 90, 0, 0, 0, 0, 109,
	126, 0, 111, 0, 0, 145, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 100, 99,
	108, 0, 0, 0, 91, 0, 140, 130, 160, 0,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 0, 0, 0, 0,
	146, 162, 175, 0, 0, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 78, 0, 110, 172, 136, 97, 163, 95,
	90, 0, 0, 0, 0, 109, 126, 0, 111, 0,
	0, 145, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	134, 0, 0, 148, 100, 99, 108, 0, 0, 0,
	91, 0, 140, 130, 160, 0, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 0, 0, 0, 0, 146, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 78, 0,
	110, 172, 136, 97, 163, 95, 90, 0, 0, 0,
	0, 109, 126, 0, 111, 0, 0, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	637, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 625, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 78, 0, 110, 172, 136, 97,
	163, 0, 0, 0, 0, 0, 0, 0, 651, 652,
	653, 654, 655, 656, 657, 0, 658, 659, 660, 661,
	662, 639, 640, 641, 642, 623, 624, 0, 0, 626,
	767, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 643, 644, 645, 646, 647, 648, 649, 650, 0,
	0, 0, 0, 768, 769, 24, 25, 49, 27, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	38, 0, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 31, 32, 34, 33, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 45, 43, 0, 0, 46,
	47, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 0, 41, 42, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50,
}

var yyPact = [...]int16{
	11259, -1000, -188, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 838, 858, -1000, -1000, -1000, -1000, -1000, -1000,
	676, 7153, 28, 62, -28, 10240, 60, 305, 10948, -1000,
	-41, -1000, -1000, 1951, -1000, -1000, -1000, -1000, 686, -1000,
	-1000, -1000, -1000, -1000, 825, 833, 697, 824, 744, -1000,
	5462, 33, 9059, 10004, 4972, -1000, 492, 57, 10948, -161,
	10712, 24, 24, 24, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 52, 10948, -1000, 10948,
	6, 491, 6, 6, 6, 10948, -1000, 102, -1000, -1000,
	-1000, -1000, 10948, 486, 790, 61, 2908, 2908, 2908, 2908,
	-32, 2908, -113, 713, -1000, -1000, -1000, -1000, 2908, -1000,
	-1000, -1000, -1000, -1000, -1000, 1940, -1000, -1000, -1000, -1000,
	462, 799, 6200, 6200, 838, -1000, 686, -1000, -1000, -1000,
	772, -1000, -1000, 210, 848, -1000, 6917, 97, -1000, 6200,
	6925, 612, -1000, -1000, 612, -1000, -1000, -1000, -1000, -1000,
	190, 6672, 6672, 6672, 6672, 6672, 6672, 6672, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 612, -1000, 5955, -1000, 612, 612, 612, 612,
	612, 612, 6200, 612, 612, 612, 612, 612, 612, 612,
	612, 612, 612, 612, 612, 612, 612, 612, 612, 9768,
	555, 767, -1000, -1000, -1000, 813, 8106, 8823, 10948, 536,
	-1000, 583, 4714, -133, -1000, -1000, -1000, 151, 8578, -1000,
	-1000, -1000, 788, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 483, -1000, 7534,
	479, 2908, 44, 703, 473, 187, 471, 10948, 10948, 2908,
	45, 10948, 810, 711, 10948, 470, 464, -1000, 4456, -1000,
	2908, 2908, 2908, 2908, 2908, 2908, 2908, 2908, -1000, -1000,
	-1000, -1000, -1000, -1000, 2908, 2908, -1000, -104, -1000, 10948,
	-1000, -1000, -1000, -1000, -1000, 853, 135, 359, 94, 588,
	-1000, 336, 825, 462, 744, 8342, 735, -1000, -1000, 10948,
	-1000, 6200, 6200, 434, -1000, 9531, -1000, -1000, 3424, 139,
	6672, 113, 237, 6672, 6672, 502, 113, 113, 6672, 6672,
	6672, 6672, 6672, 6672, 6672, 6672, 6672, 6672, 6672, 6672,
	6672, 6672, 6672, 6672, 6672, 6672, 6672, 11049, 341, 6672,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 433, -1000,
	686, 51, 385, 385, 385, 385, 385, 385, 137, 2108,
	462, 461, 166, 5955, -1000, 5462, 5462, 6200, 6200, 5462,
	179, 166, 10476, -1000, 462, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5462, 5462, 5462, 5462, 10476, 10476, 819, -16,
	10948, -1000, 10476, 9059, 9059, 9059, 9059, 9059, -1000, 740,
	738, -1000, 725, 724, 732, 10948, -1000, 459, 8106, 124,
	612, -1000, 9295, -1000, -1000, -16, 538, 9059, 10948, -1000,
	-1000, 4198, 583, -133, 577, -1000, -130, -124, 5707, 118,
	-1000, -1000, -1000, -1000, 2650, 287, 258, -98, -1000, -1000,
	-1000, 617, -1000, 617, 617, 617, 617, -67, -67, -67,
	-67, -1000, -1000, -1000, -1000, -1000, 652, 646, -1000, 617,
	617, 617, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 645, 645,
	645, 643, 643, 705, -1000, 10948, -177, 405, 2908, 809,
	2908, -1000, 59, -1000, 10948, -1000, -1000, 10948, 2908, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 239, -1000, -1000, -1000, -1000, 752,
	6200, 6200, 3940, 6200, -1000, -1000, -1000, 799, -1000, 819,
	835, -1000, 769, 765, 5462, -1000, -1000, 139, 306, -1000,
	-1000, 381, -1000, -1000, -1000, -1000, 93, 612, -1000, 6865,
	-1000, -1000, -1000, 105, -191, -1000, 113, 6672, 6672, 6672,
	1714, 6865, -1000, -1000, -1000, -1000, 6865, 6865, 7395, 826,
	7816, 385, 289, 289, 353, 353, 353, 353, 353, 1013,
	1013, 6865, 6865, 6865, 6865, -192, -1000, 617, -50, -51,
	-1000, -1000, -1000, -1000, 6865, 462, -1000, -1000, 462, 5462,
	579, -1000, -1000, 6200, -1000, 462, 457, 457, 263, 416,
	457, 191, -1000, 6200, 462, -1000, 92, -1000, 457, 462,
	457, 457, 684, 674, 5462, 698, 612, -1000, 530, -1000,
	150, 767, 702, 710, 644, -1000, -1000, -1000, -1000, 737,
	-1000, 726, -1000, -1000, -1000, -1000, -1000, 55, 49, 48,
	10712, -1000, 846, 9059, 569, -1000, -1000, 577, -133, -140,
	-1000, -1000, -1000, 166, -1000, 403, 553, 2392, -1000, -1000,
	-1000, -1000, -1000, -1000, 640, 797, 174, 142, 373, -1000,
	-1000, 792, -1000, 197, -100, -1000, -1000, 314, -67, -67,
	-1000, -1000, 118, 774, 118, 118, 118, 352, 352, -1000,
	-1000, -1000, -1000, 297, -1000, -1000, -1000, 292, -1000, 709,
	10712, 2908, -1000, 3682, -1000, -1000, -1000, -1000, -1000, -1000,
	1181, 202, 217, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -17, -1000, 2908, -1000, 245, 10948,
	10948, 750, 166, 166, 83, -1000, -1000, 10948, -1000, -1000,
	-1000, -1000, 585, -1000, -1000, -1000, 3166, 5462, 11049, 6200,
	-1000, 1714, 6865, 7363, -1000, 6672, 6672, -194, -1000, -1000,
	-1000, -1000, -1000, 457, 5462, 166, -1000, -1000, -1000, 11049,
	341, 11049, -172, 173, -1000, 6200, 283, -1000, 3940, -1000,
	-1000, -1000, -1000, 6672, 6672, 6672, 6672, 568, 707, 10476,
	612, -1000, 7870, 10712, 838, 10476, 6200, 6200, -1000, -1000,
	6200, 618, -1000, 6200, -1000, -1000, -1000, 612, 612, 612,
	420, -1000, 838, 569, -1000, -1000, -1000, -138, -129, -1000,
	-1000, 2650, -1000, 2650, 10712, -1000, 368, 356, -1000, -1000,
	647, 66, -1000, -1000, -1000, 514, 118, 118, -1000, 159,
	-1000, -1000, -1000, 453, -1000, 438, 552, 429, 10948, -1000,
	-1000, 549, -1000, 149, -1000, -1000, 10712, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10712,
	10948, -1000, -1000, -1000, -1000, -1000, 10712, -1000, -1000, 346,
	6200, -1000, -1000, -1000, 3682, -1000, 846, 9059, -1000, -1000,
	462, -192, 4, -1000, 6672, 6865, 6865, -1000, -1000, -1000,
	19, 462, 19, 612, -1000, 166, 6200, -1000, 7133, 1750,
	7101, 622, -169, -1000, 802, 527, 540, -1000, -1000, 5217,
	462, 426, 77, 420, 825, -1000, 166, 166, 166, 10712,
	166, 10712, 10712, 10712, 7634, 10712, 825, -1000, -1000, -1000,
	-1000, 2392, -1000, 417, -1000, 617, -1000, -1000, -93, 852,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -67, 338, -67, 286, -1000, 257, 2908, 3682, 2650,
	-1000, 616, -1000, -1000, -1000, -1000, 801, -1000, 166, 843,
	546, -1000, -1000, 6865, -1000, -1000, -1000, 6672, 166, -1000,
	6672, 6672, -1000, 6672, 6672, 462, 334, 800, 796, -1000,
	612, -1000, -1000, 573, 10712, 10712, -1000, -1000, 402, -1000,
	396, 396, 396, 124, -1000, -1000, 103, 10712, -1000, 127,
	-1000, -151, 118, -1000, 118, 495, 494, -1000, -1000, -1000,
	10712, 612, 841, 832, 50, 7164, 7164, 7164, 7164, -1000,
	-1000, -1000, 7389, 851, -1000, 612, -1000, 686, 69, -1000,
	10712, -1000, -1000, -1000, -1000, -1000, 103, -1000, 308, 147,
	318, -1000, 200, 795, -1000, 794, -1000, -1000, -1000, -1000,
	-1000, 382, -18, -1000, 6200, 6200, 462, 43, -180, -1000,
	-1000, -1000, -1000, 623, 118, -1, -1000, 10712, 10476, 540,
	462, 10712, -1000, -1000, -1000, 248, -1000, -1000, -1000, 307,
	-1000, -1000, 703, 377, -1000, 10712, 166, 528, -1000, 749,
	-175, -183, -1000, 786, 846, 10712, 360, 516, -1000, -1000,
	-1000, -1000, -177, -1000, -18, 759, -1000, 748, -1000, -1000,
	771, -1000, -1000, -1000, -1000, -1000, -23, -178, 10476, -25,
	-181, 530, 612, -185, -1000, 6436, -1000, 7164, 462, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 115, 91, 683, 1105, 1104, 1103, 1102, 1099, 1098,
	1097, 1096, 1095, 1091, 1090, 1087, 1086, 1084, 1082, 1079,
	1076, 1073, 1072, 1071, 1070, 195, 1069, 1068, 1065, 55,
	1062, 64, 1061, 1060, 33, 100, 41, 29, 1123, 50,
	1059, 23, 56, 106, 1058, 37, 1057, 1053, 66, 1052,
	54, 1051, 1049, 1471, 1048, 1039, 11, 4, 1038, 1037,
	1034, 1033, 53, 457, 1028, 1027, 1026, 1025, 1023, 1017,
	1015, 39, 7, 10, 15, 13, 1014, 1120, 70, 1013,
	38, 1012, 1002, 995, 993, 19, 992, 40, 990, 16,
	43, 988, 22, 48, 27, 987, 982, 980, 978, 976,
	5, 65, 45, 954, 24, 52, 34, 953, 950, 411,
	946, 945, 944, 939, 937, 936, 141, 347, 935, 933,
	920, 919, 32, 172, 599, 588, 60, 916, 915, 914,
	955, 59, 58, 25, 913, 21, 113, 28, 911, 909,
	47, 62, 908, 907, 906, 904, 903, 902, 35, 900,
	899, 898, 26, 8, 891, 890, 46, 42, 889, 888,
	887, 31, 51, 886, 36, 882, 879, 878, 877, 20,
	17, 876, 12, 875, 9, 874, 872, 2, 871, 14,
	870, 3, 869, 6, 30, 18, 868, 867, 0, 686,
	866, 864, 96,
}

var yyR1 = [...]uint8{
	0, 186, 187, 187, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 185, 185, 7, 7, 28, 28, 8, 9,
	9, 9, 190, 190, 48, 48, 93, 93, 10, 10,
	10, 10, 102, 102, 106, 106, 106, 107, 107, 107,
	107, 138, 138, 11, 11, 11, 11, 11, 11, 11,
	183, 183, 182, 181, 181, 180, 180, 179, 16, 166,
	167, 167, 167, 162, 141, 141, 141, 141, 144, 144,
	142, 142, 142, 142, 142, 142, 142, 143, 143, 143,
	143, 143, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 147, 147, 147, 147, 147, 147, 147, 147,
	161, 161, 148, 148, 156, 156, 157, 157, 157, 154,
	154, 155, 155, 158, 158, 158, 149, 149, 149, 149,
	149, 149, 149, 151, 151, 159, 159, 152, 152, 152,
	153, 153, 160, 160, 160, 160, 160, 150, 150, 163,
	163, 175, 175, 174, 174, 174, 165, 165, 171, 171,
	171, 171, 171, 164, 164, 173, 173, 172, 168, 168,
	168, 169, 169, 169, 170, 170, 170, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 178, 176, 176,
	177, 177, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 114, 114, 111, 111, 112, 112,
	113, 113, 113, 115, 115, 115, 139, 139, 139, 19,
	19, 22, 22, 23, 24, 21, 21, 20, 20, 20,
	20, 191, 25, 26, 26, 27, 27, 27, 31, 31,
	31, 29, 29, 30, 30, 36, 36, 35, 35, 37,
	37, 37, 37, 127, 127, 127, 126, 126, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 55, 55, 92,
	92, 94, 94, 44, 44, 44, 44, 45, 45, 46,
	46, 47, 47, 134, 134, 133, 133, 133, 132, 132,
	49, 49, 49, 51, 50, 50, 50, 50, 52, 52,
	54, 54, 53, 53, 56, 56, 56, 56, 57, 57,
	38, 38, 38, 38, 38, 38, 38, 110, 110, 59,
	59, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 70, 70, 70, 70,
	70, 70, 60, 60, 60, 60, 60, 60, 60, 34,
	34, 71, 71, 71, 71, 71, 71, 77, 72, 72,
	39, 39, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 68,
	68, 68, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 65, 65, 65, 65, 65, 65, 65, 67, 67,
	67, 67, 67, 67, 67, 67, 192, 192, 69, 69,
	69, 69, 32, 32, 32, 32, 32, 137, 137, 140,
	140, 140, 140, 140, 140, 140, 140, 81, 81, 33,
	33, 79, 79, 80, 82, 82, 78, 78, 78, 62,
	62, 62, 62, 62, 62, 62, 62, 64, 64, 64,
	83, 83, 84, 84, 85, 85, 86, 86, 87, 88,
	88, 88, 89, 89, 89, 89, 90, 90, 90, 61,
	61, 61, 61, 61, 61, 91, 91, 91, 91, 95,
	95, 96, 96, 98, 98, 98, 99, 99, 97, 97,
	73, 73, 75, 75, 74, 76, 100, 100, 104, 101,
	101, 105, 105, 105, 103, 103, 103, 129, 129, 129,
	108, 108, 116, 116, 117, 117, 109, 109, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 119, 119,
	119, 120, 120, 121, 121, 121, 128, 128, 124, 124,
	125, 125, 130, 130, 131, 131, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 188,
	189, 135, 136, 136, 136,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 0, 3, 7, 8, 1, 1, 8, 8,
	7, 6, 1, 1, 1, 3, 0, 4, 3, 4,
	5, 4, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 8, 4, 6, 5, 5, 5,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 3, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 3, 3,
	3, 3, 3, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 3, 4, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 4,
	5, 6, 2, 4, 4, 6, 6, 6, 9, 5,
	4, 6, 8, 8, 6, 8, 8, 7, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 1,
	2, 1, 2, 1, 2, 3, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	4, 0, 3, 0, 3, 3, 1, 3, 2, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -186, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -22, -23, -24,
	-21, -20, -3, -4, 6, 7, -28, 9, 10, 31,
	-16, 124, 125, 127, 126, 152, 128, 145, 51, 164,
	165, 167, 168, 147, 25, 146, 150, 151, -188, 8,
	248, 56, -187, 263, -85, 15, -27, 5, -25, -191,
	-25, -25, -25, -25, -25, -166, 56, -121, 133, 72,
	160, 240, 130, 131, 137, -124, 59, -123, 256, 164,
	175, 169, 196, 188, 186, 189, 227, 67, 167, 236,
	28, 148, 184, 180, 178, 27, 201, 261, 179, 143,
	142, 202, 206, 228, 173, 174, 230, 200, 144, 33,
	258, 36, 156, 231, 204, 199, 195, 198, 172, 194,
	40, 208, 207, 209, 226, 191, 34, 181, 18, 234,
	151, 154, 203, 205, 138, 158, 260, 232, 177, 155,
	150, 235, 168, 229, 238, 39, 214, 171, 141, 165,
	162, 192, 157, 182, 183, 197, 170, 193, 166, 159,
	152, 237, 215, 262, 190, 187, 163, 161, 219, 220,
	221, 222, 259, 233, 185, 216, -109, 133, 135, 131,
	131, 132, 133, 240, 130, 131, -53, -130, 59, -123,
	133, 160, 131, 109, 189, 124, 217, 132, 33, 158,
	-139, 131, -111, 161, 219, 220, 221, 222, 59, 229,
	228, 223, -130, 166, -1, 128, -135, -135, -135, -135,
	-2, -89, 17, 16, -5, -3, -188, 6, 20, 21,
	-31, 41, 42, -26, -37, 100, -38, -130, -58, 75,
	-63, 30, 59, -123, 23, -62, -59, -78, -76, -77,
	-39, 109, 110, 98, 99, 106, 76, 111, -68, -66,
	-67, -69, 61, 60, 68, 62, 63, 64, 65, 69,
	70, 71, -124, -74, -188, -65, 210, 45, 46, 249,
	250, 255, 78, 35, 239, 247, 246, 245, 243, 244,
	241, 242, 136, 240, 104, 248, 251, 252, 253, -109,
	-41, -42, -43, -44, -55, -77, -188, -53, 11, -48,
	-53, -101, -138, 166, -105, 229, 228, -125, -103, -124,
	-122, 227, 189, 226, 129, 74, 210, 22, 24, 212,
	77, 109, 16, 78, 108, 249, 124, 49, 241, 242,
	239, 251, 252, 240, 217, 30, 10, 25, 146, 21,
	102, 126, 81, 82, 149, 23, 147, 71, 19, 52,
	11, 13, 14, 136, 135, 93, 132, 47, 8, 111,
	26, 90, 43, 29, 45, 91, 17, 243, 244, 32,
	255, 153, 104, 50, 37, 75, 69, 53, 72, 15,
	48, 92, 127, 248, 46, 130, 6, 254, 31, 145,
	44, 131, 218, 80, 134, 70, 5, 137, 9, 51,
	54, 245, 246, 247, 35, 79, 12, -167, -162, 59,
	132, -53, 248, -124, -117, 136, -117, -117, 131, -53,
	-53, -116, 136, 59, -116, -116, -116, -53, 113, -53,
	59, 31, 240, 59, 158, 131, 159, 133, -136, -188,
	-125, -136, -136, -136, 162, 163, -136, -112, 224, 53,
	-136, -1, -189, 58, -90, 19, 32, -38, -130, -86,
	-87, -38, -85, -2, -25, 37, -29, 21, 66, 11,
	-127, 74, 72, 90, -126, 22, -124, 61, 113, -38,
	-60, 93, 75, 91, 92, 118, 119, 120, 121, 122,
	77, 95, 94, 105, 98, 99, 100, 101, 102, 103,
	104, 96, 97, 114, 115, 116, 117, 112, 108, 123,
	83, 84, 85, 86, 87, 88, 89, -110, -188, -77,
	-188, 73, -63, -63, -63, -63, -63, -63, -63, -188,
	-2, -72, -38, -188, -77, -188, -188, -188, -188, -188,
	-81, -38, -188, -192, -188, -192, -192, -192, -192, -192,
	-192, -192, -188, -188, -188, -188, -188, -188, -188, -54,
	26, -53, 31, 57, -49, -51, -50, -52, 43, 47,
	49, 44, 45, 46, 50, -134, 22, -41, -188, -133,
	154, -132, 22, -130, 61, -53, -48, -190, 57, 11,
	54, 57, -101, 166, -102, -106, 230, 232, 83, -129,
	-124, 61, 30, 31, 58, 57, -141, -144, -146, -145,
	-147, -142, -143, 186, 187, 109, 190, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 31, 148, 182,
	183, 184, 185, 202, 203, 204, 205, 206, 207, 208,
	209, 169, 170, 171, 172, 173, 174, 175, 177, 178,
	179, 180, 181, 59, -136, 133, -183, 54, 59, 75,
	59, -53, -53, -136, 134, -53, 23, 53, -53, 59,
	59, -131, -130, -122, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -114, 218, 225, -53, 9, 93,
	57, 18, 113, 57, -88, 24, 25, -89, -189, -31,
	-64, -124, 62, 65, -30, 44, -53, -38, -38, -70,
	69, 75, 70, 71, -126, 100, -131, -125, -122, -63,
	-71, -74, -77, 61, 210, 65, 93, 91, 92, 77,
	-63, -63, -62, 61, -71, -71, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -140, 257, 191, 214, 215,
	-141, -137, 59, 61, -63, 59, -39, 61, -36, 21,
	-35, -37, -189, 57, -189, -2, -35, -35, -38, -38,
	-35, -79, -80, 79, -78, -124, -130, -189, -35, -36,
	-35, -35, -78, -78, -29, -93, 154, -53, -100, -104,
	-78, -42, -43, -43, -42, -43, 43, 43, 43, 48,
	43, 48, 43, -50, -130, -189, -56, 51, 135, 52,
	-188, -132, -93, 54, -41, -53, -105, -102, 57, 231,
	233, 234, 53, -38, -153, 108, -168, -169, -170, -125,
	61, 62, -162, -163, -171, 138, 141, 137, -164, 132,
	29, -158, 69, 75, -154, 215, -148, 56, -148, -148,
	-148, -148, -152, 189, -152, -152, -152, 56, 56, -148,
	-148, -148, -156, 56, -156, -156, -157, 56, -157, -128,
	54, -53, -181, 259, -182, 59, -136, 23, -136, -118,
	129, 126, 127, -178, 125, 212, 189, 67, 30, 15,
	249, 154, 262, 59, 155, -53, -53, -136, -113, 11,
	93, 39, -38, -38, -131, -87, -90, -108, 19, 11,
	35, 35, -35, 69, 70, 71, 113, -188, 112, 264,
	-71, -63, -63, -63, -34, 149, 74, 264, -148, 174,
	174, -189, -189, -35, 57, -38, -189, -189, -189, 57,
	54, 22, -189, -82, -80, 81, -38, -189, 113, -189,
	-189, -189, -189, 57, 11, 57, 11, -35, -61, 31,
	35, -2, -188, -188, -57, 57, 12, 83, -46, -45,
	53, 54, -47, 53, -45, 43, 43, 132, 132, 132,
	-94, -124, -57, -41, -57, -106, -107, 235, 232, 238,
	59, 57, -170, 83, 56, 29, -164, -164, 59, 59,
	-149, 30, 69, -155, 216, 62, -152, -152, -153, 31,
	-153, -153, -153, -161, 61, -161, 62, 62, 53, -124,
	-136, -180, -179, -125, -135, -184, 160, 139, 140, 143,
	142, 59, 132, 29, 138, 141, 154, 137, -184, 160,
	-119, -120, 134, 22, 132, 29, 154, -136, -115, 91,
	12, -130, -130, 40, 113, -53, -40, 11, 100, -125,
	-36, -140, -72, -34, 74, -63, -63, 265, -189, -37,
	-140, -137, -140, 256, 82, -38, 80, -125, -63, -63,
	-63, -63, -85, -185, 53, -100, -73, -75, -74, -188,
	-2, -91, -124, -94, -85, -104, -38, -38, -38, 56,
	-38, -188, -188, -188, -189, 57, -85, -57, 232, 236,
	237, -169, -170, -173, -172, -124, 59, 59, -151, 53,
	61, 62, 63, 69, 239, 68, 58, -153, -153, 59,
	109, 58, 57, 58, 57, 58, 57, -53, 57, 83,
	-135, -124, -135, -124, -53, -135, -124, 61, -38, -57,
	-41, -189, 265, -63, -189, -189, -189, -188, -38, -189,
	57, 19, -189, 57, 19, -33, 254, -95, 27, -185,
	57, -189, -189, -189, 57, 113, -189, -89, -92, -124,
	-92, -92, -92, -133, -124, -89, 58, 57, -148, -159,
	212, 9, -152, 61, -152, 62, 62, -136, -179, -170,
	56, 26, -83, 13, -63, -63, -63, -63, -63, -189,
	61, -96, 28, 29, -75, 35, -2, -188, -124, -124,
	57, 58, -189, -189, -189, -56, -175, -174, 54, 144,
	67, -172, -160, 138, 29, 137, 239, -153, -153, 58,
	58, -92, -188, -84, 14, 16, -32, 93, 259, -189,
	-189, -189, -189, -98, -99, 53, -124, 56, 9, -73,
	-2, 113, -124, -174, 59, -165, 83, 61, -150, 67,
	29, 29, 58, -176, -177, 154, -38, -72, -189, 257,
	50, 260, -97, 55, -153, 140, -92, -100, -189, -124,
	62, 61, -183, -189, 57, -124, 40, 258, 261, 34,
	9, -57, -124, 58, -181, -177, 35, 40, 31, 156,
	259, -100, 157, 260, -57, -188, 261, -63, 153, -189,
	-189,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 524, 0, 281, 281, 281, 281, 281, 281,
	0, 603, 586, 0, 0, 0, 0, -2, 270, 271,
	0, 273, 274, 0, 811, 811, 811, 811, 0, 36,
	37, 809, 1, 3, 532, 0, 0, 285, 288, 283,
	0, 586, 0, 0, 0, 63, 0, 0, 798, 0,
	799, 584, 584, 584, 604, 605, 608, 609, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 0, 0, 587, 0,
	582, 0, 582, 582, 582, 0, 229, 352, 612, 613,
	798, 799, 0, 0, 0, 0, 812, 812, 812, 812,
	0, 812, 258, 247, 249, 250, 251, 252, 812, 267,
	268, 257, 269, 272, 275, 0, 277, 278, 279, 280,
	28, 536, 0, 0, 524, 30, 0, 281, 286, 287,
	291, 289, 290, 282, 0, 299, 303, 0, 360, 0,
	365, 367, -2, -2, 0, 412, 413, 414, 415, 416,
	444, 0, 0, 0, 0, 0, 0, 0, 445, 446,
	447, 448, 410, 510, 511, 512, 513, 514, 515, 516,
	369, 370, 506, 565, 0, 411, 0, 0, 0, 0,
	0, 0, 497, 0, 476, 476, 476, 476, 476, 476,
	476, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 312, 313, 314, 333, 0, 335, 0, 0,
	44, 48, 0, 789, 569, -2, -2, 0, 0, 610,
	611, -2, 716, -2, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 0, 80, 0,
	0, 812, 0, 70, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 230,
	812, 812, 812, 812, 812, 812, 812, 812, 239, 813,
	814, 240, 241, 242, 812, 812, 244, 0, 259, 0,
	253, 276, 29, 810, 23, 0, 0, 533, 0, 525,
	526, 529, 532, 28, 288, 0, 293, 292, 284, 0,
	300, 0, 0, 0, 304, 0, 306, 307, 0, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 393, 394, 395, 396, 397, 398, 366, 0, 385,
	0, 0, 437, 438, 439, 440, 441, 442, 443, 295,
	28, 0, 408, 0, 452, 0, 0, 0, 0, 0,
	0, 498, 0, 468, 0, 469, 470, 471, 472, 473,
	474, 475, 0, 295, 0, 0, 0, 0, 291, 46,
	0, 351, 0, 0, 0, 0, 0, 0, 340, 0,
	0, 343, 0, 0, 0, 0, 334, 0, 0, 354,
	762, 336, 0, 338, 339, -2, 0, 0, 0, 42,
	43, 0, 49, 789, 51, 52, 0, 0, 0, 160,
	577, 578, 579, 575, 188, 0, 143, 139, 85, 86,
	87, 132, 89, 132, 132, 132, 132, 157, 157, 157,
	157, 115, 116, 117, 118, 119, 0, 0, 102, 132,
	132, 132, 106, 122, 123, 124, 125, 126, 127, 128,
	129, 90, 91, 92, 93, 94, 95, 96, 134, 134,
	134, 136, 136, 606, 65, 0, 73, 0, 812, 0,
	812, 78, 0, 204, 0, 223, 583, 0, 812, 226,
	227, 353, 614, 615, 231, 232, 233, 234, 235, 236,
	237, 238, 243, 246, 260, 254, 255, 248, 537, 0,
	0, 0, 0, 0, 528, 530, 531, 536, 31, 291,
	0, 517, 0, 0, 0, 294, 26, 361, 362, 364,
	386, 0, 388, 390, 305, 301, 0, 507, -2, 371,
	372, 401, 402, 405, 0, 406, 0, 0, 0, 0,
	399, 376, 378, 509, 379, 380, 381, 382, 0, 418,
	419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 489, 132, 491, 493,
	496, 435, 487, 488, 436, 0, 417, 410, 0, 0,
	296, 297, 407, 0, 564, 28, 0, 0, 0, 0,
	0, 504, 501, 0, 0, 506, 0, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 350, 358, 566,
	0, 311, 329, 331, 0, 326, 341, 342, 344, 0,
	346, 0, 348, 349, 315, 316, 317, 0, 0, 0,
	0, 337, 358, 0, 358, 45, 570, 50, 0, 0,
	55, 56, 571, 572, 573, 0, 79, 189, 191, 194,
	195, 196, 81, 82, 0, 0, 0, 0, 0, 183,
	184, 146, 144, 0, 141, 140, 88, 0, 157, 157,
	109, 110, 160, 0, 160, 160, 160, 0, 0, 103,
	104, 105, 97, 0, 98, 99, 100, 0, 101, 0,
	0, 812, 67, 0, 71, 72, 68, 585, 69, 811,
	0, 0, 598, 205, 588, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 0, 222, 812, 225, 263, 0,
	0, 0, 534, 535, 0, 527, 24, 0, 580, 581,
	518, 519, 308, 387, 389, 391, 0, 295, 0, 0,
	373, 399, 377, 0, 374, 0, 0, 0, 490, 492,
	494, 368, 449, 0, 0, 409, -2, 453, 454, 0,
	0, 0, 0, 0, 502, 0, 0, 460, 0, 478,
	479, 480, 481, 0, 0, 0, 0, 524, 32, 0,
	0, -2, 0, 0, 524, 0, 0, 0, 323, 330,
	0, 0, 324, 0, 325, 345, 347, 0, 0, 0,
	0, 321, 524, 358, 41, 53, 54, 0, 0, 60,
	161, 0, 192, 0, 0, 178, 0, 0, 181, 182,
	153, 0, 145, 84, 142, 0, 160, 160, 111, 0,
	112, 113, 114, 0, 130, 0, 0, 0, 0, 607,
	66, 74, 75, 0, 197, 811, 0, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 811, 0,
	0, 811, 599, 600, 601, 602, 0, 224, 245, 0,
	0, 261, 262, 538, 0, 25, 358, 0, 302, 508,
	0, 403, 0, 375, 0, 400, 383, 495, 450, 298,
	0, 0, 0, 0, 459, 505, 0, 507, 0, 0,
	0, 0, 499, 34, 549, 32, 539, 560, 562, 0,
	28, 0, 545, 0, 532, 567, 359, 568, 327, 0,
	332, 0, 0, 0, 335, 0, 532, 40, 57, 58,
	59, 190, 193, 0, 185, 132, 179, 180, 155, 0,
	147, 148, 149, 150, 151, 152, 133, 107, 108, 158,
	159, 157, 0, 157, 0, 137, 0, 812, 0, 0,
	198, 0, 199, 201, 202, 203, 0, 264, 265, 520,
	309, 451, 404, 384, 455, 457, 456, 0, 503, 461,
	0, 0, 464, 0, 0, 0, 0, 551, 0, 35,
	0, 563, -2, 0, 0, 0, 47, 38, 0, 319,
	0, 0, 0, 354, 322, 39, 170, 0, 187, 162,
	156, 0, 160, 131, 160, 0, 0, 64, 76, 77,
	0, 0, 522, 0, 482, 0, 0, 0, 0, 467,
	500, 33, 553, 0, 561, 0, -2, 0, 547, 546,
	0, 328, 355, 356, 357, 318, 169, 171, 0, 176,
	0, 186, 167, 0, 164, 166, 154, 120, 121, 135,
	138, 0, 0, 27, 0, 0, 0, 0, 0, 462,
	463, 465, 466, 0, 160, 0, 556, 0, 0, 542,
	28, 0, 320, 172, 173, 0, 177, 175, 83, 0,
	163, 165, 70, 0, 218, 0, 523, 521, 458, 0,
	0, 0, 552, 0, 358, 0, 0, 550, -2, 548,
	174, 168, 73, 217, 0, 0, 483, 0, 486, 558,
	0, 554, 555, 557, 200, 219, 0, 484, 0, 0,
	0, 358, 0, 0, 559, 0, 485, 0, 0, 220,
	221,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 263,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 264, 3, 265, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:326
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:331
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:336
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:360
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:368
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:372
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:378
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:395
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:401
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:405
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:411
		{
			yyVAL.insertOptions = InsertOptions{}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:415
		{
			yyVAL.insertOptions = InsertOptions{
				OnDup:      OnDup(yyDollar[2].updateExprs),
				OnConflict: yyDollar[3].onConflict,
			}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:424
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.Options = yyDollar[7].insertOptions
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:436
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].insertOptions.OnDup))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, Options: yyDollar[8].insertOptions}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:448
		{
			yyVAL.str = InsertStr
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:452
		{
			yyVAL.str = ReplaceStr
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:458
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:482
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:486
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:491
		{
			yyVAL.partitions = nil
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:495
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:529
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:533
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:537
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:555
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:561
		{
			yyVAL.str = SessionStr
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
			yyVAL.str = GlobalStr
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:571
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:576
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:581
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:585
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:589
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:601
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:606
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:610
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:616
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:621
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:626
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:632
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:637
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:643
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:649
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:656
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:668
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:672
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:678
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:689
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:700
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:711
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:719
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:765
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:897
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:902
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:906
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:911
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:915
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:923
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:927
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:933
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:941
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:950
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:960
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:964
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:968
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.optVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:977
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:981
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:989
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:993
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:997
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1002
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1006
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1011
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1020
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1028
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1033
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1037
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1042
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1046
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.colKeyOpt = colKey
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1054
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1063
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1067
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1073
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1077
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1093
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1097
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1108
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1144
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1154
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1160
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1165
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1169
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1173
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = yyDollar[1].str
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1189
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1199
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1203
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1209
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1213
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1217
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1221
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1234
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1244
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1249
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1258
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1277
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1287
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1293
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1297
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1303
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1309
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1317
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1322
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1334
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1349
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1412
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1422
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1456
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1466
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1472
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1476
		{
			yyVAL.str = "extended "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1482
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.str = "full "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1506
		{
			yyVAL.showFilter = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1510
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1520
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1524
		{
			yyVAL.str = SessionStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1528
		{
			yyVAL.str = GlobalStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1544
		{
			yyVAL.statement = &Begin{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1548
		{
			yyVAL.statement = &Begin{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Commit{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.statement = &Rollback{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[2].statement}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[3].statement, Analyze: true}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &OtherRead{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1584
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1593
		{
			setAllowComments(yylex, true)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1597
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1603
		{
			yyVAL.bytes2 = nil
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1607
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.str = UnionStr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.str = UnionAllStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1621
		{
			yyVAL.str = UnionDistinctStr
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1626
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1630
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1634
		{
			yyVAL.str = SQLCacheStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1639
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			yyVAL.str = DistinctStr
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1648
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			yyVAL.str = StraightJoinHint
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1657
		{
			yyVAL.selectExprs = nil
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1667
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1671
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1677
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1681
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1685
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1689
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1694
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1698
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1702
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1714
		{
			yyVAL.tableExprs = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1718
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1724
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1728
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1738
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1742
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1746
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1756
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1762
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1766
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1772
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1776
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1789
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1793
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1797
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1801
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1807
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1809
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1813
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1815
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1824
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1829
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1837
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1850
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1858
		{
			yyVAL.str = JoinStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1864
		{
			yyVAL.str = StraightJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1870
		{
			yyVAL.str = LeftJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1874
		{
			yyVAL.str = LeftJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1878
		{
			yyVAL.str = RightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1882
		{
			yyVAL.str = RightJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1888
		{
			yyVAL.str = NaturalJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1892
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1902
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1906
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1916
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1921
		{
			yyVAL.indexHints = nil
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1925
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1929
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1933
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1938
		{
			yyVAL.expr = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1942
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1952
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1956
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1960
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1964
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1968
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1972
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1978
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1982
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1988
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1992
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1998
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2002
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2006
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2010
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2014
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2022
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2028
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2036
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2040
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2044
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2048
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2052
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2062
		{
			yyVAL.str = IsNullStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2066
		{
			yyVAL.str = IsNotNullStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.str = IsTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.str = IsNotTrueStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2078
		{
			yyVAL.str = IsFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2082
		{
			yyVAL.str = IsNotFalseStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.str = EqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2092
		{
			yyVAL.str = LessThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2096
		{
			yyVAL.str = GreaterThanStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2100
		{
			yyVAL.str = LessEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = GreaterEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2108
		{
			yyVAL.str = NotEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2135
		{
			yyVAL.colTuple = &ConvertExpr{Expr: NewStrVal(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2139
		{
			yyVAL.colTuple = Array(yyDollar[3].exprs)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			// this is an array literal ('{a,b,c}', etc)
			// TODO this is weird and ugly but I need those quotes to be passed through
			tmp := make([]byte, len(yyDollar[1].bytes)+2)
			tmp[0] = '\''
			tmp[len(yyDollar[1].bytes)+1] = '\''
			copy(tmp[1:], yyDollar[1].bytes)
			yyVAL.colTuple = ListArg(tmp)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			// this is a positional parameter ($1, etc)
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2196
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: StringConcat, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2229
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2233
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2237
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2241
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2253
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2257
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2261
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2269
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2273
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2277
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2281
		{
			yyVAL.expr = &FunctionArgAssignmentExpr{Argument: yyDollar[1].expr, Operator: FuncArgAssignStr, Value: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2285
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2289
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2293
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2301
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2315
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2319
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2323
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2360
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("array"), Exprs: SelectExprs{&AliasedExpr{Expr: yyDollar[2].subquery}}}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2364
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2376
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 458:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2388
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2392
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2400
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 463:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2412
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 465:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2416
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 466:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2502
		{
			yyVAL.str = BooleanModeStr
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2506
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2510
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2514
		{
			yyVAL.str = QueryExpansionStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2520
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.convertType = &ConvertType{Type: "boolean"}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2542
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2546
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2554
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].convertType.Type + "[]"}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = nil
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2572
		{
			yyVAL.str = string("")
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2576
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2582
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2592
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = nil
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2607
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2611
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2615
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &NullVal{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2655
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2673
		{
			yyVAL.exprs = nil
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2677
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = nil
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2691
		{
			yyVAL.orderBy = nil
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2695
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2705
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2711
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = AscScr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2720
		{
			yyVAL.str = AscScr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2724
		{
			yyVAL.str = DescScr
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2729
		{
			yyVAL.limit = nil
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2733
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2737
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2741
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2746
		{
			yyVAL.str = ""
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2750
		{
			yyVAL.str = ForUpdateStr
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2754
		{
			yyVAL.str = ShareModeStr
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2767
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2771
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2775
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2780
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2784
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2788
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2799
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2803
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2807
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2812
		{
			yyVAL.updateExprs = nil
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2816
		{
			yyVAL.updateExprs = yyDollar[4].updateExprs
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2821
		{
			yyVAL.onConflict = nil
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2825
		{
			yyVAL.onConflict = &OnConflict{Target: yyDollar[2].conflictTarget, Action: yyDollar[3].conflictAction}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2830
		{
			yyVAL.conflictTarget = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2834
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Columns: yyDollar[1].columns,
				Collate: yyDollar[2].str,
				Where:   NewWhere(WhereStr, yyDollar[3].expr),
			}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2842
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Constraint: yyDollar[3].colIdent,
				Columns:    Columns{},
				Collate:    "",
				Where:      nil,
			}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2857
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2864
		{
			yyVAL.conflictAction = nil
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2868
		{
			yyVAL.conflictAction = &ConflictAction{
				Updates: yyDollar[4].updateExprs,
				Where:   NewWhere(WhereStr, yyDollar[5].expr),
			}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2877
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2881
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2891
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2897
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2929
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2939
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2943
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2954
		{
			yyVAL.bytes = []byte("charset")
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2961
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2969
		{
			yyVAL.expr = &Default{}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2978
		{
			yyVAL.byt = 0
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.byt = 1
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2983
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2985
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2988
		{
			yyVAL.str = ""
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.str = IgnoreStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3006
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3008
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3010
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3012
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3015
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3028
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3032
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3035
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3037
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3045
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3052
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3058
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3062
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3288
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3297
		{
			decNesting(yylex)
		}
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3302
		{
			forceEOF(yylex)
		}
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3307
		{
			forceEOF(yylex)
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			forceEOF(yylex)
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3315
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
