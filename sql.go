// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func init() {
	yyErrorVerbose = true
}

//line sql.y:57
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	onConflict        *OnConflict
	conflictTarget    *ConflictTarget
	conflictAction    *ConflictAction
	insertOptions     InsertOptions
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const CONFLICT = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const NOTHING = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const DO = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const CONCAT = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const INTERVAL = 57437
const TYPECAST = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const JSON_SUBOBJECT_OP = 57441
const JSON_UNQUOTE_SUBOBJECT_OP = 57442
const JSON_TXT_STR_EXISTS_OP = 57443
const JSON_ANY_KEYS_EXIST_OP = 57444
const JSON_ALL_KEYS_EXIST_OP = 57445
const JSON_LEFT_CONTAINS_RIGHT_OP = 57446
const JSON_RIGHT_CONTAINS_LEFT_OP = 57447
const FUNCTION_ARG_ASSIGNMENT = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const CONSTRAINT = 57465
const SPATIAL = 57466
const FULLTEXT = 57467
const FOREIGN = 57468
const KEY_BLOCK_SIZE = 57469
const SHOW = 57470
const DESCRIBE = 57471
const EXPLAIN = 57472
const DATE = 57473
const ESCAPE = 57474
const REPAIR = 57475
const OPTIMIZE = 57476
const TRUNCATE = 57477
const MAXVALUE = 57478
const PARTITION = 57479
const REORGANIZE = 57480
const LESS = 57481
const THAN = 57482
const PROCEDURE = 57483
const TRIGGER = 57484
const VINDEX = 57485
const VINDEXES = 57486
const STATUS = 57487
const VARIABLES = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const REAL = 57502
const DOUBLE = 57503
const FLOAT_TYPE = 57504
const DECIMAL = 57505
const NUMERIC = 57506
const TIME = 57507
const TIMESTAMP = 57508
const DATETIME = 57509
const YEAR = 57510
const CHAR = 57511
const VARCHAR = 57512
const BOOL = 57513
const CHARACTER = 57514
const VARBINARY = 57515
const NCHAR = 57516
const TEXT = 57517
const TINYTEXT = 57518
const MEDIUMTEXT = 57519
const LONGTEXT = 57520
const BLOB = 57521
const TINYBLOB = 57522
const MEDIUMBLOB = 57523
const LONGBLOB = 57524
const JSON = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const ARRAY = 57535
const NULLX = 57536
const AUTO_INCREMENT = 57537
const APPROXNUM = 57538
const SIGNED = 57539
const UNSIGNED = 57540
const ZEROFILL = 57541
const DATABASES = 57542
const TABLES = 57543
const VITESS_KEYSPACES = 57544
const VITESS_SHARDS = 57545
const VITESS_TABLETS = 57546
const VSCHEMA_TABLES = 57547
const EXTENDED = 57548
const FULL = 57549
const PROCESSLIST = 57550
const NAMES = 57551
const CHARSET = 57552
const GLOBAL = 57553
const SESSION = 57554
const ISOLATION = 57555
const LEVEL = 57556
const READ = 57557
const WRITE = 57558
const ONLY = 57559
const REPEATABLE = 57560
const COMMITTED = 57561
const UNCOMMITTED = 57562
const SERIALIZABLE = 57563
const CURRENT_TIMESTAMP = 57564
const DATABASE = 57565
const CURRENT_DATE = 57566
const CURRENT_TIME = 57567
const LOCALTIME = 57568
const LOCALTIMESTAMP = 57569
const UTC_DATE = 57570
const UTC_TIME = 57571
const UTC_TIMESTAMP = 57572
const REPLACE = 57573
const CONVERT = 57574
const CAST = 57575
const SUBSTR = 57576
const SUBSTRING = 57577
const GROUP_CONCAT = 57578
const SEPARATOR = 57579
const MATCH = 57580
const AGAINST = 57581
const BOOLEAN = 57582
const LANGUAGE = 57583
const WITH = 57584
const QUERY = 57585
const EXPANSION = 57586
const UNUSED = 57587

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"CONFLICT",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"NOTHING",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"DO",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"CONCAT",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"TYPECAST",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"FUNCTION_ARG_ASSIGNMENT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	162, 266,
	163, 266,
	-2, 256,
	-1, 242,
	113, 609,
	-2, 605,
	-1, 243,
	113, 610,
	-2, 606,
	-1, 313,
	83, 771,
	-2, 61,
	-1, 314,
	83, 731,
	-2, 62,
	-1, 319,
	83, 714,
	-2, 571,
	-1, 321,
	83, 752,
	-2, 573,
	-1, 530,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 435,
	-1, 532,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 436,
	-1, 533,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 437,
	-1, 534,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 438,
	-1, 535,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 439,
	-1, 536,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 440,
	-1, 537,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 441,
	-1, 594,
	54, 44,
	57, 44,
	-2, 46,
	-1, 728,
	113, 612,
	-2, 608,
	-1, 729,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 371,
	-1, 740,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 399,
	-1, 741,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 376,
	-1, 745,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 381,
	-1, 746,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 382,
	-1, 748,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 416,
	-1, 749,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 417,
	-1, 750,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 418,
	-1, 751,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 419,
	-1, 752,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 420,
	-1, 753,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 421,
	-1, 754,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 422,
	-1, 755,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 423,
	-1, 756,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 424,
	-1, 757,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 425,
	-1, 758,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 426,
	-1, 759,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 427,
	-1, 760,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 428,
	-1, 761,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 429,
	-1, 762,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 430,
	-1, 763,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 431,
	-1, 773,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 434,
	-1, 938,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 399,
	-1, 939,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 377,
	-1, 953,
	5, 29,
	-2, 407,
	-1, 978,
	5, 28,
	-2, 537,
	-1, 1082,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 400,
	-1, 1083,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 383,
	-1, 1170,
	72, 365,
	73, 365,
	74, 365,
	90, 365,
	-2, 384,
	-1, 1189,
	5, 29,
	-2, 538,
	-1, 1221,
	58, 479,
	-2, 365,
	-1, 1233,
	5, 28,
	-2, 540,
	-1, 1305,
	5, 29,
	-2, 541,
}

const yyPrivate = 57344

const yyLast = 11695

var yyAct = [...]int16{
	273, 48, 1291, 889, 1195, 1244, 981, 247, 665, 540,
	805, 823, 1103, 272, 1104, 1131, 1039, 221, 588, 1100,
	997, 806, 216, 54, 764, 869, 586, 778, 841, 941,
	770, 1042, 845, 604, 789, 775, 318, 844, 730, 1030,
	986, 3, 855, 883, 48, 462, 416, 312, 468, 48,
	879, 590, 474, 575, 802, 603, 245, 226, 921, 249,
	483, 863, 769, 304, 230, 300, 309, 461, 217, 218,
	219, 307, 1084, 780, 944, 936, 53, 1333, 1315, 1330,
	1298, 1327, 890, 1314, 1090, 1183, 299, 420, 234, 298,
	220, 1296, 1137, 1138, 1139, 555, 1253, 51, 1005, 1142,
	1140, 1004, 733, 605, 1006, 606, 735, 184, 180, 181,
	182, 1126, 1127, 837, 838, 58, 1125, 836, 694, 456,
	441, 2, 303, 1021, 862, 695, 1207, 870, 429, 947,
	946, 213, 452, 453, 1245, 1329, 1326, 1292, 1063, 803,
	1302, 60, 61, 62, 63, 64, 51, 1247, 430, 857,
	423, 733, 178, 448, 1251, 735, 824, 826, 777, 177,
	664, 178, 673, 857, 996, 214, 505, 506, 507, 508,
	509, 502, 243, 426, 517, 995, 994, 418, 516, 417,
	512, 513, 514, 515, 494, 495, 496, 497, 498, 518,
	192, 179, 443, 1015, 445, 1278, 1060, 447, 447, 447,
	447, 1192, 447, 1062, 77, 1071, 857, 965, 189, 447,
	933, 189, 701, 487, 436, 906, 48, 183, 315, 442,
	444, 935, 842, 698, 1246, 916, 481, 48, 479, 1283,
	905, 1067, 480, 482, 479, 189, 189, 77, 1156, 739,
	825, 189, 527, 77, 481, 529, 984, 607, 470, 1146,
	481, 734, 856, 737, 738, 736, 668, 854, 852, 910,
	1091, 853, 1252, 1250, 790, 859, 856, 904, 471, 1286,
	1141, 860, 538, 944, 542, 529, 544, 545, 546, 547,
	548, 1169, 551, 552, 553, 554, 556, 556, 556, 556,
	556, 556, 556, 556, 564, 565, 566, 567, 1295, 1147,
	734, 440, 422, 1019, 528, 587, 1061, 917, 1059, 856,
	1066, 432, 433, 434, 790, 539, 962, 930, 931, 932,
	957, 476, 1307, 956, 1213, 901, 898, 899, 1308, 897,
	719, 721, 722, 1212, 543, 1034, 720, 459, 480, 482,
	479, 1033, 771, 472, 772, 176, 539, 1022, 1284, 1227,
	189, 1210, 189, 1164, 908, 911, 481, 1031, 189, 1237,
	1320, 1311, 461, 461, 303, 189, 704, 705, 1281, 77,
	77, 77, 77, 1134, 77, 424, 425, 601, 595, 700,
	1133, 77, 557, 558, 559, 560, 561, 562, 563, 903,
	517, 1237, 1289, 1257, 516, 1016, 512, 513, 514, 515,
	494, 495, 496, 497, 498, 518, 958, 297, 1050, 77,
	1237, 461, 902, 1007, 480, 482, 479, 892, 699, 774,
	447, 1237, 1238, 1204, 1203, 1122, 461, 1256, 447, 480,
	482, 479, 481, 480, 482, 479, 679, 1093, 1048, 447,
	447, 447, 447, 447, 447, 447, 447, 481, 678, 907,
	669, 481, 667, 447, 447, 662, 480, 482, 479, 1191,
	461, 1143, 909, 438, 315, 1153, 1152, 446, 1149, 1150,
	189, 1149, 1148, 682, 481, 951, 461, 189, 189, 189,
	615, 572, 461, 77, 780, 461, 614, 613, 706, 77,
	431, 417, 982, 780, 55, 680, 983, 271, 262, 261,
	264, 265, 266, 267, 731, 1187, 263, 268, 1101, 731,
	731, 1049, 982, 24, 24, 24, 1054, 1051, 1044, 1045,
	1052, 1047, 1046, 598, 728, 983, 240, 571, 830, 75,
	48, 597, 1074, 1053, 743, 744, 951, 708, 976, 1056,
	969, 982, 977, 542, 1232, 724, 726, 967, 572, 1155,
	732, 742, 1151, 572, 1008, 732, 732, 835, 951, 791,
	794, 795, 317, 51, 51, 51, 599, 600, 421, 597,
	572, 539, 702, 304, 304, 304, 304, 304, 951, 807,
	51, 227, 1217, 864, 782, 1300, 968, 22, 587, 1116,
	827, 1011, 77, 966, 884, 880, 875, 304, 189, 189,
	77, 799, 189, 874, 66, 189, 666, 796, 1050, 189,
	887, 77, 77, 77, 77, 77, 77, 77, 77, 987,
	988, 1136, 1101, 831, 1035, 77, 77, 990, 714, 782,
	189, 51, 303, 303, 303, 303, 303, 820, 1048, 809,
	810, 727, 812, 828, 225, 676, 77, 303, 833, 829,
	189, 457, 993, 871, 872, 873, 303, 77, 834, 808,
	992, 849, 811, 814, 813, 449, 450, 451, 447, 454,
	447, 918, 817, 1324, 815, 1313, 458, 818, 447, 816,
	819, 1070, 581, 582, 865, 866, 867, 868, 231, 232,
	1323, 928, 475, 927, 317, 317, 317, 317, 1325, 317,
	876, 877, 878, 783, 784, 885, 317, 787, 473, 881,
	882, 1049, 1317, 1026, 463, 612, 1054, 1051, 1044, 1045,
	1052, 1047, 1046, 798, 439, 800, 801, 464, 934, 1018,
	1288, 1287, 1229, 1053, 485, 1230, 1012, 1316, 728, 1043,
	1185, 1218, 189, 894, 675, 189, 189, 189, 189, 189,
	731, 922, 923, 585, 315, 228, 229, 189, 475, 222,
	189, 1262, 223, 926, 189, 55, 1220, 846, 1261, 189,
	189, 925, 983, 77, 477, 937, 1275, 530, 532, 533,
	534, 535, 536, 537, 1208, 697, 77, 57, 59, 596,
	52, 460, 1, 891, 1038, 900, 732, 1290, 1243, 1130,
	851, 843, 415, 979, 980, 65, 1282, 850, 317, 577,
	580, 581, 582, 578, 609, 579, 583, 1249, 1206, 987,
	988, 858, 1020, 961, 861, 1135, 1285, 1017, 945, 619,
	617, 304, 618, 616, 621, 620, 999, 189, 1001, 200,
	77, 310, 77, 584, 978, 608, 189, 886, 478, 189,
	77, 67, 991, 1058, 1057, 727, 516, 1000, 512, 513,
	514, 515, 494, 495, 496, 497, 498, 518, 896, 1002,
	1065, 693, 929, 915, 455, 202, 526, 1009, 577, 580,
	581, 582, 578, 924, 579, 583, 1003, 663, 316, 447,
	303, 1023, 1024, 1271, 1270, 672, 1013, 1014, 1025, 1299,
	1027, 1028, 1029, 1228, 1184, 1108, 683, 684, 685, 686,
	687, 688, 689, 690, 447, 1032, 703, 317, 467, 1041,
	691, 692, 1260, 1219, 960, 317, 549, 788, 248, 718,
	1055, 260, 257, 259, 258, 950, 317, 317, 317, 317,
	317, 317, 317, 317, 709, 975, 1079, 489, 246, 238,
	317, 317, 302, 568, 576, 970, 574, 573, 989, 985,
	1078, 301, 1073, 1182, 1264, 713, 26, 56, 1080, 233,
	1077, 710, 19, 18, 17, 20, 21, 16, 1106, 1086,
	48, 1087, 485, 1089, 807, 317, 15, 1102, 1088, 14,
	807, 1105, 30, 13, 1099, 1118, 1119, 1120, 846, 12,
	77, 1110, 728, 189, 1112, 1111, 11, 1124, 10, 9,
	8, 7, 6, 5, 4, 224, 729, 77, 23, 740,
	741, 1107, 0, 1123, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 1129, 1040, 773, 1128, 0, 0, 792,
	792, 792, 1144, 1145, 0, 0, 0, 0, 0, 0,
	77, 77, 0, 77, 0, 1157, 0, 0, 0, 792,
	0, 0, 0, 0, 0, 304, 0, 0, 1159, 0,
	1166, 1162, 0, 0, 0, 0, 77, 1076, 0, 189,
	189, 1174, 0, 0, 0, 0, 0, 189, 317, 0,
	0, 1167, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 317, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 1186, 1197, 1198, 1199, 0, 0, 0, 1194,
	0, 0, 0, 0, 303, 893, 0, 895, 0, 0,
	1200, 1202, 0, 0, 0, 914, 0, 0, 0, 0,
	0, 0, 77, 77, 0, 447, 0, 0, 0, 0,
	0, 1009, 846, 0, 846, 317, 0, 317, 0, 0,
	0, 0, 1215, 0, 1209, 317, 1211, 0, 0, 0,
	0, 77, 0, 77, 77, 0, 0, 0, 1106, 1216,
	0, 1234, 0, 0, 1205, 0, 0, 0, 0, 317,
	0, 1105, 1231, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 1242, 0, 0, 0, 77, 0, 0, 1259,
	1248, 0, 1258, 0, 0, 1076, 0, 0, 0, 77,
	189, 0, 1233, 1106, 0, 48, 77, 0, 1254, 0,
	1255, 0, 466, 0, 77, 1276, 1105, 189, 0, 1280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 707, 938, 939, 940, 0, 0, 0,
	0, 198, 1294, 0, 0, 0, 1277, 731, 187, 1303,
	0, 212, 846, 807, 0, 0, 1304, 0, 0, 77,
	0, 77, 77, 77, 189, 77, 0, 208, 1309, 0,
	1301, 77, 0, 237, 0, 187, 187, 0, 1318, 1040,
	846, 187, 0, 1321, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 998, 0, 77, 77, 77,
	1332, 779, 781, 807, 0, 1331, 1328, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 193, 797, 0,
	0, 0, 0, 0, 0, 0, 1037, 0, 0, 0,
	0, 0, 195, 0, 77, 77, 0, 0, 0, 201,
	197, 0, 0, 0, 0, 531, 0, 77, 822, 0,
	0, 1064, 0, 0, 0, 1036, 317, 0, 317, 0,
	77, 0, 0, 0, 0, 0, 199, 0, 0, 203,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	77, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 187, 0, 0, 0, 0, 194, 187, 0,
	0, 317, 0, 0, 0, 187, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 77, 0, 0, 0, 196, 0, 204, 205, 206,
	207, 211, 0, 317, 0, 77, 210, 209, 0, 1082,
	1083, 0, 0, 0, 792, 77, 0, 1109, 998, 0,
	792, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 1096, 1097, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 317, 1132,
	501, 500, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 0, 0, 517, 0, 0, 0, 516, 0,
	512, 513, 514, 515, 494, 495, 496, 497, 498, 518,
	187, 1158, 0, 0, 0, 0, 0, 187, 592, 187,
	0, 0, 0, 0, 1160, 0, 0, 0, 0, 0,
	0, 1163, 0, 0, 0, 0, 948, 949, 0, 317,
	305, 0, 0, 0, 953, 954, 955, 0, 0, 959,
	0, 0, 0, 964, 0, 0, 0, 0, 0, 0,
	971, 972, 973, 974, 0, 0, 0, 0, 465, 469,
	0, 0, 0, 0, 0, 0, 186, 0, 1170, 0,
	0, 0, 0, 0, 1196, 488, 1196, 1196, 1196, 0,
	1201, 0, 1214, 0, 0, 0, 317, 0, 0, 0,
	0, 0, 0, 0, 308, 0, 0, 0, 0, 419,
	0, 503, 504, 505, 506, 507, 508, 509, 502, 541,
	0, 517, 317, 317, 317, 516, 550, 512, 513, 514,
	515, 494, 495, 496, 497, 498, 518, 0, 187, 187,
	0, 0, 187, 0, 0, 187, 0, 0, 0, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1235,
	1236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 1221, 1132, 0, 1222, 1223, 0, 1224, 1225, 0,
	0, 0, 0, 0, 0, 1196, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	681, 0, 0, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 427, 0,
	428, 0, 0, 0, 0, 0, 435, 0, 0, 0,
	0, 0, 0, 437, 0, 0, 0, 0, 0, 0,
	0, 0, 1196, 792, 0, 0, 1306, 0, 0, 0,
	0, 237, 0, 0, 0, 0, 0, 237, 237, 1121,
	1312, 237, 0, 0, 793, 793, 793, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 237, 237, 237,
	237, 0, 187, 0, 793, 187, 187, 187, 187, 187,
	0, 0, 0, 792, 0, 0, 0, 821, 0, 0,
	187, 0, 0, 0, 592, 502, 0, 0, 517, 187,
	187, 0, 516, 0, 512, 513, 514, 515, 494, 495,
	496, 497, 498, 518, 0, 716, 717, 0, 723, 1334,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 1168,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 1171,
	1172, 1173, 0, 0, 0, 0, 0, 1176, 0, 1179,
	0, 0, 0, 0, 0, 0, 0, 0, 1188, 1189,
	1190, 0, 1193, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 236, 0, 187, 0, 541, 187,
	236, 236, 785, 786, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	236, 236, 236, 236, 681, 500, 510, 511, 503, 504,
	505, 506, 507, 508, 509, 502, 237, 0, 517, 0,
	0, 0, 516, 0, 512, 513, 514, 515, 494, 495,
	496, 497, 498, 518, 1226, 0, 0, 0, 0, 0,
	0, 0, 0, 840, 0, 0, 0, 0, 0, 1239,
	1240, 1241, 0, 0, 0, 0, 670, 671, 0, 0,
	674, 0, 0, 677, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1266, 1267, 1268, 1269, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 715, 0,
	0, 0, 0, 0, 0, 0, 1297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 0, 187, 0, 919, 920, 0, 469, 0,
	0, 0, 1310, 0, 0, 0, 0, 0, 0, 236,
	510, 511, 503, 504, 505, 506, 507, 508, 509, 502,
	0, 0, 517, 0, 0, 0, 516, 0, 512, 513,
	514, 515, 494, 495, 496, 497, 498, 518, 0, 0,
	636, 0, 0, 0, 0, 0, 1336, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 236, 0, 0, 0, 952, 0, 0, 1068,
	1069, 0, 0, 0, 0, 0, 963, 187, 832, 0,
	0, 0, 236, 0, 0, 0, 0, 237, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 237, 0, 0, 0, 624, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 681, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 793,
	0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 888, 0, 637, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 913, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 650, 651,
	652, 653, 654, 655, 656, 0, 657, 658, 659, 660,
	661, 638, 639, 640, 641, 622, 623, 0, 187, 625,
	766, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 642, 643, 644, 645, 646, 647, 648, 649, 0,
	187, 0, 0, 767, 768, 24, 25, 49, 27, 28,
	236, 0, 541, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 236, 0, 0,
	29, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 0, 0, 765, 0, 0, 0,
	38, 0, 0, 0, 0, 51, 0, 0, 0, 1113,
	1114, 0, 0, 1115, 592, 491, 1117, 499, 0, 0,
	0, 0, 0, 519, 520, 521, 522, 523, 524, 525,
	0, 492, 493, 1263, 501, 500, 510, 511, 503, 504,
	505, 506, 507, 508, 509, 502, 0, 0, 517, 0,
	0, 0, 516, 0, 512, 513, 514, 515, 494, 495,
	496, 497, 498, 518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 31, 32, 34, 33, 36, 0, 0,
	192, 0, 0, 24, 25, 49, 27, 28, 0, 0,
	0, 0, 0, 1165, 37, 45, 43, 0, 0, 46,
	47, 35, 44, 0, 0, 0, 0, 0, 29, 0,
	0, 0, 0, 39, 40, 0, 41, 42, 0, 1175,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 541, 51, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 1265,
	0, 31, 32, 34, 33, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 793, 0,
	0, 0, 37, 45, 43, 0, 0, 46, 47, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 40, 0, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 0,
	0, 0, 0, 0, 0, 0, 0, 1293, 541, 404,
	394, 0, 366, 406, 344, 358, 414, 359, 360, 387,
	330, 374, 128, 356, 0, 347, 325, 353, 326, 345,
	368, 95, 90, 371, 343, 396, 377, 109, 126, 412,
	111, 382, 0, 145, 120, 50, 0, 370, 398, 372,
	392, 365, 388, 335, 381, 407, 357, 385, 408, 0,
	0, 0, 0, 76, 0, 847, 848, 0, 0, 0,
	0, 87, 0, 384, 403, 355, 386, 0, 323, 383,
	0, 328, 331, 413, 401, 350, 351, 1010, 0, 0,
	0, 0, 0, 0, 369, 373, 389, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 380, 0,
	0, 0, 332, 329, 0, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	349, 390, 0, 322, 393, 399, 364, 190, 402, 362,
	361, 405, 134, 0, 0, 148, 100, 99, 108, 397,
	346, 354, 91, 352, 140, 130, 160, 379, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 324, 0, 327, 0, 146, 162,
	175, 342, 400, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 338, 341, 336, 337, 375, 376, 409,
	410, 411, 391, 333, 0, 339, 340, 0, 395, 378,
	78, 0, 110, 172, 136, 97, 163, 404, 394, 0,
	366, 406, 344, 358, 414, 359, 360, 387, 330, 374,
	128, 356, 0, 347, 325, 353, 326, 345, 368, 95,
	90, 371, 343, 396, 377, 109, 126, 412, 111, 382,
	0, 145, 120, 0, 0, 370, 398, 372, 392, 365,
	388, 335, 381, 407, 357, 385, 408, 0, 0, 0,
	0, 76, 0, 847, 848, 0, 0, 0, 0, 87,
	0, 384, 403, 355, 386, 0, 323, 383, 0, 328,
	331, 413, 401, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 369, 373, 389, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 380, 0, 0, 0,
	332, 329, 0, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 349, 390,
	0, 322, 393, 399, 364, 190, 402, 362, 361, 405,
	134, 0, 0, 148, 100, 99, 108, 397, 346, 354,
	91, 352, 140, 130, 160, 379, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 324, 0, 327, 0, 146, 162, 175, 342,
	400, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 338, 341, 336, 337, 375, 376, 409, 410, 411,
	391, 333, 0, 339, 340, 0, 395, 378, 78, 0,
	110, 172, 136, 97, 163, 404, 394, 0, 366, 406,
	344, 358, 414, 359, 360, 387, 330, 374, 128, 356,
	0, 347, 325, 353, 326, 345, 368, 95, 90, 371,
	343, 396, 377, 109, 126, 412, 111, 382, 0, 145,
	120, 0, 0, 370, 398, 372, 392, 365, 388, 335,
	381, 407, 357, 385, 408, 0, 51, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 384,
	403, 355, 386, 0, 323, 383, 0, 328, 331, 413,
	401, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	369, 373, 389, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 380, 0, 0, 0, 332, 329,
	0, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 349, 390, 0, 322,
	393, 399, 364, 190, 402, 362, 361, 405, 134, 0,
	0, 148, 100, 99, 108, 397, 346, 354, 91, 352,
	140, 130, 160, 379, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	324, 0, 327, 0, 146, 162, 175, 342, 400, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 338,
	341, 336, 337, 375, 376, 409, 410, 411, 391, 333,
	0, 339, 340, 0, 395, 378, 78, 0, 110, 172,
	136, 97, 163, 404, 394, 0, 366, 406, 344, 358,
	414, 359, 360, 387, 330, 374, 128, 356, 0, 347,
	325, 353, 326, 345, 368, 95, 90, 371, 343, 396,
	377, 109, 126, 412, 111, 382, 0, 145, 120, 0,
	0, 370, 398, 372, 392, 365, 388, 335, 381, 407,
	357, 385, 408, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 384, 403, 355,
	386, 0, 323, 383, 0, 328, 331, 413, 401, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 369, 373,
	389, 363, 0, 0, 0, 0, 0, 0, 1075, 0,
	348, 0, 380, 0, 0, 0, 332, 329, 0, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 334, 0, 349, 390, 0, 322, 393, 399,
	364, 190, 402, 362, 361, 405, 134, 0, 0, 148,
	100, 99, 108, 397, 346, 354, 91, 352, 140, 130,
	160, 379, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 324, 0,
	327, 0, 146, 162, 175, 342, 400, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 338, 341, 336,
	337, 375, 376, 409, 410, 411, 391, 333, 0, 339,
	340, 0, 395, 378, 78, 0, 110, 172, 136, 97,
	163, 404, 394, 0, 366, 406, 344, 358, 414, 359,
	360, 387, 330, 374, 128, 356, 0, 347, 325, 353,
	326, 345, 368, 95, 90, 371, 343, 396, 377, 109,
	126, 412, 111, 382, 0, 145, 120, 0, 0, 370,
	398, 372, 392, 365, 388, 335, 381, 407, 357, 385,
	408, 0, 0, 0, 0, 242, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 384, 403, 355, 386, 0,
	323, 383, 0, 328, 331, 413, 401, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 369, 373, 389, 363,
	0, 0, 0, 0, 0, 0, 725, 0, 348, 0,
	380, 0, 0, 0, 332, 329, 0, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	334, 0, 349, 390, 0, 322, 393, 399, 364, 190,
	402, 362, 361, 405, 134, 0, 0, 148, 100, 99,
	108, 397, 346, 354, 91, 352, 140, 130, 160, 379,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 324, 0, 327, 0,
	146, 162, 175, 342, 400, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 338, 341, 336, 337, 375,
	376, 409, 410, 411, 391, 333, 0, 339, 340, 0,
	395, 378, 78, 0, 110, 172, 136, 97, 163, 404,
	394, 0, 366, 406, 344, 358, 414, 359, 360, 387,
	330, 374, 128, 356, 0, 347, 325, 353, 326, 345,
	368, 95, 90, 371, 343, 396, 377, 109, 126, 412,
	111, 382, 0, 145, 120, 0, 0, 370, 398, 372,
	392, 365, 388, 335, 381, 407, 357, 385, 408, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 384, 403, 355, 386, 0, 323, 383,
	0, 328, 331, 413, 401, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 369, 373, 389, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 380, 0,
	0, 0, 332, 329, 0, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	349, 390, 0, 322, 393, 399, 364, 190, 402, 362,
	361, 405, 134, 0, 0, 148, 100, 99, 108, 397,
	346, 354, 91, 352, 140, 130, 160, 379, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 324, 0, 327, 0, 146, 162,
	175, 342, 400, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 338, 341, 336, 337, 375, 376, 409,
	410, 411, 391, 333, 0, 339, 340, 0, 395, 378,
	78, 0, 110, 172, 136, 97, 163, 404, 394, 0,
	366, 406, 344, 358, 414, 359, 360, 387, 330, 374,
	128, 356, 0, 347, 325, 353, 326, 345, 368, 95,
	90, 371, 343, 396, 377, 109, 126, 412, 111, 382,
	0, 145, 120, 0, 0, 370, 398, 372, 392, 365,
	388, 335, 381, 407, 357, 385, 408, 0, 0, 0,
	0, 242, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 384, 403, 355, 386, 0, 323, 383, 0, 328,
	331, 413, 401, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 369, 373, 389, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 380, 0, 0, 0,
	332, 329, 0, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 349, 390,
	0, 322, 393, 399, 364, 190, 402, 362, 361, 405,
	134, 0, 0, 148, 100, 99, 108, 397, 346, 354,
	91, 352, 140, 130, 160, 379, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 324, 0, 327, 0, 146, 162, 175, 342,
	400, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 338, 341, 336, 337, 375, 376, 409, 410, 411,
	391, 333, 0, 339, 340, 0, 395, 378, 78, 0,
	110, 172, 136, 97, 163, 404, 394, 0, 366, 406,
	344, 358, 414, 359, 360, 387, 330, 374, 128, 356,
	0, 347, 325, 353, 326, 345, 368, 95, 90, 371,
	343, 396, 377, 109, 126, 412, 111, 382, 0, 145,
	120, 0, 0, 370, 398, 372, 392, 365, 388, 335,
	381, 407, 357, 385, 408, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 384,
	403, 355, 386, 0, 323, 383, 0, 328, 331, 413,
	401, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	369, 373, 389, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 380, 0, 0, 0, 332, 329,
	0, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 349, 390, 0, 322,
	393, 399, 364, 190, 402, 362, 361, 405, 134, 0,
	0, 148, 100, 99, 108, 397, 346, 354, 91, 352,
	140, 130, 160, 379, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 320,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	324, 0, 327, 0, 146, 162, 175, 342, 400, 168,
	169, 170, 171, 0, 0, 0, 321, 319, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 338,
	341, 336, 337, 375, 376, 409, 410, 411, 391, 333,
	0, 339, 340, 0, 395, 378, 78, 0, 110, 172,
	136, 97, 163, 404, 394, 0, 366, 406, 344, 358,
	414, 359, 360, 387, 330, 374, 128, 356, 0, 347,
	325, 353, 326, 345, 368, 95, 90, 371, 343, 396,
	377, 109, 126, 412, 111, 382, 0, 145, 120, 0,
	0, 370, 398, 372, 392, 365, 388, 335, 381, 407,
	357, 385, 408, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 384, 403, 355,
	386, 0, 323, 383, 0, 328, 331, 413, 401, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 369, 373,
	389, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	348, 0, 380, 0, 0, 0, 332, 329, 0, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 334, 0, 349, 390, 0, 322, 393, 399,
	364, 190, 402, 362, 361, 405, 134, 0, 0, 148,
	100, 99, 108, 397, 346, 354, 91, 352, 140, 130,
	160, 379, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 324, 0,
	327, 0, 146, 162, 175, 342, 400, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 338, 341, 336,
	337, 375, 376, 409, 410, 411, 391, 333, 0, 339,
	340, 0, 395, 378, 78, 0, 110, 172, 136, 97,
	163, 404, 394, 0, 366, 406, 344, 358, 414, 359,
	360, 387, 330, 374, 128, 356, 0, 347, 325, 353,
	326, 345, 368, 95, 90, 371, 343, 396, 377, 109,
	126, 412, 111, 382, 0, 145, 120, 0, 0, 370,
	398, 372, 392, 365, 388, 335, 381, 407, 357, 385,
	408, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 384, 403, 355, 386, 0,
	323, 383, 0, 328, 331, 413, 401, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 369, 373, 389, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
	380, 0, 0, 0, 332, 329, 0, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	334, 0, 349, 390, 0, 322, 393, 399, 364, 190,
	402, 362, 361, 405, 134, 0, 0, 148, 100, 99,
	108, 397, 346, 354, 91, 352, 140, 130, 160, 379,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 602, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 320, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 324, 0, 327, 0,
	146, 162, 175, 342, 400, 168, 169, 170, 171, 0,
	0, 0, 321, 319, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 338, 341, 336, 337, 375,
	376, 409, 410, 411, 391, 333, 0, 339, 340, 0,
	395, 378, 78, 0, 110, 172, 136, 97, 163, 404,
	394, 0, 366, 406, 344, 358, 414, 359, 360, 387,
	330, 374, 128, 356, 0, 347, 325, 353, 326, 345,
	368, 95, 90, 371, 343, 396, 377, 109, 126, 412,
	111, 382, 0, 145, 120, 0, 0, 370, 398, 372,
	392, 365, 388, 335, 381, 407, 357, 385, 408, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 384, 403, 355, 386, 0, 323, 383,
	0, 328, 331, 413, 401, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 369, 373, 389, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 380, 0,
	0, 0, 332, 329, 0, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	349, 390, 0, 322, 393, 399, 364, 190, 402, 362,
	361, 405, 134, 0, 0, 148, 100, 99, 108, 397,
	346, 354, 91, 352, 140, 130, 160, 379, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	311, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 320, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 324, 0, 327, 0, 146, 162,
	175, 342, 400, 168, 169, 170, 171, 0, 0, 0,
	321, 319, 314, 313, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 338, 341, 336, 337, 375, 376, 409,
	410, 411, 391, 333, 0, 339, 340, 0, 395, 378,
	78, 0, 110, 172, 136, 97, 163, 128, 0, 0,
	776, 0, 244, 0, 0, 0, 95, 90, 0, 241,
	0, 0, 109, 126, 281, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 242, 262,
	261, 264, 265, 266, 267, 0, 87, 263, 268, 269,
	270, 0, 0, 0, 239, 255, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 235,
	0, 0, 0, 295, 0, 254, 0, 0, 250, 251,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 293, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 0, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 274,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 285, 294,
	291, 292, 289, 290, 288, 287, 286, 296, 277, 278,
	282, 283, 284, 0, 279, 78, 0, 110, 172, 136,
	97, 163, 128, 0, 0, 0, 0, 244, 0, 0,
	0, 95, 90, 0, 241, 0, 0, 109, 126, 281,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 275,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 242, 262, 261, 264, 265, 266, 267,
	0, 87, 263, 268, 269, 270, 0, 0, 0, 239,
	255, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 0, 0, 0, 0, 295, 0,
	254, 0, 0, 250, 251, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	293, 0, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 1335, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 274, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 285, 294, 291, 292, 289, 290, 288,
	287, 286, 296, 277, 278, 282, 283, 284, 0, 279,
	78, 0, 110, 172, 136, 97, 163, 128, 0, 0,
	0, 0, 244, 0, 0, 0, 95, 90, 0, 241,
	0, 0, 109, 126, 281, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 275, 276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 461, 242, 262,
	261, 264, 265, 266, 267, 0, 87, 263, 268, 269,
	270, 0, 0, 0, 239, 255, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 0,
	0, 0, 0, 295, 0, 254, 0, 0, 250, 251,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 293, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 0, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 274,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 285, 294,
	291, 292, 289, 290, 288, 287, 286, 296, 277, 278,
	282, 283, 284, 0, 279, 78, 0, 110, 172, 136,
	97, 163, 128, 0, 0, 0, 0, 244, 0, 0,
	0, 95, 90, 0, 241, 0, 0, 109, 126, 281,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 275,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 242, 262, 261, 264, 265, 266, 267,
	0, 87, 263, 268, 269, 270, 0, 0, 0, 239,
	255, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 235, 0, 0, 0, 295, 0,
	254, 0, 0, 250, 251, 256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	293, 0, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 0, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 274, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 285, 294, 291, 292, 289, 290, 288,
	287, 286, 296, 277, 278, 282, 283, 284, 0, 279,
	78, 0, 110, 172, 136, 97, 163, 128, 0, 0,
	0, 0, 244, 0, 0, 0, 95, 90, 0, 241,
	0, 0, 109, 126, 281, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 275, 276, 0, 0, 0, 0,
	0, 0, 839, 0, 0, 51, 0, 0, 242, 262,
	261, 264, 265, 266, 267, 0, 87, 263, 268, 269,
	270, 0, 0, 0, 239, 255, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 0,
	0, 0, 0, 295, 0, 254, 0, 0, 250, 251,
	256, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 293, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 0, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 274,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 285, 294,
	291, 292, 289, 290, 288, 287, 286, 296, 277, 278,
	282, 283, 284, 24, 279, 78, 0, 110, 172, 136,
	97, 163, 0, 0, 0, 128, 0, 0, 0, 0,
	244, 0, 0, 0, 95, 90, 0, 241, 0, 0,
	109, 126, 281, 111, 0, 0, 145, 120, 0, 0,
	0, 0, 275, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 242, 262, 261, 264,
	265, 266, 267, 0, 87, 263, 268, 269, 270, 0,
	0, 0, 239, 255, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 0, 0, 0,
	0, 295, 0, 254, 0, 0, 250, 251, 256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 0, 0, 293, 0, 134, 0, 0, 148, 100,
	99, 108, 0, 0, 0, 91, 0, 140, 130, 160,
	0, 131, 139, 112, 152, 135, 159, 191, 167, 150,
	166, 79, 149, 158, 88, 142, 81, 156, 147, 118,
	104, 105, 80, 0, 138, 94, 98, 93, 127, 153,
	154, 92, 174, 84, 165, 83, 85, 164, 125, 151,
	157, 119, 116, 82, 155, 117, 115, 107, 96, 101,
	132, 114, 133, 102, 122, 121, 123, 274, 0, 0,
	0, 146, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 124, 86, 103, 143, 106, 113, 137,
	173, 129, 141, 89, 161, 144, 285, 294, 291, 292,
	289, 290, 288, 287, 286, 296, 277, 278, 282, 283,
	284, 0, 279, 78, 0, 110, 172, 136, 97, 163,
	128, 0, 0, 0, 0, 244, 0, 0, 0, 95,
	90, 0, 241, 0, 0, 109, 126, 281, 111, 0,
	0, 145, 120, 0, 0, 0, 0, 275, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 242, 262, 261, 264, 265, 266, 267, 0, 87,
	263, 268, 269, 270, 0, 0, 0, 239, 255, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 0, 0, 0, 0, 295, 0, 254, 0,
	0, 250, 251, 256, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 293, 0,
	134, 0, 0, 148, 100, 99, 108, 0, 0, 0,
	91, 0, 140, 130, 160, 0, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 274, 0, 0, 0, 146, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 285, 294, 291, 292, 289, 290, 288, 287, 286,
	296, 277, 278, 282, 283, 284, 0, 279, 78, 0,
	110, 172, 136, 97, 163, 128, 0, 0, 0, 484,
	0, 0, 0, 0, 95, 90, 0, 0, 0, 0,
	109, 126, 0, 111, 0, 0, 145, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 0, 486, 0,
	0, 0, 1180, 461, 87, 0, 0, 0, 0, 480,
	482, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 499, 0, 0, 0, 0, 481, 519, 520,
	521, 522, 523, 524, 525, 0, 492, 493, 490, 501,
	500, 510, 511, 503, 504, 505, 506, 507, 508, 509,
	502, 0, 0, 517, 0, 0, 0, 516, 0, 512,
	513, 514, 515, 494, 495, 496, 497, 498, 518, 0,
	190, 0, 0, 0, 0, 134, 0, 0, 148, 100,
	99, 108, 0, 0, 0, 91, 0, 140, 130, 160,
	0, 131, 139, 112, 152, 135, 159, 191, 167, 150,
	166, 79, 149, 158, 88, 142, 81, 156, 147, 118,
	104, 105, 80, 0, 138, 94, 98, 93, 127, 153,
	154, 92, 174, 84, 165, 83, 85, 164, 125, 151,
	157, 119, 116, 82, 155, 117, 115, 107, 96, 101,
	132, 114, 133, 102, 122, 121, 123, 0, 0, 0,
	0, 146, 162, 175, 0, 0, 168, 169, 170, 171,
	0, 0, 0, 124, 86, 103, 143, 106, 113, 137,
	173, 129, 141, 89, 161, 144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 78, 0, 110, 172, 136, 97, 163,
	95, 90, 0, 0, 0, 0, 109, 126, 0, 111,
	0, 0, 145, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 491,
	87, 499, 0, 0, 0, 69, 0, 519, 520, 521,
	522, 523, 524, 525, 0, 492, 493, 490, 501, 500,
	510, 511, 503, 504, 505, 506, 507, 508, 509, 502,
	0, 0, 517, 0, 0, 0, 516, 0, 512, 513,
	514, 515, 494, 495, 496, 497, 498, 518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 73, 0, 68, 0, 0, 0,
	74, 134, 0, 942, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 131, 139, 112,
	152, 135, 159, 70, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 0, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 78,
	0, 110, 172, 136, 97, 163, 95, 90, 0, 0,
	0, 0, 109, 126, 0, 111, 0, 0, 145, 120,
	0, 1177, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1272, 0, 0, 1274, 0, 0, 76, 491,
	0, 499, 0, 0, 0, 0, 87, 519, 520, 521,
	522, 523, 524, 525, 0, 492, 493, 490, 501, 500,
	510, 511, 503, 504, 505, 506, 507, 508, 509, 502,
	0, 0, 517, 0, 0, 0, 516, 0, 512, 513,
	514, 515, 494, 495, 496, 497, 498, 518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 636, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 0,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 78, 0, 110, 172, 136,
	97, 163, 128, 0, 0, 0, 591, 0, 0, 0,
	0, 95, 90, 0, 0, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 0, 637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 593, 0, 0, 0, 0,
	0, 87, 0, 650, 651, 652, 653, 654, 655, 656,
	0, 657, 658, 659, 660, 661, 638, 639, 640, 641,
	622, 623, 0, 0, 625, 0, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 642, 643, 644, 645,
	646, 647, 648, 649, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 0, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 0, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	78, 0, 110, 172, 136, 97, 163, 95, 90, 0,
	0, 0, 0, 109, 126, 461, 111, 0, 0, 145,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 491, 0, 499, 0, 51, 0, 0, 76,
	519, 520, 521, 522, 523, 524, 525, 87, 492, 493,
	490, 501, 500, 510, 511, 503, 504, 505, 506, 507,
	508, 509, 502, 0, 0, 517, 0, 0, 0, 516,
	0, 512, 513, 514, 515, 494, 495, 496, 497, 498,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 134, 0,
	0, 148, 100, 99, 108, 0, 0, 0, 91, 0,
	140, 130, 160, 0, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	0, 0, 0, 0, 146, 162, 175, 0, 0, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 0,
	1181, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 78, 0, 110, 172,
	136, 97, 163, 95, 90, 0, 0, 0, 0, 109,
	126, 0, 111, 0, 0, 145, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 188, 491, 0, 499, 0,
	0, 0, 0, 87, 519, 520, 521, 522, 523, 524,
	525, 0, 492, 493, 490, 501, 500, 510, 511, 503,
	504, 505, 506, 507, 508, 509, 502, 0, 0, 517,
	0, 0, 0, 516, 0, 512, 513, 514, 515, 494,
	495, 496, 497, 498, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 100, 99,
	108, 0, 0, 0, 91, 0, 140, 130, 160, 0,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 0, 0, 0, 0,
	146, 162, 175, 0, 0, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 0, 0, 1178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 78, 0, 110, 172, 136, 97, 163, 95,
	90, 0, 0, 0, 0, 109, 126, 0, 111, 0,
	0, 145, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 491, 711, 499, 0, 712, 0, 87,
	0, 519, 520, 521, 522, 523, 524, 525, 0, 492,
	493, 490, 501, 500, 510, 511, 503, 504, 505, 506,
	507, 508, 509, 502, 0, 0, 517, 0, 0, 0,
	516, 0, 512, 513, 514, 515, 494, 495, 496, 497,
	498, 518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	134, 0, 0, 148, 100, 99, 108, 0, 0, 0,
	91, 0, 140, 130, 160, 0, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 0, 0, 0, 0, 146, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 78, 0,
	110, 172, 136, 97, 163, 95, 90, 0, 611, 0,
	0, 109, 126, 0, 111, 0, 0, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 610,
	1081, 491, 0, 499, 0, 87, 0, 0, 0, 519,
	520, 521, 522, 523, 524, 525, 0, 492, 493, 490,
	501, 500, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 0, 0, 517, 0, 0, 0, 516, 0,
	512, 513, 514, 515, 494, 495, 496, 497, 498, 518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 110, 172, 136, 97,
	163, 128, 0, 0, 0, 591, 0, 0, 0, 0,
	95, 90, 0, 0, 0, 0, 109, 126, 0, 111,
	0, 0, 145, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 593, 943, 491, 0, 499, 0,
	87, 0, 0, 0, 519, 520, 521, 522, 523, 524,
	525, 0, 492, 493, 490, 501, 500, 510, 511, 503,
	504, 505, 506, 507, 508, 509, 502, 0, 0, 517,
	0, 0, 0, 516, 0, 512, 513, 514, 515, 494,
	495, 496, 497, 498, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 134, 0, 0, 148, 100, 99, 108, 0, 0,
	0, 91, 0, 140, 130, 160, 0, 589, 139, 112,
	152, 135, 159, 191, 167, 150, 166, 79, 149, 158,
	88, 142, 81, 156, 147, 118, 104, 105, 80, 0,
	138, 94, 98, 93, 127, 153, 154, 92, 174, 84,
	165, 83, 85, 164, 125, 151, 157, 119, 116, 82,
	155, 117, 115, 107, 96, 101, 132, 114, 133, 102,
	122, 121, 123, 0, 0, 0, 0, 146, 162, 175,
	0, 0, 168, 169, 170, 171, 0, 0, 0, 124,
	86, 103, 143, 106, 113, 137, 173, 129, 141, 89,
	161, 144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 78,
	0, 110, 172, 136, 97, 163, 95, 90, 0, 0,
	0, 0, 109, 126, 0, 111, 0, 0, 145, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 499, 0, 51, 0, 0, 188, 519,
	520, 521, 522, 523, 524, 525, 87, 492, 493, 490,
	501, 500, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 0, 0, 517, 0, 0, 0, 516, 0,
	512, 513, 514, 515, 494, 495, 496, 497, 498, 518,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 134, 0, 0,
	148, 100, 99, 108, 0, 0, 0, 91, 0, 140,
	130, 160, 0, 131, 139, 112, 152, 135, 159, 191,
	167, 150, 166, 79, 149, 158, 88, 142, 81, 156,
	147, 118, 104, 105, 80, 0, 138, 94, 98, 93,
	127, 153, 154, 92, 174, 84, 165, 83, 85, 164,
	125, 151, 157, 119, 116, 82, 155, 117, 115, 107,
	96, 101, 132, 114, 133, 102, 122, 121, 123, 0,
	0, 0, 0, 146, 162, 175, 0, 0, 168, 169,
	170, 171, 0, 0, 0, 124, 86, 103, 143, 106,
	113, 137, 173, 129, 141, 89, 161, 144, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 78, 0, 110, 172, 136,
	97, 163, 95, 90, 0, 0, 0, 0, 109, 126,
	0, 111, 0, 0, 145, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 593, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 134, 0, 0, 148, 100, 99, 108,
	0, 0, 0, 91, 0, 140, 130, 160, 0, 131,
	139, 112, 152, 135, 159, 191, 167, 150, 166, 79,
	149, 158, 88, 142, 81, 156, 147, 118, 104, 105,
	80, 0, 138, 94, 98, 93, 127, 153, 154, 92,
	174, 84, 165, 83, 85, 164, 125, 151, 157, 119,
	116, 82, 155, 117, 115, 107, 96, 101, 132, 114,
	133, 102, 122, 121, 123, 0, 0, 0, 0, 146,
	162, 175, 0, 0, 168, 169, 170, 171, 0, 0,
	0, 124, 86, 103, 143, 106, 113, 137, 173, 129,
	141, 89, 161, 144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 78, 0, 110, 172, 136, 97, 163, 95, 90,
	0, 0, 0, 0, 109, 126, 0, 111, 0, 0,
	145, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 486, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 134,
	0, 0, 148, 100, 99, 108, 0, 0, 0, 91,
	0, 140, 130, 160, 0, 131, 139, 112, 152, 135,
	159, 191, 167, 150, 166, 79, 149, 158, 88, 142,
	81, 156, 147, 118, 104, 105, 80, 0, 138, 94,
	98, 93, 127, 153, 154, 92, 174, 84, 165, 83,
	85, 164, 125, 151, 157, 119, 116, 82, 155, 117,
	115, 107, 96, 101, 132, 114, 133, 102, 122, 121,
	123, 0, 0, 0, 0, 146, 162, 175, 0, 0,
	168, 169, 170, 171, 0, 0, 0, 124, 86, 103,
	143, 106, 113, 137, 173, 129, 141, 89, 161, 144,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 78, 0, 110,
	172, 136, 97, 163, 569, 95, 90, 0, 0, 0,
	0, 109, 126, 0, 111, 0, 0, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 128, 0, 78, 0, 110, 172, 136, 97,
	163, 95, 90, 0, 0, 0, 0, 109, 126, 0,
	111, 0, 0, 145, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 134, 0, 0, 148, 100, 99, 108, 0,
	0, 0, 91, 0, 140, 130, 160, 0, 131, 139,
	112, 152, 135, 159, 191, 167, 150, 166, 79, 149,
	158, 88, 142, 81, 156, 147, 118, 104, 105, 80,
	0, 138, 94, 98, 93, 127, 153, 154, 92, 174,
	84, 165, 83, 85, 164, 125, 151, 157, 119, 116,
	82, 155, 117, 115, 107, 96, 101, 132, 114, 133,
	102, 122, 121, 123, 0, 0, 0, 0, 146, 162,
	175, 0, 0, 168, 169, 170, 171, 0, 0, 0,
	124, 86, 103, 143, 106, 113, 137, 173, 129, 141,
	89, 161, 144, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	78, 0, 110, 172, 136, 97, 163, 95, 90, 0,
	0, 0, 0, 109, 126, 0, 111, 0, 0, 145,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 190, 0, 0, 0, 0, 134, 0,
	0, 148, 100, 99, 108, 0, 0, 0, 91, 0,
	140, 130, 160, 0, 131, 139, 112, 152, 135, 159,
	191, 167, 150, 166, 79, 149, 158, 88, 142, 81,
	156, 147, 118, 104, 105, 80, 0, 138, 94, 98,
	93, 127, 153, 154, 92, 174, 84, 165, 83, 85,
	164, 125, 151, 157, 119, 116, 82, 155, 117, 115,
	107, 96, 101, 132, 114, 133, 102, 122, 121, 123,
	0, 0, 0, 0, 146, 162, 175, 0, 0, 168,
	169, 170, 171, 0, 0, 0, 124, 86, 103, 143,
	106, 113, 137, 173, 129, 141, 89, 161, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 78, 0, 110, 172,
	136, 97, 163, 95, 90, 0, 0, 0, 0, 109,
	126, 0, 111, 0, 0, 145, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 134, 0, 0, 148, 100, 99,
	108, 0, 0, 0, 91, 0, 140, 130, 160, 0,
	131, 139, 112, 152, 135, 159, 191, 167, 150, 166,
	79, 149, 158, 88, 142, 81, 156, 147, 118, 104,
	105, 80, 0, 138, 94, 98, 93, 127, 153, 154,
	92, 174, 84, 165, 83, 85, 164, 125, 151, 157,
	119, 116, 82, 155, 117, 115, 107, 96, 101, 132,
	114, 133, 102, 122, 121, 123, 0, 0, 0, 0,
	146, 162, 175, 0, 0, 168, 169, 170, 171, 0,
	0, 0, 124, 86, 103, 143, 106, 113, 137, 173,
	129, 141, 89, 161, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 78, 0, 110, 172, 136, 97, 163, 95,
	90, 0, 0, 0, 0, 109, 126, 0, 111, 0,
	0, 145, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	134, 0, 0, 148, 100, 99, 108, 0, 0, 0,
	91, 0, 140, 130, 160, 0, 131, 139, 112, 152,
	135, 159, 191, 167, 150, 166, 79, 149, 158, 88,
	142, 81, 156, 147, 118, 104, 105, 80, 0, 138,
	94, 98, 93, 127, 153, 154, 92, 174, 84, 165,
	83, 85, 164, 125, 151, 157, 119, 116, 82, 155,
	117, 115, 107, 96, 101, 132, 114, 133, 102, 122,
	121, 123, 0, 0, 0, 0, 146, 162, 175, 0,
	0, 168, 169, 170, 171, 0, 0, 0, 124, 86,
	103, 143, 106, 113, 137, 173, 129, 141, 89, 161,
	144, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 78, 0,
	110, 172, 136, 97, 163, 95, 90, 0, 0, 0,
	0, 109, 126, 0, 111, 0, 0, 145, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 134, 0, 0, 148,
	100, 99, 108, 0, 0, 0, 91, 0, 140, 130,
	160, 0, 131, 139, 112, 152, 135, 159, 191, 167,
	150, 166, 79, 149, 158, 88, 142, 81, 156, 147,
	118, 104, 105, 80, 0, 138, 94, 98, 93, 127,
	153, 154, 92, 174, 84, 165, 83, 85, 164, 125,
	151, 157, 119, 116, 82, 155, 117, 115, 107, 96,
	101, 132, 114, 133, 102, 122, 121, 123, 0, 0,
	0, 0, 146, 162, 175, 0, 0, 168, 169, 170,
	171, 0, 0, 0, 124, 86, 103, 143, 106, 113,
	137, 173, 129, 141, 89, 161, 144, 0, 0, 0,
	0, 0, 24, 25, 49, 27, 28, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 110, 172, 136, 97,
	163, 44, 0, 0, 0, 0, 0, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	31, 32, 34, 33, 36, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 45, 43, 0, 0, 46, 47, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 40, 0, 41, 42, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50,
}

var yyPact = [...]int16{
	11446, -1000, -187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 750, 782, -1000, -1000, -1000, -1000, -1000, -1000,
	548, 7413, 26, 60, -23, 10500, 59, 1238, 11208, -1000,
	-35, -1000, -1000, 2427, -1000, -1000, -1000, -1000, 508, -1000,
	-1000, -1000, -1000, -1000, 742, 746, 575, 735, 647, -1000,
	6194, 17, 9319, 10264, 5214, -1000, 432, 45, 11208, -161,
	10972, 14, 14, 14, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 42, 11208, -1000, 11208,
	12, 431, 12, 12, 12, 11208, -1000, 101, -1000, -1000,
	-1000, -1000, 11208, 404, 693, 61, 3150, 3150, 3150, 3150,
	-30, 3150, -105, 598, -1000, -1000, -1000, -1000, 3150, -1000,
	-1000, -1000, -1000, -1000, -1000, 2299, -1000, -1000, -1000, -1000,
	305, 695, 6932, 6932, 750, -1000, 508, -1000, -1000, -1000,
	671, -1000, -1000, 255, 763, -1000, 7177, 100, -1000, 6932,
	9296, 524, -1000, -1000, 524, -1000, -1000, -1000, -1000, -1000,
	6932, 6932, 6932, 6932, 6932, 6932, 6932, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 524, -1000, 6687, 524, 524, 524, 524, 524, 524,
	6932, 524, 524, 524, 524, 524, 524, 524, 524, 524,
	524, 524, 524, 524, 524, 524, 524, 10028, 496, 835,
	-1000, -1000, -1000, 731, 8366, 9083, 11208, 512, -1000, 510,
	4956, -127, -1000, -1000, -1000, 164, 8838, -1000, -1000, -1000,
	684, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 429, -1000, 7794, 396, 3150,
	27, 552, 393, 181, 391, 11208, 11208, 3150, 28, 11208,
	721, 592, 11208, 389, 377, -1000, 4698, -1000, 3150, 3150,
	3150, 3150, 3150, 3150, 3150, 3150, -1000, -1000, -1000, -1000,
	-1000, -1000, 3150, 3150, -1000, -100, -1000, 11208, -1000, -1000,
	-1000, -1000, -1000, 776, 130, 361, 99, 515, -1000, 342,
	742, 305, 647, 8602, 584, -1000, -1000, 11208, -1000, 6932,
	6932, 261, 6932, -1000, 9791, -1000, -1000, 3666, 136, 6932,
	90, 162, 6932, 6932, 438, 90, 90, 6932, 6932, 6932,
	6932, 6932, 6932, 6932, 6932, 6932, 6932, 6932, 6932, 6932,
	6932, 6932, 6932, 6932, 6932, 6932, 2089, 283, 6932, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 360, -1000, 508,
	282, 160, 282, 282, 282, 282, 282, 744, 5459, 305,
	427, 160, 6687, -1000, 6194, 6194, 6932, 6932, 6194, 185,
	160, 10736, 10736, 10736, 737, -1000, 305, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6194, 6194, 6194, 6194, -15, 11208,
	-1000, 10736, 9319, 9319, 9319, 9319, 9319, -1000, 621, 620,
	-1000, 631, 629, 637, 11208, -1000, 424, 8366, 105, 524,
	-1000, 9555, -1000, -1000, -15, 474, 9319, 11208, -1000, -1000,
	4440, 510, -127, 500, -1000, -114, -120, 6439, 114, -1000,
	-1000, -1000, -1000, 2892, 120, 196, -91, -1000, -1000, -1000,
	527, -1000, 527, 527, 527, 527, -62, -62, -62, -62,
	-1000, -1000, -1000, -1000, -1000, 547, 540, -1000, 527, 527,
	527, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 539, 539, 539,
	538, 538, 556, -1000, 11208, -177, 358, 3150, 720, 3150,
	-1000, 200, -1000, 11208, -1000, -1000, 11208, 3150, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 214, -1000, -1000, -1000, -1000, 632, 6932,
	6932, 4182, 6932, -1000, -1000, -1000, 695, -1000, 737, 752,
	-1000, 658, 656, 6194, -1000, -1000, 136, 154, -1000, -1000,
	248, -1000, -1000, 154, -1000, -1000, 97, 524, -1000, 9296,
	-1000, -1000, -1000, 109, -189, -1000, 90, 6932, 6932, 6932,
	7404, 1416, -1000, -1000, -1000, 9296, 9296, 9071, 1994, 1850,
	282, 66, 66, 1730, 1730, 1730, 1730, 1730, 1543, 1543,
	9296, 9296, 9296, 9296, -190, -1000, 527, -44, -45, -1000,
	-1000, -1000, -1000, 9296, 305, 305, 6194, 501, -1000, -1000,
	6932, -1000, 305, 418, 418, 266, 384, 418, 235, -1000,
	6932, 305, -1000, 94, 536, 529, 6194, -1000, 418, 305,
	418, 418, 507, 524, -1000, 484, -1000, 163, 835, 566,
	574, 766, -1000, -1000, -1000, -1000, 617, -1000, 609, -1000,
	-1000, -1000, -1000, -1000, 44, 43, 32, 10972, -1000, 760,
	9319, 513, -1000, -1000, 500, -127, -134, -1000, -1000, -1000,
	160, -1000, 354, 497, 2634, -1000, -1000, -1000, -1000, -1000,
	-1000, 535, 707, 177, 134, 336, -1000, -1000, 699, -1000,
	234, -93, -1000, -1000, 285, -62, -62, -1000, -1000, 114,
	682, 114, 114, 114, 296, 296, -1000, -1000, -1000, -1000,
	279, -1000, -1000, -1000, 273, -1000, 571, 10972, 3150, -1000,
	3924, -1000, -1000, -1000, -1000, -1000, -1000, 579, 379, 174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -16, -1000, 3150, -1000, 219, 11208, 11208, 641, 160,
	160, 92, -1000, -1000, 11208, -1000, -1000, -1000, -1000, 521,
	-1000, -1000, -1000, 3408, 6194, 2089, 6932, -1000, 7404, 1416,
	8826, -1000, 6932, 6932, -193, -1000, -1000, -1000, -1000, -1000,
	418, 6194, 160, -1000, -1000, -1000, 2089, 283, 2089, -172,
	178, -1000, 6932, 357, -1000, 4182, 6932, 6932, 6932, 6932,
	479, -1000, -1000, -1000, -1000, 569, 10736, 524, -1000, 8130,
	10972, 750, 10736, 6932, 6932, -1000, -1000, 6932, 533, -1000,
	6932, -1000, -1000, -1000, 524, 524, 524, 368, -1000, 750,
	513, -1000, -1000, -1000, -116, -125, -1000, -1000, 2892, -1000,
	2892, 10972, -1000, 321, 314, -1000, -1000, 568, 31, -1000,
	-1000, -1000, 403, 114, 114, -1000, 190, -1000, -1000, -1000,
	414, -1000, 411, 495, 408, 11208, -1000, -1000, 492, -1000,
	155, -1000, -1000, 10972, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10972, 11208, -1000, -1000,
	-1000, -1000, -1000, 10972, -1000, -1000, 292, 6932, -1000, -1000,
	-1000, 3924, -1000, 760, 9319, -1000, -1000, 305, -190, 16,
	-1000, 6932, 9296, 9296, -1000, -1000, -1000, 9, 305, 9,
	524, -1000, 160, 6932, -1000, 7634, 8588, 7185, 8351, -169,
	-1000, 713, 455, 448, -1000, -1000, 5949, 305, 402, 88,
	368, 742, -1000, 160, 160, 160, 10972, 160, 10972, 10972,
	10972, 7894, 10972, 742, -1000, -1000, -1000, -1000, 2634, -1000,
	366, -1000, 527, -1000, -1000, -86, 775, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -62, 290,
	-62, 271, -1000, 262, 3150, 3924, 2892, -1000, 526, -1000,
	-1000, -1000, -1000, 715, -1000, 160, 753, 491, -1000, -1000,
	9296, -1000, -1000, -1000, 6932, 160, -1000, 6932, 6932, -1000,
	6932, 6932, 305, 288, 704, 706, -1000, 524, -1000, -1000,
	509, 10972, 10972, -1000, -1000, 364, -1000, 353, 353, 353,
	105, -1000, -1000, 80, 10972, -1000, 125, -1000, -143, 114,
	-1000, 114, 369, 335, -1000, -1000, -1000, 10972, 524, 754,
	745, 2290, 8107, 8107, 8107, 8107, -1000, -1000, -1000, 7649,
	767, -1000, 524, -1000, 508, 82, -1000, 10972, -1000, -1000,
	-1000, -1000, -1000, 80, -1000, 309, 146, 287, -1000, 202,
	702, -1000, 701, -1000, -1000, -1000, -1000, -1000, 334, -17,
	-1000, 6932, 6932, 41, 305, -180, -1000, -1000, -1000, -1000,
	530, 114, 0, -1000, 10972, 10736, 448, 305, 10972, -1000,
	-1000, -1000, 260, -1000, -1000, -1000, 267, -1000, -1000, 552,
	304, -1000, 10972, 160, 436, 635, -175, -1000, -183, -1000,
	703, 760, 10972, 302, 435, -1000, -1000, -1000, -1000, -177,
	-1000, -17, 655, -1000, 633, -1000, -1000, 667, -1000, -1000,
	-1000, -1000, -1000, -20, -178, 10736, -22, -181, 484, 524,
	-184, -1000, 5704, -1000, 8107, 305, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 121, 41, 587, 1018, 1015, 1014, 1013, 1012, 1011,
	1010, 1009, 1008, 1006, 999, 993, 992, 989, 986, 977,
	976, 975, 974, 973, 972, 115, 969, 967, 966, 52,
	965, 64, 964, 963, 29, 158, 35, 27, 1375, 962,
	26, 86, 65, 961, 40, 959, 958, 71, 957, 53,
	956, 954, 1570, 953, 952, 11, 6, 949, 948, 947,
	945, 56, 526, 944, 934, 933, 932, 931, 929, 38,
	9, 12, 13, 14, 928, 59, 7, 927, 34, 926,
	924, 923, 922, 23, 918, 48, 916, 17, 45, 905,
	4, 54, 20, 904, 903, 899, 894, 893, 10, 66,
	55, 888, 21, 47, 33, 886, 883, 345, 876, 875,
	874, 873, 871, 870, 128, 302, 868, 854, 853, 851,
	36, 172, 497, 153, 60, 848, 847, 845, 1242, 58,
	51, 18, 843, 22, 467, 30, 841, 839, 24, 62,
	835, 834, 833, 832, 830, 829, 61, 827, 826, 825,
	25, 28, 824, 822, 50, 43, 821, 818, 817, 39,
	46, 807, 42, 806, 805, 802, 801, 37, 32, 800,
	15, 799, 5, 798, 797, 2, 795, 16, 794, 3,
	793, 8, 31, 19, 792, 790, 0, 791, 789, 788,
	95,
}

var yyR1 = [...]uint8{
	0, 184, 185, 185, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 183, 183, 7, 7, 28, 28, 8, 9,
	9, 9, 188, 188, 47, 47, 91, 91, 10, 10,
	10, 10, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 136, 136, 11, 11, 11, 11, 11, 11, 11,
	181, 181, 180, 179, 179, 178, 178, 177, 16, 164,
	165, 165, 165, 160, 139, 139, 139, 139, 142, 142,
	140, 140, 140, 140, 140, 140, 140, 141, 141, 141,
	141, 141, 143, 143, 143, 143, 143, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 145, 145, 145, 145, 145, 145, 145, 145,
	159, 159, 146, 146, 154, 154, 155, 155, 155, 152,
	152, 153, 153, 156, 156, 156, 147, 147, 147, 147,
	147, 147, 147, 149, 149, 157, 157, 150, 150, 150,
	151, 151, 158, 158, 158, 158, 158, 148, 148, 161,
	161, 173, 173, 172, 172, 172, 163, 163, 169, 169,
	169, 169, 169, 162, 162, 171, 171, 170, 166, 166,
	166, 167, 167, 167, 168, 168, 168, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 176, 174, 174,
	175, 175, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 112, 112, 109, 109, 110, 110,
	111, 111, 111, 113, 113, 113, 137, 137, 137, 19,
	19, 22, 22, 23, 24, 21, 21, 20, 20, 20,
	20, 189, 25, 26, 26, 27, 27, 27, 31, 31,
	31, 29, 29, 30, 30, 36, 36, 35, 35, 37,
	37, 37, 37, 125, 125, 125, 124, 124, 39, 39,
	40, 40, 41, 41, 42, 42, 42, 54, 54, 90,
	90, 92, 92, 43, 43, 43, 43, 44, 44, 45,
	45, 46, 46, 132, 132, 131, 131, 131, 130, 130,
	48, 48, 48, 50, 49, 49, 49, 49, 51, 51,
	53, 53, 52, 52, 55, 55, 55, 55, 56, 56,
	38, 38, 38, 38, 38, 38, 38, 108, 108, 58,
	58, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 68, 68, 68, 68,
	68, 68, 59, 59, 59, 59, 59, 59, 59, 34,
	34, 69, 69, 69, 69, 69, 69, 75, 70, 70,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 66, 66, 66, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 65, 65, 65, 65, 65,
	65, 65, 65, 190, 190, 67, 67, 67, 67, 32,
	32, 32, 32, 32, 135, 135, 138, 138, 138, 138,
	138, 138, 138, 138, 79, 79, 33, 33, 77, 77,
	78, 80, 80, 76, 76, 76, 61, 61, 61, 61,
	61, 61, 61, 61, 63, 63, 63, 81, 81, 82,
	82, 83, 83, 84, 84, 85, 86, 86, 86, 87,
	87, 87, 87, 88, 88, 88, 60, 60, 60, 60,
	60, 60, 89, 89, 89, 89, 93, 93, 94, 94,
	96, 96, 96, 97, 97, 95, 95, 71, 71, 73,
	73, 72, 74, 98, 98, 102, 99, 99, 103, 103,
	103, 101, 101, 101, 127, 127, 127, 106, 106, 114,
	114, 115, 115, 107, 107, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 117, 117, 117, 118, 118,
	119, 119, 119, 126, 126, 122, 122, 123, 123, 128,
	128, 129, 129, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 186, 187, 133, 134,
	134, 134,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 0, 3, 7, 8, 1, 1, 8, 8,
	7, 6, 1, 1, 1, 3, 0, 4, 3, 4,
	5, 4, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 8, 4, 6, 5, 5, 5,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	1, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 2, 2,
	2, 2, 2, 0, 3, 0, 1, 0, 3, 3,
	0, 2, 0, 2, 1, 2, 1, 0, 2, 5,
	4, 1, 2, 2, 3, 2, 0, 1, 2, 3,
	3, 2, 2, 1, 1, 1, 3, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 3, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 3, 3,
	3, 3, 3, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 3, 4, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 4, 5, 6, 2,
	4, 4, 6, 6, 6, 9, 5, 4, 6, 8,
	8, 6, 8, 8, 7, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 1, 2, 1, 2,
	1, 2, 3, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 4, 0, 3,
	0, 3, 3, 1, 3, 2, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -184, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -22, -23, -24,
	-21, -20, -3, -4, 6, 7, -28, 9, 10, 31,
	-16, 124, 125, 127, 126, 152, 128, 145, 51, 164,
	165, 167, 168, 147, 25, 146, 150, 151, -186, 8,
	248, 56, -185, 263, -83, 15, -27, 5, -25, -189,
	-25, -25, -25, -25, -25, -164, 56, -119, 133, 72,
	160, 240, 130, 131, 137, -122, 59, -121, 256, 164,
	175, 169, 196, 188, 186, 189, 227, 67, 167, 236,
	28, 148, 184, 180, 178, 27, 201, 261, 179, 143,
	142, 202, 206, 228, 173, 174, 230, 200, 144, 33,
	258, 36, 156, 231, 204, 199, 195, 198, 172, 194,
	40, 208, 207, 209, 226, 191, 34, 181, 18, 234,
	151, 154, 203, 205, 138, 158, 260, 232, 177, 155,
	150, 235, 168, 229, 238, 39, 214, 171, 141, 165,
	162, 192, 157, 182, 183, 197, 170, 193, 166, 159,
	152, 237, 215, 262, 190, 187, 163, 161, 219, 220,
	221, 222, 259, 233, 185, 216, -107, 133, 135, 131,
	131, 132, 133, 240, 130, 131, -52, -128, 59, -121,
	133, 160, 131, 109, 189, 124, 217, 132, 33, 158,
	-137, 131, -109, 161, 219, 220, 221, 222, 59, 229,
	228, 223, -128, 166, -1, 128, -133, -133, -133, -133,
	-2, -87, 17, 16, -5, -3, -186, 6, 20, 21,
	-31, 41, 42, -26, -37, 100, -38, -128, -57, 75,
	-62, 30, 59, -121, 23, -61, -58, -76, -74, -75,
	109, 110, 98, 99, 106, 76, 111, -66, -64, -65,
	-67, 61, 60, 68, 62, 63, 64, 65, 69, 70,
	71, -122, -72, -186, 210, 45, 46, 249, 250, 255,
	78, 35, 251, 252, 253, 239, 247, 246, 245, 243,
	244, 241, 242, 136, 240, 104, 248, -107, -40, -41,
	-42, -43, -54, -75, -186, -52, 11, -47, -52, -99,
	-136, 166, -103, 229, 228, -123, -101, -122, -120, 227,
	189, 226, 129, 74, 210, 22, 24, 212, 77, 109,
	16, 78, 108, 249, 124, 49, 241, 242, 239, 251,
	252, 240, 217, 30, 10, 25, 146, 21, 102, 126,
	81, 82, 149, 23, 147, 71, 19, 52, 11, 13,
	14, 136, 135, 93, 132, 47, 8, 111, 26, 90,
	43, 29, 45, 91, 17, 243, 244, 32, 255, 153,
	104, 50, 37, 75, 69, 53, 72, 15, 48, 92,
	127, 248, 46, 130, 6, 254, 31, 145, 44, 131,
	218, 80, 134, 70, 5, 137, 9, 51, 54, 245,
	246, 247, 35, 79, 12, -165, -160, 59, 132, -52,
	248, -122, -115, 136, -115, -115, 131, -52, -52, -114,
	136, 59, -114, -114, -114, -52, 113, -52, 59, 31,
	240, 59, 158, 131, 159, 133, -134, -186, -123, -134,
	-134, -134, 162, 163, -134, -110, 224, 53, -134, -1,
	-187, 58, -88, 19, 32, -38, -128, -84, -85, -38,
	-83, -2, -25, 37, -29, 21, 66, 11, -125, 74,
	72, 90, 73, -124, 22, -122, 61, 113, -38, -59,
	93, 75, 91, 92, 118, 119, 120, 121, 122, 77,
	95, 94, 105, 98, 99, 100, 101, 102, 103, 104,
	96, 97, 114, 115, 116, 117, 112, 108, 123, 83,
	84, 85, 86, 87, 88, 89, -108, -186, -75, -186,
	-62, -38, -62, -62, -62, -62, -62, -62, -186, -2,
	-70, -38, -186, -75, -186, -186, -186, -186, -186, -79,
	-38, -186, -186, -186, -186, -190, -186, -190, -190, -190,
	-190, -190, -190, -190, -186, -186, -186, -186, -53, 26,
	-52, 31, 57, -48, -50, -49, -51, 43, 47, 49,
	44, 45, 46, 50, -132, 22, -40, -186, -131, 154,
	-130, 22, -128, 61, -52, -47, -188, 57, 11, 54,
	57, -99, 166, -100, -104, 230, 232, 83, -127, -122,
	61, 30, 31, 58, 57, -139, -142, -144, -143, -145,
	-140, -141, 186, 187, 109, 190, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 31, 148, 182, 183,
	184, 185, 202, 203, 204, 205, 206, 207, 208, 209,
	169, 170, 171, 172, 173, 174, 175, 177, 178, 179,
	180, 181, 59, -134, 133, -181, 54, 59, 75, 59,
	-52, -52, -134, 134, -52, 23, 53, -52, 59, 59,
	-129, -128, -120, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, -112, 218, 225, -52, 9, 93, 57,
	18, 113, 57, -86, 24, 25, -87, -187, -31, -63,
	-122, 62, 65, -30, 44, -52, -38, -38, -68, 69,
	75, 70, 71, -38, -124, 100, -129, -123, -120, -62,
	-69, -72, -75, 61, 210, 65, 93, 91, 92, 77,
	-62, -62, -61, -69, -69, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -138, 257, 191, 214, 215, -139,
	-135, 59, 61, -62, 59, -36, 21, -35, -37, -187,
	57, -187, -2, -35, -35, -38, -38, -35, -77, -78,
	79, -76, -122, -128, -76, -76, -29, -187, -35, -36,
	-35, -35, -91, 154, -52, -98, -102, -76, -41, -42,
	-42, -41, -42, 43, 43, 43, 48, 43, 48, 43,
	-49, -128, -187, -55, 51, 135, 52, -186, -130, -91,
	54, -40, -52, -103, -100, 57, 231, 233, 234, 53,
	-38, -151, 108, -166, -167, -168, -123, 61, 62, -160,
	-161, -169, 138, 141, 137, -162, 132, 29, -156, 69,
	75, -152, 215, -146, 56, -146, -146, -146, -146, -150,
	189, -150, -150, -150, 56, 56, -146, -146, -146, -154,
	56, -154, -154, -155, 56, -155, -126, 54, -52, -179,
	259, -180, 59, -134, 23, -134, -116, 129, 126, 127,
	-176, 125, 212, 189, 67, 30, 15, 249, 154, 262,
	59, 155, -52, -52, -134, -111, 11, 93, 39, -38,
	-38, -129, -85, -88, -106, 19, 11, 35, 35, -35,
	69, 70, 71, 113, -186, 112, 264, -69, -62, -62,
	-62, -34, 149, 74, 264, -146, 174, 174, -187, -187,
	-35, 57, -38, -187, -187, -187, 57, 54, 22, -187,
	-80, -78, 81, -38, -187, 113, 57, 11, 57, 11,
	-35, -187, -187, -187, -187, -60, 31, 35, -2, -186,
	-186, -56, 57, 12, 83, -45, -44, 53, 54, -46,
	53, -44, 43, 43, 132, 132, 132, -92, -122, -56,
	-40, -56, -104, -105, 235, 232, 238, 59, 57, -168,
	83, 56, 29, -162, -162, 59, 59, -147, 30, 69,
	-153, 216, 62, -150, -150, -151, 31, -151, -151, -151,
	-159, 61, -159, 62, 62, 53, -122, -134, -178, -177,
	-123, -133, -182, 160, 139, 140, 143, 142, 59, 132,
	29, 138, 141, 154, 137, -182, 160, -117, -118, 134,
	22, 132, 29, 154, -134, -113, 91, 12, -128, -128,
	40, 113, -52, -39, 11, 100, -123, -36, -138, -70,
	-34, 74, -62, -62, 265, -187, -37, -138, -135, -138,
	256, 82, -38, 80, -123, -62, -62, -62, -62, -83,
	-183, 53, -98, -71, -73, -72, -186, -2, -89, -122,
	-92, -83, -102, -38, -38, -38, 56, -38, -186, -186,
	-186, -187, 57, -83, -56, 232, 236, 237, -167, -168,
	-171, -170, -122, 59, 59, -149, 53, 61, 62, 63,
	69, 239, 68, 58, -151, -151, 59, 109, 58, 57,
	58, 57, 58, 57, -52, 57, 83, -133, -122, -133,
	-122, -52, -133, -122, 61, -38, -56, -40, -187, 265,
	-62, -187, -187, -187, -186, -38, -187, 57, 19, -187,
	57, 19, -33, 254, -93, 27, -183, 57, -187, -187,
	-187, 57, 113, -187, -87, -90, -122, -90, -90, -90,
	-131, -122, -87, 58, 57, -146, -157, 212, 9, -150,
	61, -150, 62, 62, -134, -177, -168, 56, 26, -81,
	13, -62, -62, -62, -62, -62, -187, 61, -94, 28,
	29, -73, 35, -2, -186, -122, -122, 57, 58, -187,
	-187, -187, -55, -173, -172, 54, 144, 67, -170, -158,
	138, 29, 137, 239, -151, -151, 58, 58, -90, -186,
	-82, 14, 16, 93, -32, 259, -187, -187, -187, -187,
	-96, -97, 53, -122, 56, 9, -71, -2, 113, -122,
	-172, 59, -163, 83, 61, -148, 67, 29, 29, 58,
	-174, -175, 154, -38, -70, 257, 50, -187, 260, -95,
	55, -151, 140, -90, -98, -187, -122, 62, 61, -181,
	-187, 57, -122, 40, 258, 261, 34, 9, -56, -122,
	58, -179, -175, 35, 40, 31, 156, 259, -98, 157,
	260, -56, -186, 261, -62, 153, -187, -187,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 521, 0, 281, 281, 281, 281, 281, 281,
	0, 600, 583, 0, 0, 0, 0, -2, 270, 271,
	0, 273, 274, 0, 808, 808, 808, 808, 0, 36,
	37, 806, 1, 3, 529, 0, 0, 285, 288, 283,
	0, 583, 0, 0, 0, 63, 0, 0, 795, 0,
	796, 581, 581, 581, 601, 602, 605, 606, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 0, 0, 584, 0,
	579, 0, 579, 579, 579, 0, 229, 352, 609, 610,
	795, 796, 0, 0, 0, 0, 809, 809, 809, 809,
	0, 809, 258, 247, 249, 250, 251, 252, 809, 267,
	268, 257, 269, 272, 275, 0, 277, 278, 279, 280,
	28, 533, 0, 0, 521, 30, 0, 281, 286, 287,
	291, 289, 290, 282, 0, 299, 303, 0, 360, 0,
	365, 367, -2, -2, 0, 410, 411, 412, 413, 414,
	0, 0, 0, 0, 0, 0, 0, 442, 443, 444,
	445, 506, 507, 508, 509, 510, 511, 512, 513, 369,
	370, 503, 562, 0, 0, 0, 0, 0, 0, 0,
	494, 0, 0, 0, 0, 473, 473, 473, 473, 473,
	473, 473, 473, 0, 0, 0, 0, 0, 0, 310,
	312, 313, 314, 333, 0, 335, 0, 0, 44, 48,
	0, 786, 566, -2, -2, 0, 0, 607, 608, -2,
	713, -2, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 0, 80, 0, 0, 809,
	0, 70, 0, 0, 0, 0, 0, 809, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 230, 809, 809,
	809, 809, 809, 809, 809, 809, 239, 810, 811, 240,
	241, 242, 809, 809, 244, 0, 259, 0, 253, 276,
	29, 807, 23, 0, 0, 530, 0, 522, 523, 526,
	529, 28, 288, 0, 293, 292, 284, 0, 300, 0,
	0, 0, 0, 304, 0, 306, 307, 0, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 392,
	393, 394, 395, 396, 397, 398, 366, 0, 385, 0,
	-2, 0, -2, -2, -2, -2, -2, -2, 295, 28,
	0, 408, 0, 449, 0, 0, 0, 0, 0, 0,
	495, 0, 0, 0, 291, 465, 0, 466, 467, 468,
	469, 470, 471, 472, 0, 295, 0, 0, 46, 0,
	351, 0, 0, 0, 0, 0, 0, 340, 0, 0,
	343, 0, 0, 0, 0, 334, 0, 0, 354, 759,
	336, 0, 338, 339, -2, 0, 0, 0, 42, 43,
	0, 49, 786, 51, 52, 0, 0, 0, 160, 574,
	575, 576, 572, 188, 0, 143, 139, 85, 86, 87,
	132, 89, 132, 132, 132, 132, 157, 157, 157, 157,
	115, 116, 117, 118, 119, 0, 0, 102, 132, 132,
	132, 106, 122, 123, 124, 125, 126, 127, 128, 129,
	90, 91, 92, 93, 94, 95, 96, 134, 134, 134,
	136, 136, 603, 65, 0, 73, 0, 809, 0, 809,
	78, 0, 204, 0, 223, 580, 0, 809, 226, 227,
	353, 611, 612, 231, 232, 233, 234, 235, 236, 237,
	238, 243, 246, 260, 254, 255, 248, 534, 0, 0,
	0, 0, 0, 525, 527, 528, 533, 31, 291, 0,
	514, 0, 0, 0, 294, 26, 361, 362, 364, 386,
	0, 388, 390, 415, 305, 301, 0, 504, -2, -2,
	372, 401, 402, 405, 0, 406, 0, 0, 0, 0,
	-2, -2, 378, 379, 380, -2, -2, 365, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 432, 486, 132, 488, 490, 493,
	433, 484, 485, -2, 0, 0, 0, 296, 297, 407,
	0, 561, 28, 0, 0, 0, 0, 0, 501, 498,
	0, 0, 503, 0, 0, 0, 0, 474, 0, 0,
	0, 0, 0, 0, 350, 358, 563, 0, 311, 329,
	331, 0, 326, 341, 342, 344, 0, 346, 0, 348,
	349, 315, 316, 317, 0, 0, 0, 0, 337, 358,
	0, 358, 45, 567, 50, 0, 0, 55, 56, 568,
	569, 570, 0, 79, 189, 191, 194, 195, 196, 81,
	82, 0, 0, 0, 0, 0, 183, 184, 146, 144,
	0, 141, 140, 88, 0, 157, 157, 109, 110, 160,
	0, 160, 160, 160, 0, 0, 103, 104, 105, 97,
	0, 98, 99, 100, 0, 101, 0, 0, 809, 67,
	0, 71, 72, 68, 582, 69, 808, 0, 0, 595,
	205, 585, 586, 587, 588, 589, 590, 591, 592, 593,
	594, 0, 222, 809, 225, 263, 0, 0, 0, 531,
	532, 0, 524, 24, 0, 577, 578, 515, 516, 308,
	387, 389, 391, 0, 295, 0, 0, 373, -2, -2,
	365, 374, 0, 0, 0, 487, 489, 491, 368, 446,
	0, 0, 409, -2, 450, 451, 0, 0, 0, 0,
	0, 499, 0, 0, 457, 0, 0, 0, 0, 0,
	521, 475, 476, 477, 478, 32, 0, 0, -2, 0,
	0, 521, 0, 0, 0, 323, 330, 0, 0, 324,
	0, 325, 345, 347, 0, 0, 0, 0, 321, 521,
	358, 41, 53, 54, 0, 0, 60, 161, 0, 192,
	0, 0, 178, 0, 0, 181, 182, 153, 0, 145,
	84, 142, 0, 160, 160, 111, 0, 112, 113, 114,
	0, 130, 0, 0, 0, 0, 604, 66, 74, 75,
	0, 197, 808, 0, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 808, 0, 0, 808, 596,
	597, 598, 599, 0, 224, 245, 0, 0, 261, 262,
	535, 0, 25, 358, 0, 302, 505, 0, 403, 0,
	375, 0, -2, -2, 492, 447, 298, 0, 0, 0,
	0, 456, 502, 0, 504, 365, 365, 365, 365, 496,
	34, 546, 32, 536, 557, 559, 0, 28, 0, 542,
	0, 529, 564, 359, 565, 327, 0, 332, 0, 0,
	0, 335, 0, 529, 40, 57, 58, 59, 190, 193,
	0, 185, 132, 179, 180, 155, 0, 147, 148, 149,
	150, 151, 152, 133, 107, 108, 158, 159, 157, 0,
	157, 0, 137, 0, 809, 0, 0, 198, 0, 199,
	201, 202, 203, 0, 264, 265, 517, 309, 448, 404,
	-2, 452, 454, 453, 0, 500, 458, 0, 0, 461,
	0, 0, 0, 0, 548, 0, 35, 0, 560, -2,
	0, 0, 0, 47, 38, 0, 319, 0, 0, 0,
	354, 322, 39, 170, 0, 187, 162, 156, 0, 160,
	131, 160, 0, 0, 64, 76, 77, 0, 0, 519,
	0, -2, 365, 365, 365, 365, 464, 497, 33, 550,
	0, 558, 0, -2, 0, 544, 543, 0, 328, 355,
	356, 357, 318, 169, 171, 0, 176, 0, 186, 167,
	0, 164, 166, 154, 120, 121, 135, 138, 0, 0,
	27, 0, 0, 0, 0, 0, 459, 460, 462, 463,
	0, 160, 0, 553, 0, 0, 539, 28, 0, 320,
	172, 173, 0, 177, 175, 83, 0, 163, 165, 70,
	0, 218, 0, 520, 518, 0, 0, 455, 0, 549,
	0, 358, 0, 0, 547, -2, 545, 174, 168, 73,
	217, 0, 0, 480, 0, 483, 555, 0, 551, 552,
	554, 200, 219, 0, 481, 0, 0, 0, 358, 0,
	0, 556, 0, 482, 365, 0, 220, 221,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 263,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 264, 3, 265, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:325
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:330
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:331
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:335
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:359
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:377
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:400
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:404
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:410
		{
			yyVAL.insertOptions = InsertOptions{}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:414
		{
			yyVAL.insertOptions = InsertOptions{
				OnDup:      OnDup(yyDollar[2].updateExprs),
				OnConflict: yyDollar[3].onConflict,
			}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:423
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.Options = yyDollar[7].insertOptions
			yyVAL.statement = ins
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:435
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].insertOptions.OnDup))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, Options: yyDollar[8].insertOptions}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.str = InsertStr
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:451
		{
			yyVAL.str = ReplaceStr
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:457
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:463
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:476
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:481
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:485
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:490
		{
			yyVAL.partitions = nil
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:494
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:500
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:528
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:560
		{
			yyVAL.str = SessionStr
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
			yyVAL.str = GlobalStr
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:570
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:575
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:580
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:584
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:588
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:596
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:600
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:605
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:609
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:615
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:620
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:625
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:636
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:642
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:648
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:655
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:662
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:667
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:671
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:677
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:896
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:901
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:905
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:910
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:914
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:922
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:926
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:932
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:940
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:949
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:959
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:972
		{
			yyVAL.optVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:980
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:988
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:992
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1001
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1023
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1032
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1036
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1049
		{
			yyVAL.colKeyOpt = colKey
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1062
		{
			yyVAL.optVal = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1066
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1072
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1076
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1096
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1107
		{
			yyVAL.str = ""
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1117
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1121
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1125
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1139
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1159
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1164
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1172
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = yyDollar[1].str
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1208
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1212
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1216
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1220
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1233
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1243
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1248
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1253
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1257
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1276
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1286
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1292
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1296
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1308
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1316
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1321
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1333
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1339
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1343
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1387
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1391
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1395
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1399
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1403
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1411
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1421
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1465
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.str = "extended "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1481
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1485
		{
			yyVAL.str = "full "
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1491
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1499
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1505
		{
			yyVAL.showFilter = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1509
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1513
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1519
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1523
		{
			yyVAL.str = SessionStr
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1527
		{
			yyVAL.str = GlobalStr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1543
		{
			yyVAL.statement = &Begin{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.statement = &Begin{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1553
		{
			yyVAL.statement = &Commit{}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1559
		{
			yyVAL.statement = &Rollback{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[2].statement}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[3].statement, Analyze: true}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &OtherRead{}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1592
		{
			setAllowComments(yylex, true)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1596
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1602
		{
			yyVAL.bytes2 = nil
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1606
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = UnionStr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1616
		{
			yyVAL.str = UnionAllStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1620
		{
			yyVAL.str = UnionDistinctStr
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1625
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1629
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = SQLCacheStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = DistinctStr
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1647
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1651
		{
			yyVAL.str = StraightJoinHint
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1656
		{
			yyVAL.selectExprs = nil
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1666
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1670
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1684
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1688
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1693
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1701
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1708
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1713
		{
			yyVAL.tableExprs = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1727
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1741
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1745
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1751
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1755
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1761
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1765
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1788
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1792
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1796
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1800
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1808
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1812
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1814
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1818
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1820
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1823
		{
			yyVAL.empty = struct{}{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1828
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1832
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1836
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1853
		{
			yyVAL.str = JoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.str = JoinStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = StraightJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = LeftJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = LeftJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1877
		{
			yyVAL.str = RightJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.str = RightJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.str = NaturalJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1891
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1905
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1915
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1920
		{
			yyVAL.indexHints = nil
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1924
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1928
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1932
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1937
		{
			yyVAL.expr = nil
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1941
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1947
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1959
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1963
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1967
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1971
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1977
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1981
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1987
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2001
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2009
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2021
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2027
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2031
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2035
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2047
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2051
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2055
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.str = IsNullStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2065
		{
			yyVAL.str = IsNotNullStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.str = IsTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = IsNotTrueStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = IsFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = IsNotFalseStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.str = EqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = LessThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = GreaterThanStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.str = LessEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2103
		{
			yyVAL.str = GreaterEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.str = NotEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2111
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2116
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2120
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2126
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.colTuple = &ConvertExpr{Expr: NewStrVal(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2138
		{
			yyVAL.colTuple = Array(yyDollar[3].exprs)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			// this is an array literal ('{a,b,c}', etc)
			// TODO this is weird and ugly but I need those quotes to be passed through
			tmp := make([]byte, len(yyDollar[1].bytes)+2)
			tmp[0] = '\''
			tmp[len(yyDollar[1].bytes)+1] = '\''
			copy(tmp[1:], yyDollar[1].bytes)
			yyVAL.colTuple = ListArg(tmp)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			// this is a positional parameter ($1, etc)
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2165
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2175
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2187
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2191
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: StringConcat, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &FunctionArgAssignmentExpr{Argument: yyDollar[1].expr, Operator: FuncArgAssignStr, Value: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2314
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2332
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2336
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2340
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("array"), Exprs: SelectExprs{&AliasedExpr{Expr: yyDollar[2].subquery}}}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2370
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 455:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2374
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2378
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 459:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 463:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 464:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2484
		{
			yyVAL.str = ""
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2488
		{
			yyVAL.str = BooleanModeStr
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2492
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 482:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2496
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = QueryExpansionStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2506
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2510
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2516
		{
			yyVAL.convertType = &ConvertType{Type: "boolean"}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2520
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2528
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2532
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2540
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].convertType.Type + "[]"}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2544
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = nil
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2558
		{
			yyVAL.str = string("")
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2568
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2578
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = nil
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2597
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2601
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &NullVal{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2659
		{
			yyVAL.exprs = nil
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2663
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2677
		{
			yyVAL.orderBy = nil
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2681
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2691
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2697
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2702
		{
			yyVAL.str = AscScr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.str = AscScr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.str = DescScr
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2715
		{
			yyVAL.limit = nil
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2719
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2723
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2727
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2732
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2736
		{
			yyVAL.str = ForUpdateStr
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2740
		{
			yyVAL.str = ShareModeStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2753
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2766
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2770
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2774
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2785
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2793
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2798
		{
			yyVAL.updateExprs = nil
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2802
		{
			yyVAL.updateExprs = yyDollar[4].updateExprs
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2807
		{
			yyVAL.onConflict = nil
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.onConflict = &OnConflict{Target: yyDollar[2].conflictTarget, Action: yyDollar[3].conflictAction}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2816
		{
			yyVAL.conflictTarget = nil
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2820
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Columns: yyDollar[1].columns,
				Collate: yyDollar[2].str,
				Where:   NewWhere(WhereStr, yyDollar[3].expr),
			}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2828
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Constraint: yyDollar[3].colIdent,
				Columns:    Columns{},
				Collate:    "",
				Where:      nil,
			}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2843
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.conflictAction = nil
		}
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2854
		{
			yyVAL.conflictAction = &ConflictAction{
				Updates: yyDollar[4].updateExprs,
				Where:   NewWhere(WhereStr, yyDollar[5].expr),
			}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2863
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2867
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2877
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2883
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2889
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2903
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2909
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2925
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2940
		{
			yyVAL.bytes = []byte("charset")
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &Default{}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2964
		{
			yyVAL.byt = 0
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2966
		{
			yyVAL.byt = 1
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2969
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2974
		{
			yyVAL.str = ""
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2976
		{
			yyVAL.str = IgnoreStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2980
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2986
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2988
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3009
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3014
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3016
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3021
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3023
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3027
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3055
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			decNesting(yylex)
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3288
		{
			forceEOF(yylex)
		}
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3293
		{
			forceEOF(yylex)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3297
		{
			forceEOF(yylex)
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3301
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
