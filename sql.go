// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

func init() {
	yyErrorVerbose = true
}

//line sql.y:57
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
	onConflict        *OnConflict
	conflictTarget    *ConflictTarget
	conflictAction    *ConflictAction
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CONFLICT = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const KEYS = 57375
const DO = 57376
const NOTHING = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const INTERVAL = 57436
const TYPECAST = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const JSON_SUBOBJECT_OP = 57440
const JSON_UNQUOTE_SUBOBJECT_OP = 57441
const JSON_TXT_STR_EXISTS_OP = 57442
const JSON_ANY_KEYS_EXIST_OP = 57443
const JSON_ALL_KEYS_EXIST_OP = 57444
const JSON_LEFT_CONTAINS_RIGHT_OP = 57445
const JSON_RIGHT_CONTAINS_LEFT_OP = 57446
const FUNCTION_ARG_ASSIGNMENT = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const UNIQUE = 57461
const PRIMARY = 57462
const COLUMN = 57463
const CONSTRAINT = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const FOREIGN = 57467
const KEY_BLOCK_SIZE = 57468
const SHOW = 57469
const DESCRIBE = 57470
const EXPLAIN = 57471
const DATE = 57472
const ESCAPE = 57473
const REPAIR = 57474
const OPTIMIZE = 57475
const TRUNCATE = 57476
const MAXVALUE = 57477
const PARTITION = 57478
const REORGANIZE = 57479
const LESS = 57480
const THAN = 57481
const PROCEDURE = 57482
const TRIGGER = 57483
const VINDEX = 57484
const VINDEXES = 57485
const STATUS = 57486
const VARIABLES = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const MEDIUMINT = 57496
const INT = 57497
const INTEGER = 57498
const BIGINT = 57499
const INTNUM = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const ARRAY = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const DATABASES = 57541
const TABLES = 57542
const VITESS_KEYSPACES = 57543
const VITESS_SHARDS = 57544
const VITESS_TABLETS = 57545
const VSCHEMA_TABLES = 57546
const EXTENDED = 57547
const FULL = 57548
const PROCESSLIST = 57549
const NAMES = 57550
const CHARSET = 57551
const GLOBAL = 57552
const SESSION = 57553
const ISOLATION = 57554
const LEVEL = 57555
const READ = 57556
const WRITE = 57557
const ONLY = 57558
const REPEATABLE = 57559
const COMMITTED = 57560
const UNCOMMITTED = 57561
const SERIALIZABLE = 57562
const CURRENT_TIMESTAMP = 57563
const DATABASE = 57564
const CURRENT_DATE = 57565
const CURRENT_TIME = 57566
const LOCALTIME = 57567
const LOCALTIMESTAMP = 57568
const UTC_DATE = 57569
const UTC_TIME = 57570
const UTC_TIMESTAMP = 57571
const REPLACE = 57572
const CONVERT = 57573
const CAST = 57574
const SUBSTR = 57575
const SUBSTRING = 57576
const GROUP_CONCAT = 57577
const SEPARATOR = 57578
const MATCH = 57579
const AGAINST = 57580
const BOOLEAN = 57581
const LANGUAGE = 57582
const WITH = 57583
const QUERY = 57584
const EXPANSION = 57585
const UNUSED = 57586

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONFLICT",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"DO",
	"NOTHING",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"TYPECAST",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"FUNCTION_ARG_ASSIGNMENT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 37,
	161, 264,
	162, 264,
	-2, 254,
	-1, 240,
	112, 604,
	-2, 600,
	-1, 241,
	112, 605,
	-2, 601,
	-1, 311,
	82, 765,
	-2, 59,
	-1, 312,
	82, 726,
	-2, 60,
	-1, 317,
	82, 710,
	-2, 566,
	-1, 319,
	82, 747,
	-2, 568,
	-1, 591,
	55, 42,
	57, 42,
	-2, 44,
	-1, 724,
	112, 607,
	-2, 603,
	-1, 949,
	5, 29,
	-2, 405,
	-1, 974,
	5, 28,
	-2, 534,
	-1, 1186,
	5, 29,
	-2, 535,
	-1, 1230,
	5, 28,
	-2, 537,
	-1, 1298,
	5, 29,
	-2, 538,
}

const yyPrivate = 57344

const yyLast = 11172

var yyAct = [...]int16{
	241, 310, 977, 1285, 885, 662, 245, 801, 1241, 537,
	1180, 3, 1192, 819, 1099, 1127, 1100, 841, 865, 1035,
	583, 585, 1096, 802, 840, 316, 993, 837, 766, 1026,
	219, 214, 77, 774, 771, 270, 187, 760, 54, 187,
	937, 1038, 601, 790, 467, 982, 461, 726, 851, 879,
	875, 415, 271, 48, 600, 798, 473, 859, 765, 587,
	218, 572, 243, 187, 187, 77, 481, 773, 297, 187,
	307, 77, 228, 917, 552, 305, 460, 215, 216, 217,
	776, 298, 1080, 296, 940, 932, 53, 1323, 1308, 1321,
	1292, 1319, 886, 1307, 232, 1291, 48, 1091, 1178, 419,
	1250, 48, 1122, 1123, 440, 182, 178, 179, 180, 224,
	833, 834, 602, 1121, 603, 302, 1265, 499, 498, 508,
	509, 501, 502, 503, 504, 505, 506, 507, 500, 455,
	1001, 515, 58, 1000, 832, 514, 1002, 510, 511, 512,
	513, 1133, 1134, 1135, 691, 1017, 516, 858, 1138, 1136,
	1204, 692, 866, 943, 942, 2, 211, 1320, 60, 61,
	62, 63, 64, 51, 451, 452, 1318, 428, 729, 1286,
	1059, 1248, 731, 799, 1242, 442, 187, 444, 187, 661,
	176, 820, 822, 429, 187, 422, 1244, 175, 853, 176,
	447, 187, 670, 992, 991, 77, 77, 77, 77, 212,
	77, 990, 441, 443, 417, 425, 190, 77, 503, 504,
	505, 506, 507, 500, 177, 181, 515, 853, 1011, 931,
	514, 1142, 510, 511, 512, 513, 1272, 1189, 1067, 957,
	929, 516, 698, 485, 435, 77, 470, 838, 695, 912,
	480, 479, 478, 1277, 478, 1152, 980, 446, 446, 446,
	446, 1093, 446, 791, 604, 313, 1063, 979, 480, 446,
	480, 469, 1243, 821, 1046, 515, 48, 665, 1015, 514,
	1143, 510, 511, 512, 513, 475, 853, 48, 1249, 1247,
	516, 940, 1266, 536, 439, 1280, 791, 1165, 964, 1300,
	852, 1210, 525, 1046, 1044, 527, 187, 735, 1209, 1030,
	1290, 1056, 1234, 187, 187, 187, 416, 1058, 459, 77,
	1029, 733, 734, 732, 536, 77, 730, 1018, 1137, 852,
	913, 269, 535, 1044, 539, 527, 541, 542, 543, 544,
	545, 546, 547, 548, 1062, 551, 553, 553, 553, 553,
	553, 553, 553, 553, 561, 562, 563, 564, 431, 432,
	433, 855, 1295, 75, 1301, 584, 856, 421, 471, 554,
	555, 556, 557, 558, 559, 560, 1045, 1278, 767, 458,
	768, 1050, 1047, 1040, 1041, 1048, 1043, 1042, 852, 598,
	592, 1224, 1207, 850, 848, 1160, 315, 849, 1049, 174,
	479, 478, 420, 1027, 1052, 1045, 1275, 1095, 1304, 460,
	1050, 1047, 1040, 1041, 1048, 1043, 1042, 480, 1130, 1057,
	514, 1055, 510, 511, 512, 513, 953, 1049, 952, 77,
	954, 516, 1129, 1039, 1012, 187, 187, 77, 1003, 187,
	423, 424, 187, 479, 478, 888, 187, 770, 77, 77,
	77, 77, 77, 77, 77, 77, 676, 238, 1234, 1283,
	480, 295, 77, 77, 675, 666, 500, 187, 664, 515,
	659, 679, 437, 514, 430, 510, 511, 512, 513, 479,
	478, 446, 416, 77, 516, 612, 460, 187, 1254, 446,
	926, 927, 928, 77, 701, 702, 480, 1234, 460, 1253,
	446, 446, 446, 446, 446, 446, 446, 446, 1139, 313,
	703, 1234, 1235, 978, 446, 446, 697, 1201, 1200, 677,
	776, 724, 1118, 460, 1188, 460, 315, 315, 315, 315,
	1184, 315, 1149, 1148, 727, 1145, 1146, 569, 315, 727,
	727, 479, 478, 716, 718, 719, 1145, 1144, 717, 536,
	1097, 739, 740, 978, 705, 696, 947, 460, 480, 720,
	24, 778, 783, 786, 24, 738, 483, 595, 792, 722,
	479, 478, 569, 460, 776, 460, 55, 187, 611, 610,
	187, 187, 187, 187, 187, 803, 902, 480, 1151, 972,
	48, 1070, 187, 24, 973, 187, 826, 1147, 594, 187,
	979, 901, 539, 568, 187, 187, 778, 795, 77, 829,
	51, 596, 1004, 594, 51, 788, 979, 831, 947, 779,
	780, 77, 959, 1229, 827, 787, 947, 597, 956, 569,
	906, 699, 302, 302, 302, 302, 302, 947, 900, 794,
	315, 796, 797, 51, 225, 569, 606, 584, 804, 823,
	51, 807, 816, 867, 868, 869, 302, 825, 824, 1214,
	663, 978, 805, 806, 830, 808, 22, 883, 958, 860,
	1112, 1007, 187, 845, 955, 77, 880, 77, 983, 984,
	914, 187, 876, 871, 187, 77, 723, 861, 862, 863,
	864, 870, 66, 1181, 51, 897, 894, 895, 1132, 893,
	1097, 1031, 986, 872, 873, 874, 528, 529, 530, 531,
	532, 533, 534, 673, 456, 813, 877, 878, 881, 711,
	814, 811, 1315, 223, 904, 907, 812, 446, 815, 446,
	578, 579, 989, 988, 724, 810, 809, 446, 260, 259,
	262, 263, 264, 265, 229, 230, 261, 266, 1306, 1066,
	315, 1314, 924, 1294, 918, 1310, 923, 1022, 315, 899,
	919, 574, 577, 578, 579, 575, 609, 576, 580, 315,
	315, 315, 315, 315, 315, 315, 315, 1014, 727, 474,
	462, 1309, 898, 315, 315, 438, 930, 1282, 925, 704,
	933, 1281, 1226, 463, 1008, 472, 1182, 1215, 313, 574,
	577, 578, 579, 575, 707, 576, 580, 890, 672, 983,
	984, 842, 582, 474, 483, 226, 227, 315, 1225, 903,
	974, 922, 220, 1259, 221, 1217, 55, 1258, 979, 921,
	941, 476, 905, 1269, 77, 1205, 694, 187, 995, 57,
	997, 59, 593, 963, 52, 1, 887, 1034, 896, 1284,
	946, 77, 1240, 1126, 847, 775, 777, 996, 839, 414,
	65, 975, 976, 987, 1276, 846, 961, 1246, 1005, 1203,
	854, 1016, 793, 857, 1131, 1279, 1013, 784, 784, 616,
	614, 615, 613, 784, 998, 618, 617, 198, 308, 302,
	1019, 1020, 581, 605, 77, 77, 234, 77, 882, 723,
	784, 477, 818, 1021, 67, 1023, 1024, 1025, 1009, 1010,
	1054, 1028, 1053, 892, 1061, 690, 911, 454, 200, 524,
	77, 920, 999, 187, 187, 314, 1267, 1293, 1104, 315,
	700, 187, 466, 1257, 1037, 1216, 962, 549, 789, 246,
	77, 715, 315, 258, 255, 725, 1051, 446, 736, 737,
	257, 256, 1075, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 446, 706, 769, 1073, 971, 487, 244, 1074,
	236, 300, 565, 573, 571, 1076, 77, 77, 570, 803,
	1098, 1082, 1084, 724, 985, 803, 315, 1103, 315, 981,
	1083, 299, 1085, 1069, 1177, 1264, 315, 710, 26, 1120,
	1092, 56, 1108, 1106, 231, 77, 19, 77, 77, 1101,
	18, 17, 20, 21, 16, 15, 1107, 14, 30, 13,
	315, 12, 11, 10, 1125, 9, 1102, 8, 48, 1124,
	7, 842, 187, 6, 1119, 5, 4, 222, 23, 0,
	77, 0, 0, 1114, 1115, 1116, 0, 1140, 1141, 0,
	0, 0, 0, 77, 187, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	1153, 187, 1162, 247, 0, 0, 0, 1036, 0, 944,
	945, 0, 0, 1155, 0, 0, 1158, 949, 950, 951,
	0, 1163, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 966, 0, 967, 968, 969, 970, 464, 468, 0,
	0, 0, 0, 77, 0, 77, 77, 77, 187, 77,
	1072, 1183, 0, 302, 486, 77, 0, 1194, 1195, 1196,
	0, 0, 0, 0, 0, 0, 301, 0, 1191, 1197,
	0, 0, 1005, 0, 1176, 994, 0, 0, 1088, 465,
	1199, 77, 77, 77, 0, 0, 0, 0, 538, 0,
	0, 0, 315, 1206, 0, 1208, 0, 0, 550, 0,
	1213, 1212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 935, 936, 0, 185, 1202, 0, 210, 77,
	77, 0, 0, 0, 1227, 842, 0, 842, 0, 1230,
	0, 1228, 77, 446, 0, 1032, 315, 0, 315, 0,
	235, 1239, 185, 185, 0, 77, 0, 1245, 185, 0,
	1101, 0, 0, 0, 0, 0, 77, 1255, 0, 0,
	0, 315, 0, 0, 1251, 77, 1252, 1102, 1268, 0,
	1231, 0, 0, 1271, 1270, 0, 0, 0, 0, 1274,
	0, 315, 0, 0, 0, 1081, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 1256, 1288,
	0, 1296, 0, 77, 0, 1175, 803, 1297, 0, 315,
	0, 0, 1102, 0, 48, 0, 0, 77, 0, 1302,
	0, 0, 0, 196, 784, 0, 0, 1105, 994, 0,
	784, 0, 1117, 0, 0, 0, 0, 1312, 1313, 0,
	0, 77, 1316, 0, 1317, 842, 526, 0, 0, 206,
	0, 0, 0, 1311, 0, 185, 315, 185, 315, 1128,
	0, 0, 0, 185, 0, 0, 0, 445, 0, 0,
	185, 0, 1036, 842, 0, 0, 540, 0, 0, 499,
	498, 508, 509, 501, 502, 503, 504, 505, 506, 507,
	500, 1154, 0, 515, 0, 713, 714, 514, 191, 510,
	511, 512, 513, 1322, 1156, 0, 301, 0, 516, 0,
	0, 1159, 1164, 193, 0, 0, 1078, 1079, 0, 315,
	199, 195, 1167, 1168, 1169, 1170, 0, 0, 1173, 0,
	0, 0, 0, 1086, 1087, 0, 1089, 1090, 0, 0,
	0, 1185, 1186, 1187, 0, 1190, 0, 197, 0, 0,
	201, 303, 0, 0, 0, 0, 538, 0, 0, 0,
	781, 782, 0, 0, 1193, 0, 1193, 1193, 1193, 0,
	1198, 0, 0, 0, 0, 185, 315, 0, 192, 0,
	0, 0, 185, 589, 185, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 315, 315, 0, 194, 0, 202, 203,
	204, 205, 209, 0, 0, 306, 1223, 208, 207, 0,
	418, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 313, 0, 1236, 1237, 1238, 0, 0, 0, 0,
	1232, 1233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1128, 0, 1166, 0, 1260, 1261, 1262,
	1263, 0, 0, 448, 449, 450, 1193, 453, 0, 0,
	0, 0, 0, 0, 457, 0, 0, 1193, 0, 0,
	0, 0, 0, 0, 0, 0, 1273, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 728, 728, 0,
	0, 0, 0, 1289, 185, 185, 0, 0, 185, 0,
	1298, 185, 0, 915, 916, 678, 468, 0, 0, 0,
	0, 784, 0, 1303, 1299, 0, 0, 426, 0, 427,
	0, 0, 0, 0, 0, 434, 185, 0, 1305, 0,
	0, 0, 436, 0, 0, 0, 0, 0, 0, 1218,
	1219, 0, 1220, 1221, 1222, 0, 185, 0, 0, 0,
	0, 0, 315, 1326, 1327, 678, 0, 0, 0, 0,
	0, 0, 0, 301, 301, 301, 301, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 948, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 235, 235, 0, 0, 785, 785, 235, 0, 0,
	0, 785, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 235, 235, 235, 235, 0, 185, 567, 785, 185,
	185, 185, 185, 185, 0, 0, 591, 0, 0, 0,
	0, 817, 0, 0, 185, 0, 0, 0, 589, 0,
	0, 0, 0, 185, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 660, 0, 0, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 0, 680, 681, 682, 683, 684,
	685, 686, 687, 0, 0, 0, 0, 0, 0, 688,
	689, 501, 502, 503, 504, 505, 506, 507, 500, 0,
	0, 515, 0, 0, 0, 514, 728, 510, 511, 512,
	513, 185, 0, 0, 0, 0, 516, 0, 0, 538,
	185, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 24, 25, 49, 27, 28, 0,
	0, 0, 0, 0, 0, 0, 667, 668, 678, 0,
	671, 1094, 0, 674, 44, 0, 0, 0, 0, 29,
	235, 0, 0, 0, 0, 0, 1109, 1110, 0, 0,
	1111, 0, 0, 1113, 0, 0, 0, 0, 693, 0,
	38, 0, 0, 633, 51, 499, 498, 508, 509, 501,
	502, 503, 504, 505, 506, 507, 500, 0, 712, 515,
	301, 0, 0, 514, 0, 510, 511, 512, 513, 0,
	0, 0, 0, 0, 516, 0, 0, 0, 0, 0,
	0, 0, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 235, 0,
	938, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1161, 31, 32, 34, 33, 36, 0, 0, 190, 0,
	621, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 37, 45, 43, 0, 185, 46, 47, 35,
	0, 0, 1179, 0, 0, 0, 0, 0, 800, 538,
	0, 39, 40, 0, 41, 42, 0, 0, 0, 634,
	0, 0, 889, 0, 891, 0, 0, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 828, 0, 0, 0,
	647, 648, 649, 650, 651, 652, 653, 0, 654, 655,
	656, 657, 658, 635, 636, 637, 638, 619, 620, 0,
	0, 622, 762, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 639, 640, 641, 642, 643, 644, 645,
	646, 0, 1064, 1065, 0, 763, 764, 0, 0, 0,
	185, 0, 0, 1174, 460, 50, 0, 0, 0, 0,
	235, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 908, 0, 0, 909, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 678, 761, 499,
	498, 508, 509, 501, 502, 503, 504, 505, 506, 507,
	500, 0, 785, 515, 0, 0, 0, 514, 785, 510,
	511, 512, 513, 0, 0, 0, 0, 0, 516, 0,
	0, 0, 0, 0, 301, 1287, 538, 0, 0, 126,
	0, 0, 0, 772, 0, 242, 0, 0, 0, 94,
	0, 239, 0, 0, 108, 0, 0, 282, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 273, 274, 0,
	0, 185, 0, 0, 0, 0, 0, 51, 0, 0,
	240, 260, 259, 262, 263, 264, 265, 0, 87, 261,
	266, 267, 268, 185, 0, 237, 253, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 1033, 0, 0, 0, 0, 0, 250, 251,
	233, 0, 0, 0, 293, 0, 252, 0, 0, 248,
	249, 254, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 291, 589, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	272, 0, 1068, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 283,
	292, 289, 290, 287, 288, 286, 285, 284, 294, 275,
	276, 277, 278, 280, 1077, 279, 78, 0, 109, 170,
	134, 96, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 499, 498, 508, 509, 501, 502,
	503, 504, 505, 506, 507, 500, 0, 0, 515, 785,
	0, 0, 514, 0, 510, 511, 512, 513, 0, 0,
	0, 0, 0, 516, 0, 0, 0, 403, 393, 0,
	365, 405, 343, 357, 413, 358, 359, 386, 328, 373,
	126, 355, 331, 1150, 346, 323, 352, 324, 344, 367,
	94, 370, 342, 395, 376, 108, 0, 0, 411, 110,
	381, 0, 143, 119, 0, 1157, 369, 397, 371, 391,
	364, 387, 334, 380, 406, 356, 384, 407, 1211, 0,
	0, 76, 0, 843, 844, 0, 0, 0, 0, 87,
	0, 383, 402, 354, 385, 321, 382, 0, 326, 329,
	412, 400, 349, 350, 1006, 0, 0, 0, 0, 0,
	0, 368, 372, 388, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 0, 379, 0, 0, 0, 330,
	327, 0, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 348, 389, 0,
	320, 392, 398, 363, 188, 401, 361, 360, 404, 132,
	0, 0, 146, 99, 98, 107, 396, 345, 353, 90,
	351, 138, 128, 158, 378, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 322, 0, 325, 0, 144, 160, 173, 341, 399,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	337, 340, 335, 336, 374, 375, 408, 409, 410, 390,
	332, 0, 338, 339, 0, 394, 377, 78, 0, 109,
	170, 134, 96, 161, 403, 393, 0, 365, 405, 343,
	357, 413, 358, 359, 386, 328, 373, 126, 355, 331,
	0, 346, 323, 352, 324, 344, 367, 94, 370, 342,
	395, 376, 108, 0, 0, 411, 110, 381, 0, 143,
	119, 0, 0, 369, 397, 371, 391, 364, 387, 334,
	380, 406, 356, 384, 407, 0, 0, 0, 76, 0,
	843, 844, 0, 0, 0, 0, 87, 0, 383, 402,
	354, 385, 321, 382, 0, 326, 329, 412, 400, 349,
	350, 0, 0, 0, 0, 0, 0, 0, 368, 372,
	388, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	347, 0, 379, 0, 0, 0, 330, 327, 0, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 0, 348, 389, 0, 320, 392, 398,
	363, 188, 401, 361, 360, 404, 132, 0, 0, 146,
	99, 98, 107, 396, 345, 353, 90, 351, 138, 128,
	158, 378, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 322, 0,
	325, 0, 144, 160, 173, 341, 399, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 337, 340, 335,
	336, 374, 375, 408, 409, 410, 390, 332, 0, 338,
	339, 0, 394, 377, 78, 0, 109, 170, 134, 96,
	161, 403, 393, 0, 365, 405, 343, 357, 413, 358,
	359, 386, 328, 373, 126, 355, 331, 0, 346, 323,
	352, 324, 344, 367, 94, 370, 342, 395, 376, 108,
	0, 0, 411, 110, 381, 0, 143, 119, 0, 0,
	369, 397, 371, 391, 364, 387, 334, 380, 406, 356,
	384, 407, 51, 0, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 383, 402, 354, 385, 321,
	382, 0, 326, 329, 412, 400, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 368, 372, 388, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 0, 379,
	0, 0, 0, 330, 327, 0, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	0, 348, 389, 0, 320, 392, 398, 363, 188, 401,
	361, 360, 404, 132, 0, 0, 146, 99, 98, 107,
	396, 345, 353, 90, 351, 138, 128, 158, 378, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 322, 0, 325, 0, 144,
	160, 173, 341, 399, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 337, 340, 335, 336, 374, 375,
	408, 409, 410, 390, 332, 0, 338, 339, 0, 394,
	377, 78, 0, 109, 170, 134, 96, 161, 403, 393,
	0, 365, 405, 343, 357, 413, 358, 359, 386, 328,
	373, 126, 355, 331, 0, 346, 323, 352, 324, 344,
	367, 94, 370, 342, 395, 376, 108, 0, 0, 411,
	110, 381, 0, 143, 119, 0, 0, 369, 397, 371,
	391, 364, 387, 334, 380, 406, 356, 384, 407, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 383, 402, 354, 385, 321, 382, 0, 326,
	329, 412, 400, 349, 350, 0, 0, 0, 0, 0,
	0, 0, 368, 372, 388, 362, 0, 0, 0, 0,
	0, 0, 1071, 0, 347, 0, 379, 0, 0, 0,
	330, 327, 0, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 348, 389,
	0, 320, 392, 398, 363, 188, 401, 361, 360, 404,
	132, 0, 0, 146, 99, 98, 107, 396, 345, 353,
	90, 351, 138, 128, 158, 378, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 322, 0, 325, 0, 144, 160, 173, 341,
	399, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 337, 340, 335, 336, 374, 375, 408, 409, 410,
	390, 332, 0, 338, 339, 0, 394, 377, 78, 0,
	109, 170, 134, 96, 161, 403, 393, 0, 365, 405,
	343, 357, 413, 358, 359, 386, 328, 373, 126, 355,
	331, 0, 346, 323, 352, 324, 344, 367, 94, 370,
	342, 395, 376, 108, 0, 0, 411, 110, 381, 0,
	143, 119, 0, 0, 369, 397, 371, 391, 364, 387,
	334, 380, 406, 356, 384, 407, 0, 0, 0, 240,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 383,
	402, 354, 385, 321, 382, 0, 326, 329, 412, 400,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 368,
	372, 388, 362, 0, 0, 0, 0, 0, 0, 721,
	0, 347, 0, 379, 0, 0, 0, 330, 327, 0,
	366, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 333, 0, 348, 389, 0, 320, 392,
	398, 363, 188, 401, 361, 360, 404, 132, 0, 0,
	146, 99, 98, 107, 396, 345, 353, 90, 351, 138,
	128, 158, 378, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 322,
	0, 325, 0, 144, 160, 173, 341, 399, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 337, 340,
	335, 336, 374, 375, 408, 409, 410, 390, 332, 0,
	338, 339, 0, 394, 377, 78, 0, 109, 170, 134,
	96, 161, 403, 393, 0, 365, 405, 343, 357, 413,
	358, 359, 386, 328, 373, 126, 355, 331, 0, 346,
	323, 352, 324, 344, 367, 94, 370, 342, 395, 376,
	108, 0, 0, 411, 110, 381, 0, 143, 119, 0,
	0, 369, 397, 371, 391, 364, 387, 334, 380, 406,
	356, 384, 407, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 383, 402, 354, 385,
	321, 382, 0, 326, 329, 412, 400, 349, 350, 0,
	0, 0, 0, 0, 0, 0, 368, 372, 388, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 347, 0,
	379, 0, 0, 0, 330, 327, 0, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 348, 389, 0, 320, 392, 398, 363, 188,
	401, 361, 360, 404, 132, 0, 0, 146, 99, 98,
	107, 396, 345, 353, 90, 351, 138, 128, 158, 378,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 318, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 322, 0, 325, 0,
	144, 160, 173, 341, 399, 166, 167, 168, 169, 0,
	0, 0, 319, 317, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 337, 340, 335, 336, 374,
	375, 408, 409, 410, 390, 332, 0, 338, 339, 0,
	394, 377, 78, 0, 109, 170, 134, 96, 161, 403,
	393, 0, 365, 405, 343, 357, 413, 358, 359, 386,
	328, 373, 126, 355, 331, 0, 346, 323, 352, 324,
	344, 367, 94, 370, 342, 395, 376, 108, 0, 0,
	411, 110, 381, 0, 143, 119, 0, 0, 369, 397,
	371, 391, 364, 387, 334, 380, 406, 356, 384, 407,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 383, 402, 354, 385, 321, 382, 0,
	326, 329, 412, 400, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 368, 372, 388, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 0, 379, 0, 0,
	0, 330, 327, 0, 366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 348,
	389, 0, 320, 392, 398, 363, 188, 401, 361, 360,
	404, 132, 0, 0, 146, 99, 98, 107, 396, 345,
	353, 90, 351, 138, 128, 158, 378, 129, 137, 111,
	150, 133, 157, 189, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 322, 0, 325, 0, 144, 160, 173,
	341, 399, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 337, 340, 335, 336, 374, 375, 408, 409,
	410, 390, 332, 0, 338, 339, 0, 394, 377, 78,
	0, 109, 170, 134, 96, 161, 403, 393, 0, 365,
	405, 343, 357, 413, 358, 359, 386, 328, 373, 126,
	355, 331, 0, 346, 323, 352, 324, 344, 367, 94,
	370, 342, 395, 376, 108, 0, 0, 411, 110, 381,
	0, 143, 119, 0, 0, 369, 397, 371, 391, 364,
	387, 334, 380, 406, 356, 384, 407, 0, 0, 0,
	240, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	383, 402, 354, 385, 321, 382, 0, 326, 329, 412,
	400, 349, 350, 0, 0, 0, 0, 0, 0, 0,
	368, 372, 388, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 347, 0, 379, 0, 0, 0, 330, 327,
	0, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 333, 0, 348, 389, 0, 320,
	392, 398, 363, 188, 401, 361, 360, 404, 132, 0,
	0, 146, 99, 98, 107, 396, 345, 353, 90, 351,
	138, 128, 158, 378, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	322, 0, 325, 0, 144, 160, 173, 341, 399, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 337,
	340, 335, 336, 374, 375, 408, 409, 410, 390, 332,
	0, 338, 339, 0, 394, 377, 78, 0, 109, 170,
	134, 96, 161, 403, 393, 0, 365, 405, 343, 357,
	413, 358, 359, 386, 328, 373, 126, 355, 331, 0,
	346, 323, 352, 324, 344, 367, 94, 370, 342, 395,
	376, 108, 0, 0, 411, 110, 381, 0, 143, 119,
	0, 0, 369, 397, 371, 391, 364, 387, 334, 380,
	406, 356, 384, 407, 0, 0, 0, 186, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 383, 402, 354,
	385, 321, 382, 0, 326, 329, 412, 400, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 368, 372, 388,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	0, 379, 0, 0, 0, 330, 327, 0, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 348, 389, 0, 320, 392, 398, 363,
	188, 401, 361, 360, 404, 132, 0, 0, 146, 99,
	98, 107, 396, 345, 353, 90, 351, 138, 128, 158,
	378, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 322, 0, 325,
	0, 144, 160, 173, 341, 399, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 337, 340, 335, 336,
	374, 375, 408, 409, 410, 390, 332, 0, 338, 339,
	0, 394, 377, 78, 0, 109, 170, 134, 96, 161,
	403, 393, 0, 365, 405, 343, 357, 413, 358, 359,
	386, 328, 373, 126, 355, 331, 0, 346, 323, 352,
	324, 344, 367, 94, 370, 342, 395, 376, 108, 0,
	0, 411, 110, 381, 0, 143, 119, 0, 0, 369,
	397, 371, 391, 364, 387, 334, 380, 406, 356, 384,
	407, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 383, 402, 354, 385, 321, 382,
	0, 326, 329, 412, 400, 349, 350, 0, 0, 0,
	0, 0, 0, 0, 368, 372, 388, 362, 0, 0,
	0, 0, 0, 0, 0, 0, 347, 0, 379, 0,
	0, 0, 330, 327, 0, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 0,
	348, 389, 0, 320, 392, 398, 363, 188, 401, 361,
	360, 404, 132, 0, 0, 146, 99, 98, 107, 396,
	345, 353, 90, 351, 138, 128, 158, 378, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	599, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 318, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 322, 0, 325, 0, 144, 160,
	173, 341, 399, 166, 167, 168, 169, 0, 0, 0,
	319, 317, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 337, 340, 335, 336, 374, 375, 408,
	409, 410, 390, 332, 0, 338, 339, 0, 394, 377,
	78, 0, 109, 170, 134, 96, 161, 403, 393, 0,
	365, 405, 343, 357, 413, 358, 359, 386, 328, 373,
	126, 355, 331, 0, 346, 323, 352, 324, 344, 367,
	94, 370, 342, 395, 376, 108, 0, 0, 411, 110,
	381, 0, 143, 119, 0, 0, 369, 397, 371, 391,
	364, 387, 334, 380, 406, 356, 384, 407, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 383, 402, 354, 385, 321, 382, 0, 326, 329,
	412, 400, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 368, 372, 388, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 0, 379, 0, 0, 0, 330,
	327, 0, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 348, 389, 0,
	320, 392, 398, 363, 188, 401, 361, 360, 404, 132,
	0, 0, 146, 99, 98, 107, 396, 345, 353, 90,
	351, 138, 128, 158, 378, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 309, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	318, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 322, 0, 325, 0, 144, 160, 173, 341, 399,
	166, 167, 168, 169, 0, 0, 0, 319, 317, 312,
	311, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	337, 340, 335, 336, 374, 375, 408, 409, 410, 390,
	332, 0, 338, 339, 0, 394, 377, 78, 126, 109,
	170, 134, 96, 161, 242, 0, 0, 0, 94, 0,
	239, 0, 0, 108, 0, 0, 282, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 460, 240,
	260, 259, 262, 263, 264, 265, 0, 87, 261, 266,
	267, 268, 0, 0, 237, 253, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 0,
	0, 0, 0, 293, 0, 252, 0, 0, 248, 249,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 291, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 272,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 283, 292,
	289, 290, 287, 288, 286, 285, 284, 294, 275, 276,
	277, 278, 280, 0, 279, 78, 126, 109, 170, 134,
	96, 161, 242, 0, 0, 0, 94, 0, 239, 0,
	0, 108, 0, 0, 282, 110, 0, 0, 143, 119,
	0, 0, 0, 0, 273, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 240, 260, 259,
	262, 263, 264, 265, 0, 87, 261, 266, 267, 268,
	0, 0, 237, 253, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 251, 233, 0, 0,
	0, 293, 0, 252, 0, 0, 248, 249, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 291, 0, 132, 0, 0, 146, 99,
	98, 107, 0, 0, 0, 90, 0, 138, 128, 158,
	0, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 272, 0, 0,
	0, 144, 160, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 283, 292, 289, 290,
	287, 288, 286, 285, 284, 294, 275, 276, 277, 278,
	280, 0, 279, 78, 126, 109, 170, 134, 96, 161,
	242, 0, 0, 0, 94, 0, 239, 0, 0, 108,
	0, 0, 282, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 273, 274, 0, 0, 0, 0, 0, 0,
	835, 0, 51, 0, 0, 240, 260, 259, 262, 263,
	264, 265, 0, 87, 261, 266, 267, 268, 0, 0,
	237, 253, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 0, 0, 0, 0, 293,
	0, 252, 0, 0, 248, 249, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 291, 0, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 0, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 272, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 283, 292, 289, 290, 287, 288,
	286, 285, 284, 294, 275, 276, 277, 278, 280, 24,
	279, 78, 0, 109, 170, 134, 96, 161, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 242, 0, 0,
	0, 94, 0, 239, 0, 0, 108, 0, 0, 282,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 273,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 240, 260, 259, 262, 263, 264, 265, 0,
	87, 261, 266, 267, 268, 0, 0, 237, 253, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 251, 0, 0, 0, 0, 293, 0, 252, 0,
	0, 248, 249, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 291, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 272, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 283, 292, 289, 290, 287, 288, 286, 285, 284,
	294, 275, 276, 277, 278, 280, 0, 279, 78, 126,
	109, 170, 134, 96, 161, 242, 0, 0, 0, 94,
	0, 239, 0, 0, 108, 0, 0, 282, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	240, 260, 259, 262, 263, 264, 265, 0, 87, 261,
	266, 267, 268, 0, 0, 237, 253, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 251,
	0, 0, 0, 0, 293, 0, 252, 0, 0, 248,
	249, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 291, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	272, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 283,
	292, 289, 290, 287, 288, 286, 285, 284, 294, 275,
	276, 277, 278, 280, 126, 279, 78, 0, 109, 170,
	134, 96, 161, 0, 94, 0, 0, 0, 0, 108,
	0, 0, 282, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 273, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 0, 240, 260, 259, 262, 263,
	264, 265, 0, 87, 261, 266, 267, 268, 0, 0,
	0, 253, 0, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 0, 0, 0, 0, 293,
	0, 252, 0, 0, 248, 249, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 291, 0, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 1325, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 272, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 283, 292, 289, 290, 287, 288,
	286, 285, 284, 294, 275, 276, 277, 278, 280, 126,
	279, 78, 0, 109, 170, 134, 96, 161, 0, 94,
	0, 0, 0, 0, 108, 0, 0, 282, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	240, 260, 259, 262, 263, 264, 265, 0, 87, 261,
	266, 267, 268, 0, 0, 0, 253, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 251,
	0, 0, 0, 0, 293, 0, 252, 0, 0, 248,
	249, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 291, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	272, 0, 0, 1172, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 283,
	292, 289, 290, 287, 288, 286, 285, 284, 294, 275,
	276, 277, 278, 280, 0, 279, 78, 0, 109, 170,
	134, 96, 161, 126, 0, 0, 0, 0, 482, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 108, 0,
	0, 0, 110, 0, 0, 143, 119, 499, 498, 508,
	509, 501, 502, 503, 504, 505, 506, 507, 500, 0,
	0, 515, 0, 0, 76, 514, 484, 510, 511, 512,
	513, 0, 87, 0, 0, 0, 516, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 489, 0, 497,
	0, 0, 0, 0, 480, 517, 518, 519, 520, 521,
	522, 523, 0, 490, 491, 488, 499, 498, 508, 509,
	501, 502, 503, 504, 505, 506, 507, 500, 0, 0,
	515, 0, 0, 0, 514, 0, 510, 511, 512, 513,
	492, 493, 494, 495, 496, 516, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 0, 144, 160,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 1171, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	78, 0, 109, 170, 134, 96, 161, 94, 0, 0,
	0, 0, 108, 0, 0, 0, 110, 460, 0, 143,
	119, 499, 498, 508, 509, 501, 502, 503, 504, 505,
	506, 507, 500, 0, 0, 515, 0, 0, 76, 514,
	0, 510, 511, 512, 513, 0, 87, 0, 0, 0,
	516, 69, 499, 498, 508, 509, 501, 502, 503, 504,
	505, 506, 507, 500, 939, 0, 515, 0, 0, 0,
	514, 0, 510, 511, 512, 513, 0, 0, 0, 0,
	0, 516, 0, 0, 499, 498, 508, 509, 501, 502,
	503, 504, 505, 506, 507, 500, 0, 0, 515, 0,
	0, 0, 514, 0, 510, 511, 512, 513, 72, 73,
	0, 68, 0, 516, 0, 74, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 70, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 633, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 621, 0, 0, 78, 0, 109, 170, 134, 96,
	161, 126, 0, 0, 0, 0, 588, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 108, 0, 0, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	634, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 590, 0, 0, 0, 0, 0,
	87, 647, 648, 649, 650, 651, 652, 653, 0, 654,
	655, 656, 657, 658, 635, 636, 637, 638, 619, 620,
	0, 0, 622, 0, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 639, 640, 641, 642, 643, 644,
	645, 646, 508, 509, 501, 502, 503, 504, 505, 506,
	507, 500, 0, 0, 515, 0, 0, 0, 514, 0,
	510, 511, 512, 513, 0, 188, 0, 0, 0, 516,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 129, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 78, 0,
	109, 170, 134, 96, 161, 94, 0, 0, 0, 0,
	108, 0, 0, 0, 110, 0, 0, 143, 119, 0,
	499, 498, 508, 509, 501, 502, 503, 504, 505, 506,
	507, 500, 0, 51, 515, 0, 76, 0, 514, 0,
	510, 511, 512, 513, 87, 0, 0, 0, 0, 516,
	498, 508, 509, 501, 502, 503, 504, 505, 506, 507,
	500, 0, 0, 515, 0, 0, 0, 514, 0, 510,
	511, 512, 513, 0, 0, 0, 0, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 0,
	144, 160, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 0, 0, 0, 108, 0, 0, 0, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 78, 0, 109, 170,
	134, 96, 161, 94, 0, 0, 0, 0, 108, 0,
	0, 0, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 708, 0, 0,
	709, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 0, 144, 160,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	78, 0, 109, 170, 134, 96, 161, 94, 0, 608,
	0, 0, 108, 0, 0, 0, 110, 0, 0, 143,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	607, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 132, 0, 0, 146,
	99, 98, 107, 0, 0, 0, 90, 0, 138, 128,
	158, 0, 129, 137, 111, 150, 133, 157, 189, 165,
	148, 164, 79, 147, 156, 88, 140, 81, 154, 145,
	117, 103, 104, 80, 0, 136, 93, 97, 92, 125,
	151, 152, 91, 172, 84, 163, 83, 85, 162, 124,
	149, 155, 118, 115, 82, 153, 116, 114, 106, 95,
	100, 130, 113, 131, 101, 121, 120, 122, 0, 0,
	0, 0, 144, 160, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 123, 86, 102, 141, 105, 112,
	135, 171, 127, 139, 89, 159, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 0, 109, 170, 134, 96,
	161, 126, 0, 0, 0, 0, 588, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 108, 0, 0, 0,
	110, 0, 0, 143, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 590, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	132, 0, 0, 146, 99, 98, 107, 0, 0, 0,
	90, 0, 138, 128, 158, 0, 586, 137, 111, 150,
	133, 157, 189, 165, 148, 164, 79, 147, 156, 88,
	140, 81, 154, 145, 117, 103, 104, 80, 0, 136,
	93, 97, 92, 125, 151, 152, 91, 172, 84, 163,
	83, 85, 162, 124, 149, 155, 118, 115, 82, 153,
	116, 114, 106, 95, 100, 130, 113, 131, 101, 121,
	120, 122, 0, 0, 0, 0, 144, 160, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 123, 86,
	102, 141, 105, 112, 135, 171, 127, 139, 89, 159,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 78, 0,
	109, 170, 134, 96, 161, 94, 0, 0, 0, 0,
	108, 0, 0, 0, 110, 0, 0, 143, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 132, 0, 0, 146, 99, 98,
	107, 0, 0, 0, 90, 0, 138, 128, 158, 0,
	129, 137, 111, 150, 133, 157, 189, 165, 148, 164,
	79, 147, 156, 88, 140, 81, 154, 145, 117, 103,
	104, 80, 0, 136, 93, 97, 92, 125, 151, 152,
	91, 172, 84, 163, 83, 85, 162, 124, 149, 155,
	118, 115, 82, 153, 116, 114, 106, 95, 100, 130,
	113, 131, 101, 121, 120, 122, 0, 0, 0, 0,
	144, 160, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 123, 86, 102, 141, 105, 112, 135, 171,
	127, 139, 89, 159, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 78, 0, 109, 170, 134, 96, 161, 94,
	0, 0, 0, 0, 108, 0, 0, 0, 110, 0,
	0, 143, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	186, 0, 590, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 132, 0,
	0, 146, 99, 98, 107, 0, 0, 0, 90, 0,
	138, 128, 158, 0, 129, 137, 111, 150, 133, 157,
	189, 165, 148, 164, 79, 147, 156, 88, 140, 81,
	154, 145, 117, 103, 104, 80, 0, 136, 93, 97,
	92, 125, 151, 152, 91, 172, 84, 163, 83, 85,
	162, 124, 149, 155, 118, 115, 82, 153, 116, 114,
	106, 95, 100, 130, 113, 131, 101, 121, 120, 122,
	0, 0, 0, 0, 144, 160, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 123, 86, 102, 141,
	105, 112, 135, 171, 127, 139, 89, 159, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 78, 0, 109, 170,
	134, 96, 161, 94, 0, 0, 0, 0, 108, 0,
	0, 0, 110, 0, 0, 143, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 484, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 132, 0, 0, 146, 99, 98, 107, 0,
	0, 0, 90, 0, 138, 128, 158, 0, 129, 137,
	111, 150, 133, 157, 189, 165, 148, 164, 79, 147,
	156, 88, 140, 81, 154, 145, 117, 103, 104, 80,
	0, 136, 93, 97, 92, 125, 151, 152, 91, 172,
	84, 163, 83, 85, 162, 124, 149, 155, 118, 115,
	82, 153, 116, 114, 106, 95, 100, 130, 113, 131,
	101, 121, 120, 122, 0, 0, 0, 0, 144, 160,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	123, 86, 102, 141, 105, 112, 135, 171, 127, 139,
	89, 159, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	78, 0, 109, 170, 134, 96, 161, 566, 94, 0,
	0, 0, 0, 108, 0, 0, 0, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 78, 0, 109, 170, 134,
	96, 161, 94, 0, 0, 0, 0, 108, 0, 0,
	0, 110, 0, 0, 143, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 132, 0, 0, 146, 99, 98, 107, 0, 0,
	0, 90, 0, 138, 128, 158, 0, 129, 137, 111,
	150, 133, 157, 189, 165, 148, 164, 79, 147, 156,
	88, 140, 81, 154, 145, 117, 103, 104, 80, 0,
	136, 93, 97, 92, 125, 151, 152, 91, 172, 84,
	163, 83, 85, 162, 124, 149, 155, 118, 115, 82,
	153, 116, 114, 106, 95, 100, 130, 113, 131, 101,
	121, 120, 122, 0, 0, 0, 0, 144, 160, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 123,
	86, 102, 141, 105, 112, 135, 171, 127, 139, 89,
	159, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 78,
	0, 109, 170, 134, 96, 161, 94, 0, 0, 0,
	0, 108, 0, 0, 0, 110, 0, 0, 143, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	188, 0, 0, 0, 0, 132, 0, 0, 146, 99,
	98, 107, 0, 0, 0, 90, 0, 138, 128, 158,
	0, 129, 137, 111, 150, 133, 157, 189, 165, 148,
	164, 79, 147, 156, 88, 140, 81, 154, 145, 117,
	103, 104, 80, 0, 136, 93, 97, 92, 125, 151,
	152, 91, 172, 84, 163, 83, 85, 162, 124, 149,
	155, 118, 115, 82, 153, 116, 114, 106, 95, 100,
	130, 113, 131, 101, 121, 120, 122, 0, 0, 0,
	0, 144, 160, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 123, 86, 102, 141, 105, 112, 135,
	171, 127, 139, 89, 159, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 78, 0, 109, 170, 134, 96, 161,
	94, 0, 0, 0, 0, 108, 0, 0, 0, 110,
	0, 0, 143, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 132,
	0, 0, 146, 99, 98, 107, 0, 0, 0, 90,
	0, 138, 128, 158, 0, 129, 137, 111, 150, 133,
	157, 189, 165, 148, 164, 79, 147, 156, 88, 140,
	81, 154, 145, 117, 103, 104, 80, 0, 136, 93,
	97, 92, 125, 151, 152, 91, 172, 84, 163, 83,
	85, 162, 124, 149, 155, 118, 115, 82, 153, 116,
	114, 106, 95, 100, 130, 113, 131, 101, 121, 120,
	122, 0, 0, 0, 0, 144, 160, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 123, 86, 102,
	141, 105, 112, 135, 171, 127, 139, 89, 159, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 78, 0, 109,
	170, 134, 96, 161, 94, 0, 0, 0, 0, 108,
	0, 0, 0, 110, 0, 0, 143, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 240, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 132, 0, 0, 146, 99, 98, 107,
	0, 0, 0, 90, 0, 138, 128, 158, 0, 129,
	137, 111, 150, 133, 157, 189, 165, 148, 164, 79,
	147, 156, 88, 140, 81, 154, 145, 117, 103, 104,
	80, 0, 136, 93, 97, 92, 125, 151, 152, 91,
	172, 84, 163, 83, 85, 162, 124, 149, 155, 118,
	115, 82, 153, 116, 114, 106, 95, 100, 130, 113,
	131, 101, 121, 120, 122, 0, 0, 0, 0, 144,
	160, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 123, 86, 102, 141, 105, 112, 135, 171, 127,
	139, 89, 159, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 78, 0, 109, 170, 134, 96, 161, 94, 0,
	0, 0, 0, 108, 0, 0, 0, 110, 0, 0,
	143, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 132, 0, 0,
	146, 99, 98, 107, 0, 0, 0, 90, 0, 138,
	128, 158, 0, 129, 137, 111, 150, 133, 157, 189,
	165, 148, 164, 79, 147, 156, 88, 140, 81, 154,
	145, 117, 103, 104, 80, 0, 136, 93, 97, 92,
	125, 151, 152, 91, 172, 84, 163, 83, 85, 162,
	124, 149, 155, 118, 115, 82, 153, 116, 114, 106,
	95, 100, 130, 113, 131, 101, 121, 120, 122, 0,
	0, 0, 0, 144, 160, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 123, 86, 102, 141, 105,
	112, 135, 171, 127, 139, 89, 159, 142, 0, 0,
	0, 0, 24, 25, 49, 27, 28, 0, 0, 0,
	24, 25, 49, 27, 28, 78, 0, 109, 170, 134,
	96, 161, 44, 0, 0, 0, 0, 29, 0, 0,
	44, 0, 0, 0, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 51, 0, 0, 0, 38, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	32, 34, 33, 213, 0, 0, 0, 31, 32, 34,
	33, 36, 0, 0, 0, 0, 0, 0, 0, 0,
	37, 45, 43, 0, 0, 46, 47, 35, 37, 45,
	43, 0, 0, 46, 47, 35, 0, 0, 0, 39,
	40, 0, 41, 42, 0, 0, 0, 39, 40, 0,
	41, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 50,
}

var yyPact = [...]int16{
	10924, -1000, -176, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 801, 824, -1000, -1000, -1000, -1000, -1000, -1000,
	626, 7149, 55, 84, -24, 9978, 76, 1260, 10680, -1000,
	-9, -1000, -1000, 10916, -1000, -1000, -1000, -1000, 544, -1000,
	-1000, -1000, -1000, -1000, 795, 798, 628, 784, 692, -1000,
	5478, 46, 8807, 9744, 5002, -1000, 413, 73, 10680, -148,
	10212, 50, 50, 50, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 75, 10680, -1000, 10680, 48, 405,
	48, 48, 48, 10680, -1000, 122, -1000, -1000, -1000, -1000,
	10680, 403, 744, 45, 2946, 2946, 2946, 2946, 3, 2946,
	-94, 650, -1000, -1000, -1000, -1000, 2946, -1000, -1000, -1000,
	-1000, -1000, -1000, 1828, -1000, -1000, -1000, -1000, 418, 751,
	6201, 6201, 801, -1000, 544, -1000, -1000, -1000, 747, -1000,
	-1000, 209, 810, -1000, 6915, 121, -1000, 6201, 6923, 584,
	-1000, -1000, 584, -1000, -1000, -1000, -1000, -1000, 6671, 6671,
	6671, 6671, 6671, 6671, 6671, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 584,
	-1000, 5963, 584, 584, 584, 584, 584, 584, 584, 584,
	584, 6201, 584, 584, 584, 584, 584, 584, 584, 584,
	584, 584, 584, 584, 584, 9510, 562, 707, -1000, -1000,
	-1000, 779, 7861, 8573, 10680, 546, -1000, 560, 4745, -117,
	-1000, -1000, -1000, 172, 8329, -1000, -1000, -1000, 725, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 511, -1000, 7293, 401, 2946, 47,
	595, 399, 193, 396, 10680, 10680, 2946, 59, 10680, 774,
	649, 10680, 395, 387, -1000, 4488, -1000, 2946, 2946, 2946,
	2946, 2946, 2946, 2946, 2946, -1000, -1000, -1000, -1000, -1000,
	-1000, 2946, 2946, -1000, -73, -1000, 10680, -1000, -1000, -1000,
	-1000, -1000, 817, 146, 488, 120, 564, -1000, 459, 795,
	418, 692, 8095, 664, -1000, -1000, 10680, -1000, 6201, 6201,
	464, -1000, 9275, -1000, -1000, 3460, 151, 6671, 107, 221,
	6671, 6671, 668, 107, 107, 6671, 6671, 6671, 6671, 6671,
	6671, 6671, 6671, 6671, 6671, 6671, 6671, 6671, 6671, 6671,
	6671, 6671, 6671, 6671, 1852, 309, 6671, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 378, -1000, 544, 158, 158,
	158, 158, 158, 158, 299, 2131, 418, 507, 169, 5963,
	-1000, 5478, 5478, 6201, 6201, 10446, 10446, 5478, 781, 175,
	169, 10446, -1000, 418, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5478, 5478, 5478, 5478, 20, 10680, -1000, 10446, 8807,
	8807, 8807, 8807, 8807, -1000, 682, 681, -1000, 667, 661,
	674, 10680, -1000, 505, 7861, 129, 584, -1000, 9041, -1000,
	-1000, 20, 531, 8807, 10680, -1000, -1000, 3717, 560, -117,
	550, -1000, -96, -122, 5716, 130, -1000, -1000, -1000, -1000,
	2689, 247, 282, -67, -1000, -1000, -1000, 603, -1000, 603,
	603, 603, 603, -36, -36, -36, -36, -1000, -1000, -1000,
	-1000, -1000, 625, 617, -1000, 603, 603, 603, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 616, 616, 616, 610, 610, 602,
	-1000, 10680, -166, 376, 2946, 773, 2946, -1000, 561, -1000,
	10680, -1000, -1000, 10680, 2946, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	228, -1000, -1000, -1000, -1000, 630, 6201, 6201, 4231, 6201,
	-1000, -1000, -1000, 751, -1000, 781, 800, -1000, 710, 706,
	5478, -1000, -1000, 151, 171, -1000, -1000, 411, -1000, -1000,
	-1000, -1000, 118, 584, -1000, 7577, -1000, -1000, -1000, 108,
	-178, -1000, 107, 6671, 6671, 6671, 1792, 7577, -1000, -1000,
	-1000, 7577, 7577, 7161, 7407, 7606, 158, 109, 109, 352,
	352, 352, 352, 352, 1694, 1694, 7577, 7577, 7577, 7577,
	-179, -1000, 603, -19, -20, -1000, -1000, -1000, -1000, 7577,
	418, 418, 5478, 559, -1000, -1000, 6201, -1000, 418, 489,
	489, 361, 397, 607, -1000, 117, 601, 489, 5478, 208,
	-1000, 6201, 418, -1000, 489, 418, 489, 489, 548, 584,
	-1000, 594, -1000, 164, 707, 614, 638, 745, -1000, -1000,
	-1000, -1000, 679, -1000, 678, -1000, -1000, -1000, -1000, -1000,
	70, 63, 62, 10212, -1000, 806, 8807, 578, -1000, -1000,
	550, -117, -101, -1000, -1000, -1000, 169, -1000, 369, 545,
	2432, -1000, -1000, -1000, -1000, -1000, -1000, 605, 755, 188,
	159, 365, -1000, -1000, 737, -1000, 199, -70, -1000, -1000,
	255, -36, -36, -1000, -1000, 130, 716, 130, 130, 130,
	332, 332, -1000, -1000, -1000, -1000, 248, -1000, -1000, -1000,
	237, -1000, 637, 10212, 2946, -1000, 3974, -1000, -1000, -1000,
	-1000, -1000, -1000, 264, 235, 278, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17, -1000, 2946,
	-1000, 244, 10680, 10680, 698, 169, 169, 116, -1000, -1000,
	10680, -1000, -1000, -1000, -1000, 570, -1000, -1000, -1000, 3203,
	5478, 1852, 6201, -1000, 1792, 7577, 2311, -1000, 6671, 6671,
	-182, -1000, -1000, -1000, -1000, -1000, 489, 5478, 169, -1000,
	-1000, -1000, 1852, 309, 1852, 6671, 6671, 4231, 6671, 6671,
	-158, 551, 170, -1000, 6201, 318, -1000, -1000, -1000, -1000,
	-1000, 636, 10446, 584, -1000, 7627, 10212, 801, 10446, 6201,
	6201, -1000, -1000, 6201, 604, -1000, 6201, -1000, -1000, -1000,
	584, 584, 584, 455, -1000, 801, 578, -1000, -1000, -1000,
	-118, -133, -1000, -1000, 2689, -1000, 2689, 10212, -1000, 363,
	349, -1000, -1000, 634, 80, -1000, -1000, -1000, 440, 130,
	130, -1000, 162, -1000, -1000, -1000, 479, -1000, 468, 530,
	465, 10680, -1000, -1000, 521, -1000, 163, -1000, -1000, 10212,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10212, 10680, -1000, -1000, -1000, -1000, -1000, 10212,
	-1000, -1000, 324, 6201, -1000, -1000, -1000, 3974, -1000, 806,
	8807, -1000, -1000, 418, -179, 23, -1000, 6671, 7577, 7577,
	-1000, -1000, -1000, 18, 418, 18, 7098, 6864, -1000, 2016,
	1256, 584, -155, -1000, 169, 6201, 629, 758, 486, 463,
	-1000, -1000, 5240, 418, 457, 115, 455, 795, -1000, 169,
	169, 169, 10212, 169, 10212, 10212, 10212, 7393, 10212, 795,
	-1000, -1000, -1000, -1000, 2432, -1000, 450, -1000, 603, -1000,
	-1000, -61, 816, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -36, 321, -36, 236, -1000, 229,
	2946, 3974, 2689, -1000, 593, -1000, -1000, -1000, -1000, 760,
	-1000, 169, 802, 470, -1000, -1000, 7577, -1000, -1000, -1000,
	-1000, 6671, 6671, -1000, 6671, 6671, 6671, 418, 320, 169,
	-1000, 788, 753, 629, 584, -1000, -1000, 577, 10212, 10212,
	-1000, -1000, 444, -1000, 430, 430, 430, 129, -1000, -1000,
	119, 10212, -1000, 142, -1000, -138, 130, -1000, 130, 431,
	420, -1000, -1000, -1000, 10212, 584, 803, 797, 7129, 7129,
	7129, 7129, 24, -1000, -1000, 10212, 814, -1000, -1000, 584,
	-1000, 544, 114, -1000, 10212, -1000, -1000, -1000, -1000, -1000,
	119, -1000, 337, 161, 306, -1000, 218, 752, -1000, 748,
	-1000, -1000, -1000, -1000, -1000, 391, 16, -1000, 6201, 6201,
	-1000, -1000, -1000, -1000, 418, 44, -169, 709, 245, 10446,
	463, 418, 10212, -1000, -1000, -1000, 227, -1000, -1000, -1000,
	293, -1000, -1000, 595, 341, -1000, 10212, 169, 453, -1000,
	697, -164, -172, -1000, 736, 130, -1000, 446, -1000, -1000,
	-1000, -1000, -166, -1000, 16, 705, -1000, 671, -1000, -1000,
	3717, 806, -1000, -1000, 11, -167, -1000, -1000, 1, -170,
	584, -173, 6436, -1000, 7129, 418, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 155, 11, 656, 1038, 1037, 1036, 1035, 1033, 1030,
	1027, 1025, 1023, 1022, 1021, 1019, 1018, 1017, 1015, 1014,
	1013, 1012, 1011, 1010, 1006, 132, 1004, 1001, 998, 56,
	997, 72, 995, 994, 40, 67, 34, 33, 886, 993,
	20, 68, 81, 991, 45, 989, 984, 75, 978, 61,
	974, 973, 1421, 972, 971, 13, 2, 970, 968, 967,
	966, 62, 447, 963, 941, 940, 934, 933, 931, 47,
	9, 14, 35, 16, 929, 1073, 6, 928, 43, 927,
	926, 925, 923, 38, 922, 44, 920, 30, 46, 918,
	12, 55, 26, 22, 10, 917, 916, 7, 70, 54,
	915, 23, 1, 42, 912, 911, 389, 909, 908, 907,
	906, 905, 904, 167, 357, 903, 902, 900, 894, 25,
	0, 321, 190, 66, 891, 888, 883, 1149, 73, 59,
	21, 882, 31, 1337, 28, 878, 877, 37, 58, 876,
	875, 872, 871, 870, 869, 57, 866, 865, 864, 18,
	27, 863, 861, 50, 49, 860, 859, 857, 29, 51,
	855, 48, 854, 850, 849, 848, 24, 17, 844, 15,
	843, 8, 842, 839, 3, 838, 19, 837, 4, 836,
	5, 41, 835, 834, 52, 308, 832, 831, 74,
}

var yyR1 = [...]uint8{
	0, 182, 183, 183, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 28, 28, 8, 9, 9, 9,
	186, 186, 47, 47, 91, 91, 10, 10, 10, 10,
	99, 99, 103, 103, 103, 104, 104, 104, 104, 135,
	135, 11, 11, 11, 11, 11, 11, 11, 180, 180,
	179, 178, 178, 177, 177, 176, 16, 163, 164, 164,
	164, 159, 138, 138, 138, 138, 141, 141, 139, 139,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	142, 142, 142, 142, 142, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	144, 144, 144, 144, 144, 144, 144, 144, 158, 158,
	145, 145, 153, 153, 154, 154, 154, 151, 151, 152,
	152, 155, 155, 155, 146, 146, 146, 146, 146, 146,
	146, 148, 148, 156, 156, 149, 149, 149, 150, 150,
	157, 157, 157, 157, 157, 147, 147, 160, 160, 172,
	172, 171, 171, 171, 162, 162, 168, 168, 168, 168,
	168, 161, 161, 170, 170, 169, 165, 165, 165, 166,
	166, 166, 167, 167, 167, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 175, 173, 173, 174, 174,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 111, 111, 108, 108, 109, 109, 110, 110,
	110, 112, 112, 112, 136, 136, 136, 19, 19, 22,
	22, 23, 24, 21, 21, 20, 20, 20, 20, 187,
	25, 26, 26, 27, 27, 27, 31, 31, 31, 29,
	29, 30, 30, 36, 36, 35, 35, 37, 37, 37,
	37, 124, 124, 124, 123, 123, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 54, 54, 90, 90, 92,
	92, 43, 43, 43, 43, 44, 44, 45, 45, 46,
	46, 131, 131, 130, 130, 130, 129, 129, 48, 48,
	48, 50, 49, 49, 49, 49, 51, 51, 53, 53,
	52, 52, 55, 55, 55, 55, 56, 56, 38, 38,
	38, 38, 38, 38, 38, 107, 107, 58, 58, 57,
	57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 68, 68, 68, 68, 68, 68,
	59, 59, 59, 59, 59, 59, 59, 34, 34, 69,
	69, 69, 69, 69, 69, 75, 70, 70, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 66, 66, 66, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	188, 188, 67, 67, 67, 67, 32, 32, 32, 32,
	32, 134, 134, 137, 137, 137, 137, 137, 137, 137,
	137, 79, 79, 33, 33, 77, 77, 78, 80, 80,
	76, 76, 76, 61, 61, 61, 61, 61, 61, 61,
	61, 63, 63, 63, 81, 81, 82, 82, 83, 83,
	84, 84, 85, 86, 86, 86, 87, 87, 87, 87,
	88, 88, 88, 60, 60, 60, 60, 60, 60, 89,
	89, 89, 89, 93, 93, 94, 94, 96, 96, 96,
	95, 95, 71, 71, 73, 73, 72, 74, 97, 97,
	101, 98, 98, 102, 102, 102, 100, 100, 100, 126,
	126, 126, 105, 105, 113, 113, 114, 114, 106, 106,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	116, 116, 116, 117, 117, 118, 118, 118, 125, 125,
	121, 121, 122, 122, 127, 127, 128, 128, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	184, 185, 132, 133, 133, 133,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 8, 9, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 8, 4, 6, 5, 5, 5, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 1, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 2, 2, 2, 2,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 3, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 3, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 3, 3, 3, 3,
	3, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 3, 4, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 4, 5, 6, 2, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 1, 2, 1, 2, 1, 2, 3,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 0, 4, 0, 4, 2,
	2, 3, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -182, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -22, -23, -24,
	-21, -20, -3, -4, 6, 7, -28, 9, 10, 31,
	-16, 123, 124, 126, 125, 151, 127, 144, 52, 163,
	164, 166, 167, 146, 26, 145, 149, 150, -184, 8,
	247, 56, -183, 262, -83, 15, -27, 5, -25, -187,
	-25, -25, -25, -25, -25, -163, 56, -118, 132, 72,
	159, 239, 129, 130, 136, -121, 59, -120, 255, 163,
	174, 168, 195, 187, 185, 188, 226, 67, 166, 235,
	147, 183, 179, 177, 28, 200, 260, 178, 142, 141,
	201, 205, 227, 172, 173, 229, 199, 143, 33, 257,
	37, 155, 230, 203, 198, 194, 197, 171, 193, 41,
	207, 206, 208, 225, 190, 180, 18, 233, 150, 153,
	202, 204, 137, 157, 259, 231, 176, 154, 149, 234,
	167, 228, 237, 40, 213, 170, 140, 164, 161, 191,
	156, 181, 182, 196, 169, 192, 165, 158, 151, 236,
	214, 261, 189, 186, 162, 160, 218, 219, 220, 221,
	258, 232, 184, 215, -106, 132, 134, 130, 130, 131,
	132, 239, 129, 130, -52, -127, 59, -120, 132, 159,
	130, 108, 188, 123, 216, 131, 33, 157, -136, 130,
	-108, 160, 218, 219, 220, 221, 59, 228, 227, 222,
	-127, 165, -1, 127, -132, -132, -132, -132, -2, -87,
	17, 16, -5, -3, -184, 6, 21, 22, -31, 42,
	43, -26, -37, 99, -38, -127, -57, 74, -62, 30,
	59, -120, 24, -61, -58, -76, -74, -75, 108, 109,
	97, 98, 105, 75, 110, -66, -64, -65, -67, 61,
	60, 68, 62, 63, 64, 65, 69, 70, 71, -121,
	-72, -184, 209, 46, 47, 248, 249, 250, 251, 254,
	252, 77, 36, 238, 246, 245, 244, 242, 243, 240,
	241, 135, 239, 103, 247, -106, -40, -41, -42, -43,
	-54, -75, -184, -52, 11, -47, -52, -98, -135, 165,
	-102, 228, 227, -122, -100, -121, -119, 226, 188, 225,
	128, 73, 209, 23, 25, 211, 76, 108, 16, 77,
	107, 20, 248, 123, 50, 240, 241, 238, 250, 251,
	239, 216, 30, 10, 26, 145, 22, 101, 125, 80,
	81, 148, 24, 146, 71, 19, 53, 11, 13, 14,
	135, 134, 92, 131, 48, 8, 110, 27, 89, 44,
	29, 46, 90, 17, 242, 243, 32, 254, 152, 103,
	51, 38, 74, 69, 54, 72, 15, 49, 91, 126,
	247, 47, 129, 6, 253, 31, 144, 45, 130, 217,
	79, 133, 70, 5, 136, 9, 52, 55, 244, 245,
	246, 36, 78, 12, -164, -159, 59, 131, -52, 247,
	-121, -114, 135, -114, -114, 130, -52, -52, -113, 135,
	59, -113, -113, -113, -52, 112, -52, 59, 31, 239,
	59, 157, 130, 158, 132, -133, -184, -122, -133, -133,
	-133, 161, 162, -133, -109, 223, 54, -133, -1, -185,
	58, -88, 19, 32, -38, -127, -84, -85, -38, -83,
	-2, -25, 38, -29, 22, 66, 11, -124, 73, 72,
	89, -123, 23, -121, 61, 112, -38, -59, 92, 74,
	90, 91, 117, 118, 119, 120, 121, 76, 94, 93,
	104, 97, 98, 99, 100, 101, 102, 103, 95, 96,
	113, 114, 115, 116, 111, 107, 122, 82, 83, 84,
	85, 86, 87, 88, -107, -184, -75, -184, -62, -62,
	-62, -62, -62, -62, -62, -184, -2, -70, -38, -184,
	-75, -184, -184, -184, -184, -184, -184, -184, -184, -79,
	-38, -184, -188, -184, -188, -188, -188, -188, -188, -188,
	-188, -184, -184, -184, -184, -53, 27, -52, 31, 57,
	-48, -50, -49, -51, 44, 48, 50, 45, 46, 47,
	51, -131, 23, -40, -184, -130, 153, -129, 23, -127,
	61, -52, -47, -186, 57, 11, 55, 57, -98, 165,
	-99, -103, 229, 231, 82, -126, -121, 61, 30, 31,
	58, 57, -138, -141, -143, -142, -144, -139, -140, 185,
	186, 108, 189, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 31, 147, 181, 182, 183, 184, 201,
	202, 203, 204, 205, 206, 207, 208, 168, 169, 170,
	171, 172, 173, 174, 176, 177, 178, 179, 180, 59,
	-133, 132, -180, 55, 59, 74, 59, -52, -52, -133,
	133, -52, 24, 54, -52, 59, 59, -128, -127, -119,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-111, 217, 224, -52, 9, 92, 57, 18, 112, 57,
	-86, 25, 26, -87, -185, -31, -63, -121, 62, 65,
	-30, 45, -52, -38, -38, -68, 69, 74, 70, 71,
	-123, 99, -128, -122, -119, -62, -69, -72, -75, 61,
	209, 65, 92, 90, 91, 76, -62, -62, -61, -69,
	-69, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-137, 256, 190, 213, 214, -138, -134, 59, 61, -62,
	59, -36, 22, -35, -37, -185, 57, -185, -2, -35,
	-35, -38, -38, -76, -121, -127, -76, -35, -29, -77,
	-78, 78, -76, -185, -35, -36, -35, -35, -91, 153,
	-52, -97, -101, -76, -41, -42, -42, -41, -42, 44,
	44, 44, 49, 44, 49, 44, -49, -127, -185, -55,
	52, 134, 53, -184, -129, -91, 55, -40, -52, -102,
	-99, 57, 230, 232, 233, 54, -38, -150, 107, -165,
	-166, -167, -122, 61, 62, -159, -160, -168, 137, 140,
	136, -161, 131, 29, -155, 69, 74, -151, 214, -145,
	56, -145, -145, -145, -145, -149, 188, -149, -149, -149,
	56, 56, -145, -145, -145, -153, 56, -153, -153, -154,
	56, -154, -125, 55, -52, -178, 258, -179, 59, -133,
	24, -133, -115, 128, 125, 126, -175, 124, 211, 188,
	67, 30, 15, 248, 153, 261, 59, 154, -52, -52,
	-133, -110, 11, 92, 40, -38, -38, -128, -85, -88,
	-105, 19, 11, 36, 36, -35, 69, 70, 71, 112,
	-184, 111, 263, -69, -62, -62, -62, -34, 148, 73,
	263, -145, 173, 173, -185, -185, -35, 57, -38, -185,
	-185, -185, 57, 55, 23, 57, 11, 112, 57, 11,
	-185, -35, -80, -78, 80, -38, -185, -185, -185, -185,
	-185, -60, 31, 36, -2, -184, -184, -56, 57, 12,
	82, -45, -44, 54, 55, -46, 54, -44, 44, 44,
	131, 131, 131, -92, -121, -56, -40, -56, -103, -104,
	234, 231, 237, 59, 57, -167, 82, 56, 29, -161,
	-161, 59, 59, -146, 30, 69, -152, 215, 62, -149,
	-149, -150, 31, -150, -150, -150, -158, 61, -158, 62,
	62, 54, -121, -133, -177, -176, -122, -132, -181, 159,
	138, 139, 142, 141, 59, 131, 29, 137, 140, 153,
	136, -181, 159, -116, -117, 133, 23, 131, 29, 153,
	-133, -112, 90, 12, -127, -127, 41, 112, -52, -39,
	11, 99, -122, -36, -137, -70, -34, 73, -62, -62,
	264, -185, -37, -137, -134, -137, -62, -62, -122, -62,
	-62, 255, -83, 81, -38, 79, -93, 54, -97, -71,
	-73, -72, -184, -2, -89, -121, -92, -83, -101, -38,
	-38, -38, 56, -38, -184, -184, -184, -185, 57, -83,
	-56, 231, 235, 236, -166, -167, -170, -169, -121, 59,
	59, -148, 54, 61, 62, 63, 69, 238, 68, 58,
	-150, -150, 59, 108, 58, 57, 58, 57, 58, 57,
	-52, 57, 82, -132, -121, -132, -121, -52, -132, -121,
	61, -38, -56, -40, -185, 264, -62, -185, -185, -185,
	-185, 57, 19, -185, 57, 19, -184, -33, 253, -38,
	-94, 54, 28, -93, 57, -185, -185, -185, 57, 112,
	-185, -87, -90, -121, -90, -90, -90, -130, -121, -87,
	58, 57, -145, -156, 211, 9, -149, 61, -149, 62,
	62, -133, -176, -167, 56, 27, -81, 13, -62, -62,
	-62, -62, -62, -185, 61, 20, 29, -94, -73, 36,
	-2, -184, -121, -121, 57, 58, -185, -185, -185, -55,
	-172, -171, 55, 143, 67, -169, -157, 137, 29, 136,
	238, -150, -150, 58, 58, -90, -184, -82, 14, 16,
	-185, -185, -185, -185, -32, 92, 258, -96, -90, 9,
	-71, -2, 112, -121, -171, 59, -162, 82, 61, -147,
	67, 29, 29, 58, -173, -174, 153, -38, -70, -185,
	256, 51, 259, -95, 34, 107, -56, -97, -185, -121,
	62, 61, -180, -185, 57, -121, 41, 257, 260, 35,
	9, -150, -178, -174, 36, 41, -102, -56, 155, 258,
	156, 259, -184, 260, -62, 152, -185, -185,
}

var yyDef = [...]int16{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 518, 0, 279, 279, 279, 279, 279, 279,
	0, 595, 578, 0, 0, 0, 0, -2, 268, 269,
	0, 271, 272, 0, 802, 802, 802, 802, 0, 34,
	35, 800, 1, 3, 526, 0, 0, 283, 286, 281,
	0, 578, 0, 0, 0, 61, 0, 0, 789, 0,
	790, 576, 576, 576, 596, 597, 600, 601, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 0, 0, 579, 0, 574, 0,
	574, 574, 574, 0, 227, 350, 604, 605, 789, 790,
	0, 0, 0, 0, 803, 803, 803, 803, 0, 803,
	256, 245, 247, 248, 249, 250, 803, 265, 266, 255,
	267, 270, 273, 0, 275, 276, 277, 278, 28, 530,
	0, 0, 518, 30, 0, 279, 284, 285, 289, 287,
	288, 280, 0, 297, 301, 0, 358, 0, 363, 365,
	-2, -2, 0, 408, 409, 410, 411, 412, 0, 0,
	0, 0, 0, 0, 0, 439, 440, 441, 442, 503,
	504, 505, 506, 507, 508, 509, 510, 367, 368, 500,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 491, 0, 470, 470, 470, 470, 470, 470, 470,
	470, 0, 0, 0, 0, 0, 0, 308, 310, 311,
	312, 331, 0, 333, 0, 0, 42, 46, 0, 780,
	561, -2, -2, 0, 0, 602, 603, -2, 709, -2,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 0, 78, 0, 0, 803, 0,
	68, 0, 0, 0, 0, 0, 803, 0, 0, 0,
	0, 0, 0, 0, 226, 0, 228, 803, 803, 803,
	803, 803, 803, 803, 803, 237, 804, 805, 238, 239,
	240, 803, 803, 242, 0, 257, 0, 251, 274, 29,
	801, 23, 0, 0, 527, 0, 519, 520, 523, 526,
	28, 286, 0, 291, 290, 282, 0, 298, 0, 0,
	0, 302, 0, 304, 305, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 390, 391, 392,
	393, 394, 395, 396, 364, 0, 383, 0, 432, 433,
	434, 435, 436, 437, 438, 293, 28, 0, 406, 0,
	446, 0, 0, 0, 0, 0, 0, 0, 289, 0,
	492, 0, 462, 0, 463, 464, 465, 466, 467, 468,
	469, 0, 293, 0, 0, 44, 0, 349, 0, 0,
	0, 0, 0, 0, 338, 0, 0, 341, 0, 0,
	0, 0, 332, 0, 0, 352, 753, 334, 0, 336,
	337, -2, 0, 0, 0, 40, 41, 0, 47, 780,
	49, 50, 0, 0, 0, 158, 569, 570, 571, 567,
	186, 0, 141, 137, 83, 84, 85, 130, 87, 130,
	130, 130, 130, 155, 155, 155, 155, 113, 114, 115,
	116, 117, 0, 0, 100, 130, 130, 130, 104, 120,
	121, 122, 123, 124, 125, 126, 127, 88, 89, 90,
	91, 92, 93, 94, 132, 132, 132, 134, 134, 598,
	63, 0, 71, 0, 803, 0, 803, 76, 0, 202,
	0, 221, 575, 0, 803, 224, 225, 351, 606, 607,
	229, 230, 231, 232, 233, 234, 235, 236, 241, 244,
	258, 252, 253, 246, 531, 0, 0, 0, 0, 0,
	522, 524, 525, 530, 31, 289, 0, 511, 0, 0,
	0, 292, 26, 359, 360, 362, 384, 0, 386, 388,
	303, 299, 0, 501, -2, 369, 370, 399, 400, 403,
	0, 404, 0, 0, 0, 0, 397, 374, 376, 377,
	378, 379, 380, 0, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 483, 130, 485, 487, 490, 430, 481, 482, 431,
	0, 0, 0, 294, 295, 405, 0, 556, 28, 0,
	0, 0, 0, 0, 500, 0, 0, 0, 0, 498,
	495, 0, 0, 471, 0, 0, 0, 0, 0, 0,
	348, 356, 558, 0, 309, 327, 329, 0, 324, 339,
	340, 342, 0, 344, 0, 346, 347, 313, 314, 315,
	0, 0, 0, 0, 335, 356, 0, 356, 43, 562,
	48, 0, 0, 53, 54, 563, 564, 565, 0, 77,
	187, 189, 192, 193, 194, 79, 80, 0, 0, 0,
	0, 0, 181, 182, 144, 142, 0, 139, 138, 86,
	0, 155, 155, 107, 108, 158, 0, 158, 158, 158,
	0, 0, 101, 102, 103, 95, 0, 96, 97, 98,
	0, 99, 0, 0, 803, 65, 0, 69, 70, 66,
	577, 67, 802, 0, 0, 590, 203, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 0, 220, 803,
	223, 261, 0, 0, 0, 528, 529, 0, 521, 24,
	0, 572, 573, 512, 513, 306, 385, 387, 389, 0,
	293, 0, 0, 371, 397, 375, 0, 372, 0, 0,
	0, 484, 486, 488, 366, 443, 0, 0, 407, -2,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 518, 0, 496, 0, 0, 461, 472, 473, 474,
	475, 543, 0, 0, -2, 0, 0, 518, 0, 0,
	0, 321, 328, 0, 0, 322, 0, 323, 343, 345,
	0, 0, 0, 0, 319, 518, 356, 39, 51, 52,
	0, 0, 58, 159, 0, 190, 0, 0, 176, 0,
	0, 179, 180, 151, 0, 143, 82, 140, 0, 158,
	158, 109, 0, 110, 111, 112, 0, 128, 0, 0,
	0, 0, 599, 64, 72, 73, 0, 195, 802, 0,
	204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 802, 0, 0, 802, 591, 592, 593, 594, 0,
	222, 243, 0, 0, 259, 260, 532, 0, 25, 356,
	0, 300, 502, 0, 401, 0, 373, 0, 398, 381,
	489, 444, 296, 0, 0, 0, 0, 0, 501, 0,
	0, 0, 493, 460, 499, 0, 545, 0, 543, 533,
	552, 554, 0, 28, 0, 539, 0, 526, 559, 357,
	560, 325, 0, 330, 0, 0, 0, 333, 0, 526,
	38, 55, 56, 57, 188, 191, 0, 183, 130, 177,
	178, 153, 0, 145, 146, 147, 148, 149, 150, 131,
	105, 106, 156, 157, 155, 0, 155, 0, 135, 0,
	803, 0, 0, 196, 0, 197, 199, 200, 201, 0,
	262, 263, 514, 307, 445, 402, 382, 449, 451, 450,
	452, 0, 0, 455, 0, 0, 0, 0, 0, 497,
	32, 0, 0, 545, 0, 555, -2, 0, 0, 0,
	45, 36, 0, 317, 0, 0, 0, 352, 320, 37,
	168, 0, 185, 160, 154, 0, 158, 129, 158, 0,
	0, 62, 74, 75, 0, 0, 516, 0, 0, 0,
	0, 0, 476, 459, 494, 547, 0, 33, 553, 0,
	-2, 0, 541, 540, 0, 326, 353, 354, 355, 316,
	167, 169, 0, 174, 0, 184, 165, 0, 162, 164,
	152, 118, 119, 133, 136, 0, 0, 27, 0, 0,
	453, 454, 456, 457, 0, 0, 0, 0, 356, 0,
	536, 28, 0, 318, 170, 171, 0, 175, 173, 81,
	0, 161, 163, 68, 0, 216, 0, 517, 515, 458,
	0, 0, 0, 546, 0, 158, 549, 544, -2, 542,
	172, 166, 71, 215, 0, 0, 477, 0, 480, 550,
	0, 356, 198, 217, 0, 478, 551, 548, 0, 0,
	0, 0, 0, 479, 0, 0, 218, 219,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	56, 58, 99, 97, 57, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 262,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 263, 3, 264, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:322
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:327
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:328
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:332
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:356
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:364
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:374
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:381
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:391
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:397
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:401
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:408
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.OnConflict = yyDollar[8].onConflict
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:421
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs), OnConflict: yyDollar[9].onConflict}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:433
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:437
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:443
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:449
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:457
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:462
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:467
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:471
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:476
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:480
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:486
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:490
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:494
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:504
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:508
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:514
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:546
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:550
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:556
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:561
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:582
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:586
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:591
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:595
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:606
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:628
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:641
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:648
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:653
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:657
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:663
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:674
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:685
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:732
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:887
		{
			yyVAL.optVal = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:891
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:896
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:900
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:908
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:912
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:918
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:926
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:930
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:935
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:945
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:958
		{
			yyVAL.optVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:962
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:966
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:970
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:974
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:978
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:982
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:987
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1009
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1013
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1018
		{
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.colKeyOpt = colKey
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1048
		{
			yyVAL.optVal = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1058
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1062
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1082
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1087
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1093
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1097
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1115
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1119
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.str = yyDollar[1].str
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1170
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1174
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1194
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1198
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1202
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1206
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1219
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1229
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1234
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1239
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1243
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 215:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1262
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1278
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1282
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1288
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1294
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1302
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1307
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1315
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1319
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1325
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1334
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1353
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1357
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1365
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1369
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1373
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1377
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1381
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1389
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1393
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1397
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1407
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1411
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1415
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1419
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1423
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1457
		{
			yyVAL.str = ""
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.str = "extended "
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1467
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.str = "full "
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1477
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1481
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1485
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1491
		{
			yyVAL.showFilter = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1499
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1505
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1509
		{
			yyVAL.str = SessionStr
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1513
		{
			yyVAL.str = GlobalStr
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1529
		{
			yyVAL.statement = &Begin{}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.statement = &Begin{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.statement = &Commit{}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1545
		{
			yyVAL.statement = &Rollback{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[2].statement}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &Explain{Stmt: yyDollar[3].statement, Analyze: true}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1565
		{
			yyVAL.statement = &OtherRead{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1573
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1578
		{
			setAllowComments(yylex, true)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1582
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1588
		{
			yyVAL.bytes2 = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1592
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = UnionStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.str = UnionAllStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1606
		{
			yyVAL.str = UnionDistinctStr
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1611
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1615
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = SQLCacheStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = DistinctStr
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = StraightJoinHint
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1642
		{
			yyVAL.selectExprs = nil
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1656
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1670
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1674
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1679
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1687
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.tableExprs = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1727
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1737
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1741
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1747
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1751
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1761
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1774
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1778
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1782
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1786
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1792
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1794
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1798
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1804
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1806
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1809
		{
			yyVAL.empty = struct{}{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.empty = struct{}{}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1814
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1822
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = JoinStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1839
		{
			yyVAL.str = JoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = JoinStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = StraightJoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = LeftJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1859
		{
			yyVAL.str = LeftJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = RightJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.str = RightJoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = NaturalJoinStr
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1877
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1897
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1906
		{
			yyVAL.indexHints = nil
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1910
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1914
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1918
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1923
		{
			yyVAL.expr = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1927
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1933
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1937
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1945
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1949
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1963
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1967
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1977
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1987
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1991
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1995
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1999
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2003
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2007
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2021
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].colTuple}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2025
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2029
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2033
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2037
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2041
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
			yyVAL.str = IsNullStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2051
		{
			yyVAL.str = IsNotNullStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.str = IsTrueStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = IsNotTrueStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = IsFalseStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2067
		{
			yyVAL.str = IsNotFalseStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = EqualStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = LessThanStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2081
		{
			yyVAL.str = GreaterThanStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = LessEqualStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = GreaterEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = NotEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2102
		{
			yyVAL.expr = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2120
		{
			yyVAL.colTuple = &ConvertExpr{Expr: NewStrVal(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2124
		{
			yyVAL.colTuple = Array(yyDollar[3].exprs)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			// this is an array literal ('{a,b,c}', etc)
			// TODO this is weird and ugly but I need those quotes to be passed through
			tmp := make([]byte, len(yyDollar[1].bytes)+2)
			tmp[0] = '\''
			tmp[len(yyDollar[1].bytes)+1] = '\''
			copy(tmp[1:], yyDollar[1].bytes)
			yyVAL.colTuple = ListArg(tmp)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2138
		{
			// this is a positional parameter ($1, etc)
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2155
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2229
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2233
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2237
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2241
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2253
		{
			yyVAL.expr = &FunctionArgAssignmentExpr{Argument: yyDollar[1].expr, Operator: FuncArgAssignStr, Value: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2257
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2265
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2273
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2295
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2313
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2317
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2321
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("array"), Exprs: SelectExprs{&AliasedExpr{Expr: yyDollar[2].subquery}}}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2339
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2343
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2347
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2351
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2355
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2359
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2363
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2371
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 457:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 458:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 459:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2383
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2387
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = BooleanModeStr
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2477
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.str = QueryExpansionStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.convertType = &ConvertType{Type: "boolean"}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].convertType.Type + "[]"}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = nil
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = string("")
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2549
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2559
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = nil
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2578
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2582
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &NullVal{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2622
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2640
		{
			yyVAL.exprs = nil
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2644
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2658
		{
			yyVAL.orderBy = nil
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2668
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = AscScr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = AscScr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.str = DescScr
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2696
		{
			yyVAL.limit = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2704
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2708
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2713
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.str = ForUpdateStr
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2721
		{
			yyVAL.str = ShareModeStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2734
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2738
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2742
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2747
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2751
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2755
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2766
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2770
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2774
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2779
		{
			yyVAL.updateExprs = nil
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2783
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2788
		{
			yyVAL.onConflict = nil
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2792
		{
			yyVAL.onConflict = &OnConflict{Target: yyDollar[3].conflictTarget, Action: yyDollar[4].conflictAction}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2797
		{
			yyVAL.conflictTarget = nil
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2801
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Cols:    yyDollar[1].columns,
				Collate: yyDollar[3].str,
				Where:   NewWhere(WhereStr, yyDollar[4].expr),
			}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2809
		{
			yyVAL.conflictTarget = &ConflictTarget{
				Cols:    yyDollar[1].columns,
				Collate: "",
				Where:   NewWhere(WhereStr, yyDollar[2].expr),
			}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2820
		{
			yyVAL.conflictAction = nil
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2824
		{
			yyVAL.conflictAction = &ConflictAction{Update: yyDollar[3].setExpr}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2834
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2844
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2850
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2870
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2876
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2886
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2892
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2896
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2900
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2907
		{
			yyVAL.bytes = []byte("charset")
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &Default{}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2931
		{
			yyVAL.byt = 0
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2933
		{
			yyVAL.byt = 1
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2936
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2938
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2941
		{
			yyVAL.str = ""
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.str = IgnoreStr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2949
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2955
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2957
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2959
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2961
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2963
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2965
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2968
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2970
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2972
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2976
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2981
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2985
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2988
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2990
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3005
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3011
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3015
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3022
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			decNesting(yylex)
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3254
		{
			forceEOF(yylex)
		}
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3259
		{
			forceEOF(yylex)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			forceEOF(yylex)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
