// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const JSON_SUBOBJECT_OP = 57437
const JSON_UNQUOTE_SUBOBJECT_OP = 57438
const JSON_TXT_STR_EXISTS_OP = 57439
const JSON_ANY_KEYS_EXIST_OP = 57440
const JSON_ALL_KEYS_EXIST_OP = 57441
const JSON_LEFT_CONTAINS_RIGHT_OP = 57442
const JSON_RIGHT_CONTAINS_LEFT_OP = 57443
const CREATE = 57444
const ALTER = 57445
const DROP = 57446
const RENAME = 57447
const ANALYZE = 57448
const ADD = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const UNIQUE = 57457
const PRIMARY = 57458
const COLUMN = 57459
const CONSTRAINT = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const FOREIGN = 57463
const KEY_BLOCK_SIZE = 57464
const SHOW = 57465
const DESCRIBE = 57466
const EXPLAIN = 57467
const DATE = 57468
const ESCAPE = 57469
const REPAIR = 57470
const OPTIMIZE = 57471
const TRUNCATE = 57472
const MAXVALUE = 57473
const PARTITION = 57474
const REORGANIZE = 57475
const LESS = 57476
const THAN = 57477
const PROCEDURE = 57478
const TRIGGER = 57479
const VINDEX = 57480
const VINDEXES = 57481
const STATUS = 57482
const VARIABLES = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const BIT = 57489
const TINYINT = 57490
const SMALLINT = 57491
const MEDIUMINT = 57492
const INT = 57493
const INTEGER = 57494
const BIGINT = 57495
const INTNUM = 57496
const REAL = 57497
const DOUBLE = 57498
const FLOAT_TYPE = 57499
const DECIMAL = 57500
const NUMERIC = 57501
const TIME = 57502
const TIMESTAMP = 57503
const DATETIME = 57504
const YEAR = 57505
const CHAR = 57506
const VARCHAR = 57507
const BOOL = 57508
const CHARACTER = 57509
const VARBINARY = 57510
const NCHAR = 57511
const TEXT = 57512
const TINYTEXT = 57513
const MEDIUMTEXT = 57514
const LONGTEXT = 57515
const BLOB = 57516
const TINYBLOB = 57517
const MEDIUMBLOB = 57518
const LONGBLOB = 57519
const JSON = 57520
const ENUM = 57521
const GEOMETRY = 57522
const POINT = 57523
const LINESTRING = 57524
const POLYGON = 57525
const GEOMETRYCOLLECTION = 57526
const MULTIPOINT = 57527
const MULTILINESTRING = 57528
const MULTIPOLYGON = 57529
const NULLX = 57530
const AUTO_INCREMENT = 57531
const APPROXNUM = 57532
const SIGNED = 57533
const UNSIGNED = 57534
const ZEROFILL = 57535
const DATABASES = 57536
const TABLES = 57537
const VITESS_KEYSPACES = 57538
const VITESS_SHARDS = 57539
const VITESS_TABLETS = 57540
const VSCHEMA_TABLES = 57541
const EXTENDED = 57542
const FULL = 57543
const PROCESSLIST = 57544
const NAMES = 57545
const CHARSET = 57546
const GLOBAL = 57547
const SESSION = 57548
const ISOLATION = 57549
const LEVEL = 57550
const READ = 57551
const WRITE = 57552
const ONLY = 57553
const REPEATABLE = 57554
const COMMITTED = 57555
const UNCOMMITTED = 57556
const SERIALIZABLE = 57557
const CURRENT_TIMESTAMP = 57558
const DATABASE = 57559
const CURRENT_DATE = 57560
const CURRENT_TIME = 57561
const LOCALTIME = 57562
const LOCALTIMESTAMP = 57563
const UTC_DATE = 57564
const UTC_TIME = 57565
const UTC_TIMESTAMP = 57566
const REPLACE = 57567
const CONVERT = 57568
const CAST = 57569
const SUBSTR = 57570
const SUBSTRING = 57571
const GROUP_CONCAT = 57572
const SEPARATOR = 57573
const MATCH = 57574
const AGAINST = 57575
const BOOLEAN = 57576
const LANGUAGE = 57577
const WITH = 57578
const QUERY = 57579
const EXPANSION = 57580
const UNUSED = 57581

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"JSON_SUBOBJECT_OP",
	"JSON_UNQUOTE_SUBOBJECT_OP",
	"JSON_TXT_STR_EXISTS_OP",
	"JSON_ANY_KEYS_EXIST_OP",
	"JSON_ALL_KEYS_EXIST_OP",
	"JSON_LEFT_CONTAINS_RIGHT_OP",
	"JSON_RIGHT_CONTAINS_LEFT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	157, 263,
	158, 263,
	-2, 253,
	-1, 238,
	109, 594,
	-2, 590,
	-1, 239,
	109, 595,
	-2, 591,
	-1, 308,
	80, 753,
	-2, 58,
	-1, 309,
	80, 714,
	-2, 59,
	-1, 314,
	80, 698,
	-2, 556,
	-1, 316,
	80, 735,
	-2, 558,
	-1, 582,
	52, 41,
	54, 41,
	-2, 43,
	-1, 715,
	109, 597,
	-2, 593,
	-1, 926,
	5, 28,
	-2, 400,
	-1, 951,
	5, 27,
	-2, 531,
	-1, 1175,
	5, 28,
	-2, 532,
	-1, 1219,
	5, 27,
	-2, 534,
	-1, 1281,
	5, 28,
	-2, 535,
}

const yyPrivate = 57344

const yyLast = 11226

var yyAct = [...]int{
	269, 47, 653, 529, 1272, 1083, 243, 868, 784, 1230,
	1111, 1084, 268, 802, 848, 862, 824, 576, 820, 528,
	3, 1080, 217, 1181, 453, 211, 574, 823, 53, 1012,
	954, 785, 970, 1057, 757, 749, 918, 1015, 592, 1003,
	959, 842, 773, 717, 834, 313, 455, 461, 47, 591,
	307, 858, 781, 563, 900, 295, 222, 410, 475, 754,
	294, 578, 299, 226, 304, 241, 52, 216, 467, 212,
	213, 214, 215, 302, 1301, 1291, 1299, 1279, 885, 1297,
	869, 1290, 1075, 1169, 414, 1239, 1106, 1107, 293, 593,
	1278, 594, 884, 1105, 230, 181, 177, 178, 179, 543,
	815, 232, 1254, 493, 492, 502, 503, 495, 496, 497,
	498, 499, 500, 501, 494, 816, 817, 508, 435, 889,
	450, 57, 504, 505, 506, 507, 994, 245, 883, 1117,
	1118, 1119, 841, 978, 682, 1193, 977, 1122, 1120, 979,
	756, 683, 849, 423, 1158, 1156, 59, 60, 61, 62,
	63, 1208, 210, 446, 447, 1298, 1296, 1273, 1036, 782,
	424, 1231, 1237, 803, 805, 417, 174, 239, 175, 175,
	661, 652, 969, 968, 1233, 967, 412, 420, 189, 176,
	821, 1259, 1178, 880, 877, 878, 1044, 876, 437, 298,
	439, 934, 912, 689, 441, 441, 441, 441, 76, 441,
	836, 479, 186, 1033, 180, 186, 441, 430, 1023, 1035,
	724, 1126, 887, 890, 686, 436, 438, 474, 895, 1264,
	1136, 774, 957, 47, 722, 723, 721, 595, 836, 186,
	186, 76, 836, 473, 472, 186, 1021, 76, 517, 472,
	1079, 519, 464, 494, 804, 1077, 508, 882, 1232, 463,
	474, 504, 505, 506, 507, 474, 411, 656, 1040, 992,
	988, 1127, 774, 1267, 941, 1255, 1238, 1236, 527, 881,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 849,
	542, 544, 544, 544, 544, 544, 544, 544, 544, 552,
	553, 554, 555, 1277, 473, 472, 434, 896, 1023, 835,
	575, 469, 692, 693, 1121, 1284, 886, 1022, 1034, 1283,
	1032, 474, 1027, 1024, 1017, 1018, 1025, 1020, 1019, 888,
	458, 462, 195, 426, 427, 428, 1021, 835, 1199, 1026,
	931, 835, 833, 831, 1039, 1029, 832, 480, 416, 1198,
	173, 930, 186, 929, 186, 465, 205, 508, 473, 472,
	186, 838, 504, 505, 506, 507, 839, 186, 1007, 473,
	472, 76, 76, 76, 76, 474, 76, 50, 518, 1006,
	589, 530, 750, 76, 751, 583, 474, 720, 473, 472,
	541, 545, 546, 547, 548, 549, 550, 551, 707, 709,
	710, 995, 688, 708, 1265, 474, 190, 1022, 1215, 1196,
	76, 292, 1027, 1024, 1017, 1018, 1025, 1020, 1019, 192,
	418, 419, 1144, 1004, 441, 1262, 198, 194, 454, 1026,
	1287, 454, 441, 1223, 1270, 1016, 1114, 298, 687, 909,
	910, 911, 1113, 441, 441, 441, 441, 441, 441, 441,
	441, 1223, 454, 196, 473, 472, 200, 441, 441, 1223,
	1224, 267, 989, 1058, 258, 257, 260, 261, 262, 263,
	186, 474, 980, 259, 264, 1190, 1189, 186, 186, 186,
	1102, 454, 23, 76, 191, 871, 670, 1177, 454, 76,
	1133, 1132, 74, 1129, 1130, 668, 694, 1129, 1128, 695,
	1060, 924, 454, 560, 454, 718, 949, 759, 454, 950,
	752, 193, 667, 201, 202, 203, 204, 208, 666, 657,
	655, 650, 207, 206, 432, 312, 602, 601, 1243, 50,
	47, 415, 1062, 425, 1066, 715, 1061, 411, 1059, 696,
	21, 1242, 531, 1064, 713, 711, 586, 1081, 1123, 955,
	955, 956, 1063, 766, 769, 54, 809, 1047, 585, 775,
	956, 761, 759, 758, 760, 1065, 1067, 1173, 560, 1135,
	1131, 299, 299, 299, 299, 299, 786, 981, 814, 776,
	745, 746, 747, 748, 704, 705, 575, 587, 806, 585,
	936, 76, 23, 560, 924, 299, 221, 186, 186, 76,
	924, 186, 955, 924, 186, 761, 23, 588, 186, 801,
	76, 76, 76, 76, 76, 76, 76, 76, 771, 1218,
	719, 810, 690, 778, 76, 76, 933, 788, 789, 186,
	791, 787, 654, 935, 790, 799, 50, 559, 223, 50,
	850, 851, 852, 530, 76, 808, 764, 765, 186, 812,
	813, 807, 1203, 50, 76, 312, 312, 312, 312, 843,
	312, 560, 844, 845, 846, 847, 441, 312, 441, 932,
	828, 863, 966, 1096, 984, 864, 441, 859, 855, 856,
	857, 960, 961, 762, 763, 50, 854, 853, 65, 770,
	866, 1116, 1081, 1008, 477, 963, 664, 451, 298, 298,
	298, 298, 298, 777, 76, 779, 780, 819, 860, 861,
	702, 965, 793, 298, 495, 496, 497, 498, 499, 500,
	501, 494, 298, 796, 508, 913, 792, 1295, 797, 504,
	505, 506, 507, 1289, 440, 186, 227, 228, 186, 186,
	186, 186, 186, 1043, 718, 715, 897, 794, 901, 1294,
	186, 902, 795, 186, 468, 907, 798, 186, 569, 570,
	906, 999, 186, 186, 600, 456, 76, 312, 466, 433,
	991, 1269, 1268, 597, 1171, 914, 442, 457, 1216, 76,
	985, 1204, 873, 663, 573, 224, 225, 921, 468, 922,
	218, 1248, 952, 953, 219, 905, 926, 927, 928, 898,
	899, 54, 462, 904, 1247, 937, 1206, 956, 470, 1256,
	943, 951, 944, 945, 946, 947, 1194, 685, 58, 56,
	299, 584, 51, 1, 870, 940, 1011, 879, 1271, 1229,
	186, 1110, 830, 76, 822, 76, 409, 64, 1263, 186,
	310, 964, 186, 76, 829, 1235, 973, 1192, 837, 972,
	982, 974, 908, 993, 565, 568, 569, 570, 566, 719,
	567, 571, 840, 975, 960, 961, 1115, 1266, 990, 996,
	997, 925, 607, 605, 606, 312, 604, 998, 441, 1000,
	1001, 1002, 609, 312, 608, 603, 942, 986, 987, 197,
	305, 572, 596, 865, 312, 312, 312, 312, 312, 312,
	312, 312, 471, 441, 1005, 66, 923, 1031, 312, 312,
	1030, 1014, 565, 568, 569, 570, 566, 875, 567, 571,
	1038, 681, 938, 894, 449, 1028, 199, 516, 698, 443,
	444, 445, 903, 448, 976, 311, 1088, 691, 477, 460,
	452, 312, 1246, 1205, 939, 540, 772, 298, 244, 706,
	256, 253, 255, 254, 697, 948, 481, 242, 1055, 234,
	297, 1086, 1051, 47, 556, 564, 786, 300, 1082, 1056,
	562, 561, 786, 1085, 962, 1069, 1068, 1076, 1098, 1099,
	1100, 958, 1087, 1050, 76, 296, 1046, 186, 753, 1168,
	715, 1253, 701, 1091, 25, 55, 1090, 1092, 767, 767,
	229, 76, 183, 19, 767, 1101, 18, 17, 20, 16,
	1109, 1103, 15, 14, 1104, 29, 13, 12, 11, 1108,
	10, 767, 9, 8, 7, 1124, 1125, 6, 5, 4,
	303, 220, 22, 2, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 76, 0, 76, 236, 0,
	312, 1137, 0, 1078, 0, 0, 0, 0, 299, 0,
	0, 0, 0, 312, 1139, 0, 0, 1142, 1093, 1094,
	76, 0, 1095, 186, 186, 1097, 0, 0, 0, 0,
	0, 186, 310, 0, 1147, 1148, 1167, 1146, 1154, 0,
	76, 0, 1150, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1159, 1160, 1161, 0, 0, 1164, 0,
	1151, 1152, 0, 1153, 1172, 0, 1155, 312, 1157, 312,
	0, 1174, 1175, 1176, 1180, 1179, 0, 312, 0, 1186,
	76, 76, 1183, 1184, 1185, 982, 1188, 0, 0, 0,
	0, 0, 421, 0, 422, 441, 0, 0, 651, 0,
	429, 312, 1145, 1195, 0, 1197, 660, 431, 0, 76,
	0, 76, 76, 1202, 1191, 0, 0, 671, 672, 673,
	674, 675, 676, 677, 678, 1201, 0, 1207, 0, 0,
	0, 679, 680, 0, 1086, 298, 186, 1220, 0, 0,
	0, 1170, 0, 0, 76, 1217, 1085, 0, 530, 0,
	0, 0, 0, 1214, 0, 0, 1219, 76, 186, 0,
	1228, 1234, 0, 0, 76, 1245, 0, 0, 1225, 1226,
	1227, 0, 76, 0, 1240, 186, 1241, 0, 0, 1086,
	0, 47, 0, 0, 1257, 0, 0, 1244, 0, 0,
	0, 1085, 0, 0, 1249, 1250, 1251, 1252, 0, 1261,
	1258, 0, 0, 0, 0, 0, 714, 0, 0, 0,
	558, 0, 1275, 0, 0, 0, 0, 0, 971, 582,
	0, 0, 459, 786, 76, 1280, 76, 76, 76, 186,
	76, 0, 0, 1285, 0, 312, 76, 0, 1276, 0,
	0, 0, 0, 1281, 0, 520, 521, 522, 523, 524,
	525, 526, 1293, 1292, 0, 0, 1286, 184, 0, 1300,
	209, 0, 76, 76, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1009, 312,
	0, 312, 233, 0, 184, 184, 0, 1304, 1305, 0,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 76, 76, 0, 0, 1274,
	530, 0, 0, 0, 0, 310, 0, 0, 76, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 825, 0,
	0, 76, 0, 1165, 454, 0, 0, 658, 659, 0,
	872, 662, 874, 0, 665, 0, 312, 0, 0, 0,
	893, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 767, 0, 0, 1089, 971, 0, 767, 0, 684,
	493, 492, 502, 503, 495, 496, 497, 498, 499, 500,
	501, 494, 0, 0, 508, 0, 0, 76, 703, 504,
	505, 506, 507, 312, 0, 312, 1112, 184, 0, 184,
	0, 76, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 714, 0, 0, 23,
	24, 48, 26, 27, 0, 0, 0, 0, 1138, 0,
	0, 497, 498, 499, 500, 501, 494, 0, 42, 508,
	0, 1140, 0, 28, 504, 505, 506, 507, 1143, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 37, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 783, 0, 0, 0, 0,
	716, 0, 0, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 811, 0, 0, 0, 0, 1182, 0,
	1182, 1182, 1182, 0, 1187, 184, 0, 0, 0, 0,
	312, 0, 184, 580, 184, 0, 0, 0, 0, 0,
	0, 0, 30, 31, 33, 32, 35, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 312, 312, 0,
	825, 0, 1010, 36, 43, 44, 0, 0, 45, 46,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 38, 39, 0, 40, 41, 1037, 0, 891,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 1221,
	1222, 0, 0, 0, 0, 0, 1013, 0, 0, 0,
	0, 0, 1112, 493, 492, 502, 503, 495, 496, 497,
	498, 499, 500, 501, 494, 1182, 0, 508, 0, 0,
	0, 0, 504, 505, 506, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1260, 0, 0, 0, 1049,
	0, 0, 184, 184, 0, 0, 184, 0, 0, 184,
	0, 0, 0, 669, 0, 49, 919, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 767, 0,
	0, 1282, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1288, 0, 1162, 454, 0,
	0, 0, 0, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 0, 825, 0,
	825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 915, 916, 917, 493, 492, 502, 503, 495, 496,
	497, 498, 499, 500, 501, 494, 0, 0, 508, 0,
	0, 0, 0, 504, 505, 506, 507, 0, 0, 0,
	233, 0, 0, 0, 0, 233, 233, 0, 0, 768,
	768, 233, 0, 0, 0, 768, 0, 0, 0, 0,
	0, 1049, 0, 0, 0, 233, 233, 233, 233, 0,
	184, 0, 768, 184, 184, 184, 184, 184, 0, 0,
	0, 0, 0, 0, 0, 800, 0, 0, 184, 0,
	454, 0, 580, 0, 0, 0, 0, 184, 184, 0,
	0, 0, 0, 0, 0, 0, 1166, 0, 0, 1200,
	0, 1045, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 825, 493, 492, 502, 503,
	495, 496, 497, 498, 499, 500, 501, 494, 0, 0,
	508, 0, 0, 624, 0, 504, 505, 506, 507, 0,
	0, 0, 1013, 825, 1163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 184, 493, 492,
	502, 503, 495, 496, 497, 498, 499, 500, 501, 494,
	0, 0, 508, 0, 0, 0, 0, 504, 505, 506,
	507, 0, 669, 0, 0, 0, 0, 0, 1053, 1054,
	0, 0, 0, 0, 233, 0, 1134, 0, 0, 612,
	0, 1070, 1071, 0, 1073, 1074, 493, 492, 502, 503,
	495, 496, 497, 498, 499, 500, 501, 494, 1141, 0,
	508, 0, 0, 0, 0, 504, 505, 506, 507, 0,
	0, 0, 0, 0, 0, 0, 625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 638, 639, 640,
	641, 642, 643, 644, 233, 645, 646, 647, 648, 649,
	626, 627, 628, 629, 610, 611, 0, 0, 613, 0,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	630, 631, 632, 633, 634, 635, 636, 637, 0, 0,
	0, 0, 184, 0, 0, 0, 483, 0, 491, 0,
	0, 0, 0, 0, 509, 510, 511, 512, 513, 514,
	515, 1149, 484, 485, 482, 493, 492, 502, 503, 495,
	496, 497, 498, 499, 500, 501, 494, 1052, 0, 508,
	0, 0, 0, 0, 504, 505, 506, 507, 486, 487,
	488, 489, 490, 0, 0, 0, 0, 493, 492, 502,
	503, 495, 496, 497, 498, 499, 500, 501, 494, 0,
	0, 508, 0, 0, 0, 0, 504, 505, 506, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 1042,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 920,
	0, 1209, 1210, 0, 1211, 1212, 1213, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 0, 768, 493,
	492, 502, 503, 495, 496, 497, 498, 499, 500, 501,
	494, 0, 0, 508, 0, 0, 0, 0, 504, 505,
	506, 507, 493, 492, 502, 503, 495, 496, 497, 498,
	499, 500, 501, 494, 0, 0, 508, 0, 0, 0,
	0, 504, 505, 506, 507, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 492, 502, 503, 495,
	496, 497, 498, 499, 500, 501, 494, 0, 0, 508,
	0, 0, 0, 184, 504, 505, 506, 507, 0, 502,
	503, 495, 496, 497, 498, 499, 500, 501, 494, 0,
	184, 508, 0, 0, 0, 0, 504, 505, 506, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 398,
	388, 0, 360, 400, 338, 352, 408, 353, 354, 381,
	324, 368, 125, 350, 0, 341, 319, 347, 320, 339,
	362, 93, 365, 337, 390, 371, 107, 406, 109, 376,
	0, 142, 118, 0, 0, 364, 392, 366, 386, 359,
	382, 329, 375, 401, 351, 379, 402, 0, 0, 0,
	75, 0, 826, 827, 0, 0, 0, 0, 0, 86,
	0, 378, 397, 349, 380, 318, 377, 0, 322, 325,
	407, 395, 344, 345, 983, 0, 0, 0, 0, 0,
	0, 363, 367, 383, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 374, 0, 0, 0, 326,
	323, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 343, 384, 0, 317, 387,
	393, 358, 187, 396, 356, 355, 399, 131, 0, 768,
	145, 98, 97, 106, 391, 340, 348, 89, 346, 137,
	127, 157, 373, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	321, 0, 143, 159, 172, 336, 394, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 332, 335, 330,
	331, 369, 370, 403, 404, 405, 385, 327, 0, 333,
	334, 0, 389, 372, 77, 0, 108, 169, 133, 95,
	160, 398, 388, 0, 360, 400, 338, 352, 408, 353,
	354, 381, 324, 368, 125, 350, 0, 341, 319, 347,
	320, 339, 362, 93, 365, 337, 390, 371, 107, 406,
	109, 376, 0, 142, 118, 0, 0, 364, 392, 366,
	386, 359, 382, 329, 375, 401, 351, 379, 402, 0,
	0, 0, 75, 0, 826, 827, 0, 0, 0, 0,
	0, 86, 0, 378, 397, 349, 380, 318, 377, 0,
	322, 325, 407, 395, 344, 345, 0, 0, 0, 0,
	0, 0, 0, 363, 367, 383, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 374, 0, 0,
	0, 326, 323, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 343, 384, 0,
	317, 387, 393, 358, 187, 396, 356, 355, 399, 131,
	0, 0, 145, 98, 97, 106, 391, 340, 348, 89,
	346, 137, 127, 157, 373, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 321, 0, 143, 159, 172, 336, 394, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 332,
	335, 330, 331, 369, 370, 403, 404, 405, 385, 327,
	0, 333, 334, 0, 389, 372, 77, 0, 108, 169,
	133, 95, 160, 398, 388, 0, 360, 400, 338, 352,
	408, 353, 354, 381, 324, 368, 125, 350, 0, 341,
	319, 347, 320, 339, 362, 93, 365, 337, 390, 371,
	107, 406, 109, 376, 0, 142, 118, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 50, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 343,
	384, 0, 317, 387, 393, 358, 187, 396, 356, 355,
	399, 131, 0, 0, 145, 98, 97, 106, 391, 340,
	348, 89, 346, 137, 127, 157, 373, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 321, 0, 143, 159, 172, 336,
	394, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 332, 335, 330, 331, 369, 370, 403, 404, 405,
	385, 327, 0, 333, 334, 0, 389, 372, 77, 0,
	108, 169, 133, 95, 160, 398, 388, 0, 360, 400,
	338, 352, 408, 353, 354, 381, 324, 368, 125, 350,
	0, 341, 319, 347, 320, 339, 362, 93, 365, 337,
	390, 371, 107, 406, 109, 376, 0, 142, 118, 0,
	0, 364, 392, 366, 386, 359, 382, 329, 375, 401,
	351, 379, 402, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 378, 397, 349,
	380, 318, 377, 0, 322, 325, 407, 395, 344, 345,
	0, 0, 0, 0, 0, 0, 0, 363, 367, 383,
	357, 0, 0, 0, 0, 0, 0, 1048, 0, 342,
	0, 374, 0, 0, 0, 326, 323, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 343, 384, 0, 317, 387, 393, 358, 187, 396,
	356, 355, 399, 131, 0, 0, 145, 98, 97, 106,
	391, 340, 348, 89, 346, 137, 127, 157, 373, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 321, 0, 143, 159,
	172, 336, 394, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 332, 335, 330, 331, 369, 370, 403,
	404, 405, 385, 327, 0, 333, 334, 0, 389, 372,
	77, 0, 108, 169, 133, 95, 160, 398, 388, 0,
	360, 400, 338, 352, 408, 353, 354, 381, 324, 368,
	125, 350, 0, 341, 319, 347, 320, 339, 362, 93,
	365, 337, 390, 371, 107, 406, 109, 376, 0, 142,
	118, 0, 0, 364, 392, 366, 386, 359, 382, 329,
	375, 401, 351, 379, 402, 0, 0, 0, 238, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 712,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 343, 384, 0, 317, 387, 393, 358,
	187, 396, 356, 355, 399, 131, 0, 0, 145, 98,
	97, 106, 391, 340, 348, 89, 346, 137, 127, 157,
	373, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 321, 0,
	143, 159, 172, 336, 394, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 332, 335, 330, 331, 369,
	370, 403, 404, 405, 385, 327, 0, 333, 334, 0,
	389, 372, 77, 0, 108, 169, 133, 95, 160, 398,
	388, 0, 360, 400, 338, 352, 408, 353, 354, 381,
	324, 368, 125, 350, 0, 341, 319, 347, 320, 339,
	362, 93, 365, 337, 390, 371, 107, 406, 109, 376,
	0, 142, 118, 0, 0, 364, 392, 366, 386, 359,
	382, 329, 375, 401, 351, 379, 402, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 378, 397, 349, 380, 318, 377, 0, 322, 325,
	407, 395, 344, 345, 0, 0, 0, 0, 0, 0,
	0, 363, 367, 383, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 374, 0, 0, 0, 326,
	323, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 343, 384, 0, 317, 387,
	393, 358, 187, 396, 356, 355, 399, 131, 0, 0,
	145, 98, 97, 106, 391, 340, 348, 89, 346, 137,
	127, 157, 373, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	321, 0, 143, 159, 172, 336, 394, 165, 166, 167,
	168, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 332, 335, 330,
	331, 369, 370, 403, 404, 405, 385, 327, 0, 333,
	334, 0, 389, 372, 77, 0, 108, 169, 133, 95,
	160, 398, 388, 0, 360, 400, 338, 352, 408, 353,
	354, 381, 324, 368, 125, 350, 0, 341, 319, 347,
	320, 339, 362, 93, 365, 337, 390, 371, 107, 406,
	109, 376, 0, 142, 118, 0, 0, 364, 392, 366,
	386, 359, 382, 329, 375, 401, 351, 379, 402, 0,
	0, 0, 238, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 378, 397, 349, 380, 318, 377, 0,
	322, 325, 407, 395, 344, 345, 0, 0, 0, 0,
	0, 0, 0, 363, 367, 383, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 374, 0, 0,
	0, 326, 323, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 343, 384, 0,
	317, 387, 393, 358, 187, 396, 356, 355, 399, 131,
	0, 0, 145, 98, 97, 106, 391, 340, 348, 89,
	346, 137, 127, 157, 373, 128, 136, 110, 149, 132,
	156, 188, 164, 147, 163, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 171, 83, 162, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 321, 0, 143, 159, 172, 336, 394, 165,
	166, 167, 168, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 170, 126, 138, 88, 158, 141, 332,
	335, 330, 331, 369, 370, 403, 404, 405, 385, 327,
	0, 333, 334, 0, 389, 372, 77, 0, 108, 169,
	133, 95, 160, 398, 388, 0, 360, 400, 338, 352,
	408, 353, 354, 381, 324, 368, 125, 350, 0, 341,
	319, 347, 320, 339, 362, 93, 365, 337, 390, 371,
	107, 406, 109, 376, 0, 142, 118, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 328, 0, 343,
	384, 0, 317, 387, 393, 358, 187, 396, 356, 355,
	399, 131, 0, 0, 145, 98, 97, 106, 391, 340,
	348, 89, 346, 137, 127, 157, 373, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 315, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 321, 0, 143, 159, 172, 336,
	394, 165, 166, 167, 168, 0, 0, 0, 316, 314,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 332, 335, 330, 331, 369, 370, 403, 404, 405,
	385, 327, 0, 333, 334, 0, 389, 372, 77, 0,
	108, 169, 133, 95, 160, 398, 388, 0, 360, 400,
	338, 352, 408, 353, 354, 381, 324, 368, 125, 350,
	0, 341, 319, 347, 320, 339, 362, 93, 365, 337,
	390, 371, 107, 406, 109, 376, 0, 142, 118, 0,
	0, 364, 392, 366, 386, 359, 382, 329, 375, 401,
	351, 379, 402, 0, 0, 0, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 378, 397, 349,
	380, 318, 377, 0, 322, 325, 407, 395, 344, 345,
	0, 0, 0, 0, 0, 0, 0, 363, 367, 383,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 374, 0, 0, 0, 326, 323, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 328,
	0, 343, 384, 0, 317, 387, 393, 358, 187, 396,
	356, 355, 399, 131, 0, 0, 145, 98, 97, 106,
	391, 340, 348, 89, 346, 137, 127, 157, 373, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 321, 0, 143, 159,
	172, 336, 394, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 332, 335, 330, 331, 369, 370, 403,
	404, 405, 385, 327, 0, 333, 334, 0, 389, 372,
	77, 0, 108, 169, 133, 95, 160, 398, 388, 0,
	360, 400, 338, 352, 408, 353, 354, 381, 324, 368,
	125, 350, 0, 341, 319, 347, 320, 339, 362, 93,
	365, 337, 390, 371, 107, 406, 109, 376, 0, 142,
	118, 0, 0, 364, 392, 366, 386, 359, 382, 329,
	375, 401, 351, 379, 402, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 343, 384, 0, 317, 387, 393, 358,
	187, 396, 356, 355, 399, 131, 0, 0, 145, 98,
	97, 106, 391, 340, 348, 89, 346, 137, 127, 157,
	373, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 590, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 315, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 321, 0,
	143, 159, 172, 336, 394, 165, 166, 167, 168, 0,
	0, 0, 316, 314, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 332, 335, 330, 331, 369,
	370, 403, 404, 405, 385, 327, 0, 333, 334, 0,
	389, 372, 77, 0, 108, 169, 133, 95, 160, 398,
	388, 0, 360, 400, 338, 352, 408, 353, 354, 381,
	324, 368, 125, 350, 0, 341, 319, 347, 320, 339,
	362, 93, 365, 337, 390, 371, 107, 406, 109, 376,
	0, 142, 118, 0, 0, 364, 392, 366, 386, 359,
	382, 329, 375, 401, 351, 379, 402, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 378, 397, 349, 380, 318, 377, 0, 322, 325,
	407, 395, 344, 345, 0, 0, 0, 0, 0, 0,
	0, 363, 367, 383, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 374, 0, 0, 0, 326,
	323, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 328, 0, 343, 384, 0, 317, 387,
	393, 358, 187, 396, 356, 355, 399, 131, 0, 0,
	145, 98, 97, 106, 391, 340, 348, 89, 346, 137,
	127, 157, 373, 128, 136, 110, 149, 132, 156, 188,
	164, 147, 163, 78, 146, 306, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 171, 83, 162, 82, 315, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	321, 0, 143, 159, 172, 336, 394, 165, 166, 167,
	168, 0, 0, 0, 316, 314, 309, 308, 104, 111,
	134, 170, 126, 138, 88, 158, 141, 332, 335, 330,
	331, 369, 370, 403, 404, 405, 385, 327, 0, 333,
	334, 0, 389, 372, 77, 0, 108, 169, 133, 95,
	160, 125, 0, 0, 755, 0, 240, 0, 0, 0,
	93, 0, 237, 0, 0, 107, 279, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 270, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 238,
	258, 257, 260, 261, 262, 263, 0, 0, 86, 259,
	264, 265, 266, 0, 0, 235, 251, 0, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	231, 0, 0, 0, 290, 0, 250, 0, 0, 246,
	247, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 288, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 188, 164,
	147, 163, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 171, 83, 162, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 172, 0, 0, 165, 166, 167, 168,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	170, 126, 138, 88, 158, 141, 280, 289, 286, 287,
	284, 285, 283, 282, 281, 291, 272, 273, 274, 275,
	277, 0, 276, 77, 0, 108, 169, 133, 95, 160,
	125, 0, 0, 0, 0, 240, 0, 0, 0, 93,
	0, 237, 0, 0, 107, 279, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 270, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 454, 238, 258,
	257, 260, 261, 262, 263, 0, 0, 86, 259, 264,
	265, 266, 0, 0, 235, 251, 0, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 0,
	0, 0, 0, 290, 0, 250, 0, 0, 246, 247,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 288, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 280, 289, 286, 287, 284,
	285, 283, 282, 281, 291, 272, 273, 274, 275, 277,
	0, 276, 77, 0, 108, 169, 133, 95, 160, 125,
	0, 0, 0, 0, 240, 0, 0, 0, 93, 0,
	237, 0, 0, 107, 279, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 238, 258, 257,
	260, 261, 262, 263, 0, 0, 86, 259, 264, 265,
	266, 0, 0, 235, 251, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 231, 0,
	0, 0, 290, 0, 250, 0, 0, 246, 247, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 288, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 280, 289, 286, 287, 284, 285,
	283, 282, 281, 291, 272, 273, 274, 275, 277, 0,
	276, 77, 0, 108, 169, 133, 95, 160, 125, 0,
	0, 0, 0, 240, 0, 0, 0, 93, 0, 237,
	0, 0, 107, 279, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 270, 271, 0, 0, 0, 0, 0,
	0, 818, 0, 50, 0, 0, 238, 258, 257, 260,
	261, 262, 263, 0, 0, 86, 259, 264, 265, 266,
	0, 0, 235, 251, 0, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 0, 0, 0,
	0, 290, 0, 250, 0, 0, 246, 247, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 288, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 280, 289, 286, 287, 284, 285, 283,
	282, 281, 291, 272, 273, 274, 275, 277, 23, 276,
	77, 0, 108, 169, 133, 95, 160, 0, 0, 0,
	125, 0, 0, 0, 0, 240, 0, 0, 0, 93,
	0, 237, 0, 0, 107, 279, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 270, 271, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 238, 258,
	257, 260, 261, 262, 263, 0, 0, 86, 259, 264,
	265, 266, 0, 0, 235, 251, 0, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 0,
	0, 0, 0, 290, 0, 250, 0, 0, 246, 247,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 288, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 188, 164, 147,
	163, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 171, 83, 162, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 172, 0, 0, 165, 166, 167, 168, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 170,
	126, 138, 88, 158, 141, 280, 289, 286, 287, 284,
	285, 283, 282, 281, 291, 272, 273, 274, 275, 277,
	0, 276, 77, 0, 108, 169, 133, 95, 160, 125,
	0, 0, 0, 0, 240, 0, 0, 0, 93, 0,
	237, 0, 0, 107, 279, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 238, 258, 257,
	260, 261, 262, 263, 0, 0, 86, 259, 264, 265,
	266, 0, 0, 235, 251, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 0, 0,
	0, 0, 290, 0, 250, 0, 0, 246, 247, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 288, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 280, 289, 286, 287, 284, 285,
	283, 282, 281, 291, 272, 273, 274, 275, 277, 125,
	276, 77, 0, 108, 169, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 279, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 238, 258, 257,
	260, 261, 262, 263, 0, 0, 86, 259, 264, 265,
	266, 0, 0, 0, 251, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 0, 0,
	0, 0, 290, 0, 250, 0, 0, 246, 247, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 288, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 1303,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 280, 289, 286, 287, 284, 285,
	283, 282, 281, 291, 272, 273, 274, 275, 277, 125,
	276, 77, 0, 108, 169, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 279, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 238, 258, 257,
	260, 261, 262, 263, 0, 0, 86, 259, 264, 265,
	266, 0, 0, 0, 251, 0, 278, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 0, 0,
	0, 0, 290, 0, 250, 0, 0, 246, 247, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 288, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 280, 289, 286, 287, 284, 285,
	283, 282, 281, 291, 272, 273, 274, 275, 277, 125,
	276, 77, 0, 108, 169, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 493, 492, 502, 503, 495, 496, 497, 498,
	499, 500, 501, 494, 0, 0, 508, 0, 0, 0,
	0, 504, 505, 506, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 188, 164, 147, 163,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 171, 83, 162, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 172, 0, 0, 165, 166, 167, 168, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 170, 126,
	138, 88, 158, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 108, 169, 133, 95, 160, 125, 0,
	0, 0, 476, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 478, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 188, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	77, 0, 108, 169, 133, 95, 160, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 71, 72, 0, 67, 0,
	0, 0, 73, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 69, 164, 147, 163, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	171, 83, 162, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	172, 0, 0, 165, 166, 167, 168, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 170, 126, 138,
	88, 158, 141, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 108, 169, 133, 95, 160, 125, 0, 0,
	0, 579, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 581, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 699, 0,
	0, 700, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 599, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 598, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 169, 133, 95, 160, 125, 0, 0, 0,
	579, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 581, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 577, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 581, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 169, 133, 95, 160, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 478, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 188, 164, 147, 163, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 171, 83,
	162, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 172, 0,
	0, 165, 166, 167, 168, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 170, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 77, 0,
	108, 169, 133, 95, 160, 557, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 238, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 169, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 188, 164, 147, 163, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 171,
	83, 162, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 172,
	0, 0, 165, 166, 167, 168, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 170, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 169, 133, 95, 160,
}

var yyPact = [...]int{
	1453, -1000, -191, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 776, 804, -1000, -1000, -1000, -1000, -1000, -1000, 625,
	7500, 38, 53, -30, 10279, 52, 290, 10969, -1000, -9,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 590, -1000, -1000,
	-1000, -1000, -1000, 763, 768, 622, 755, 687, -1000, 5621,
	39, 9128, 10049, 4904, -1000, 471, 49, 10969, -158, 10509,
	34, 34, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 51, 10969, -1000, 10969, 29, 467, 29,
	29, 29, 10969, -1000, 98, -1000, -1000, -1000, -1000, 10969,
	458, 729, 62, 2888, 2888, 2888, 2888, -4, 2888, -98,
	636, -1000, -1000, -1000, -1000, 2888, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 363, 736, 6341, 6341,
	776, -1000, 590, -1000, -1000, -1000, 723, -1000, -1000, 237,
	787, -1000, 7270, 92, -1000, 6341, 2004, 573, -1000, -1000,
	573, -1000, -1000, -1000, -1000, -1000, 6801, 6801, 6801, 6801,
	6801, 6801, 6801, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 573, -1000, 6102,
	573, 573, 573, 573, 573, 573, 573, 573, 6341, 573,
	573, 573, 573, 573, 573, 573, 573, 573, 573, 573,
	573, 573, 9819, 597, 861, -1000, -1000, -1000, 752, 8199,
	8898, 10969, 525, -1000, 543, 4652, -135, -1000, -1000, -1000,
	147, 8659, -1000, -1000, -1000, 724, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 462,
	-1000, 1863, 455, 2888, 43, 570, 454, 185, 453, 10969,
	10969, 2888, 41, 10969, 750, 635, 10969, 452, 446, -1000,
	4400, -1000, 2888, 2888, 2888, 2888, 2888, 2888, 2888, 2888,
	-1000, -1000, -1000, -1000, -1000, -1000, 2888, 2888, -1000, -78,
	-1000, 10969, -1000, -1000, -1000, -1000, 798, 124, 374, 84,
	558, -1000, 278, 763, 363, 687, 8429, 658, -1000, -1000,
	10969, -1000, 6341, 6341, 321, -1000, 9588, -1000, -1000, 3392,
	130, 6801, 314, 136, 6801, 6801, 6801, 6801, 6801, 6801,
	6801, 6801, 6801, 6801, 6801, 6801, 6801, 6801, 6801, 6801,
	6801, 6801, 6801, 6801, 397, 397, 397, 397, 316, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 444, -1000, 590,
	242, 242, 242, 242, 242, 242, 7031, 5143, 363, 443,
	224, 6102, 5621, 5621, 6341, 6341, 10739, 10739, 5621, 757,
	145, 224, 10739, -1000, 363, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5621, 5621, 5621, 5621, 10, 10969, -1000, 10739,
	9128, 9128, 9128, 9128, 9128, -1000, 675, 661, -1000, 696,
	672, 705, 10969, -1000, 439, 8199, 114, 573, -1000, 9358,
	-1000, -1000, 10, 494, 9128, 10969, -1000, -1000, 4148, 543,
	-135, 514, -1000, -125, -112, 5860, 75, -1000, -1000, -1000,
	-1000, 2636, 200, 284, -77, -1000, -1000, -1000, 596, -1000,
	596, 596, 596, 596, -42, -42, -42, -42, -1000, -1000,
	-1000, -1000, -1000, 624, 623, -1000, 596, 596, 596, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 614, 614, 614, 608, 608,
	628, -1000, 10969, -173, 419, 2888, 749, 2888, -1000, 63,
	-1000, 10969, -1000, -1000, 10969, 2888, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 207, -1000, -1000, -1000, -1000, 699, 6341, 6341, 3896,
	6341, -1000, -1000, -1000, 736, -1000, 757, 774, -1000, 717,
	712, 5621, -1000, -1000, 130, 168, -1000, -1000, 362, -1000,
	-1000, -1000, -1000, 83, 573, -1000, 2151, -1000, -1000, -1000,
	-1000, 314, 6801, 6801, 6801, 1552, 2151, 2151, 2151, 2151,
	2151, 2151, 2128, 2206, 2184, 242, 1374, 1374, 141, 141,
	141, 141, 141, 609, 609, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 363, -1000, 363, 5621, 539, -1000, -1000, 6341,
	-1000, 363, 437, 437, 289, 308, 605, -1000, 82, 569,
	437, 5621, 186, -1000, 6341, 363, -1000, 437, 363, 437,
	437, 466, 573, -1000, 538, -1000, 142, 861, 620, 634,
	803, -1000, -1000, -1000, -1000, 660, -1000, 621, -1000, -1000,
	-1000, -1000, -1000, 48, 46, 45, 10509, -1000, 785, 9128,
	529, -1000, -1000, 514, -135, -93, -1000, -1000, -1000, 224,
	-1000, 406, 513, 2384, -1000, -1000, -1000, -1000, -1000, -1000,
	611, 742, 172, 204, 396, -1000, -1000, 731, -1000, 192,
	-84, -1000, -1000, 332, -42, -42, -1000, -1000, 75, 721,
	75, 75, 75, 355, 355, -1000, -1000, -1000, -1000, 310,
	-1000, -1000, -1000, 299, -1000, 632, 10509, 2888, -1000, 3644,
	-1000, -1000, -1000, -1000, -1000, -1000, 270, 180, 181, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9, -1000, 2888, -1000, 246, 10969, 10969, 695, 224, 224,
	77, -1000, -1000, 10969, -1000, -1000, -1000, -1000, 536, -1000,
	-1000, -1000, 3140, 5621, -1000, 1552, 2151, 2036, -1000, 6801,
	6801, -1000, -1000, 437, 5621, 224, -1000, -1000, -1000, 347,
	316, 347, 6801, 6801, 3896, 6801, 6801, -168, 530, 166,
	-1000, 6341, 163, -1000, -1000, -1000, -1000, -1000, 631, 10739,
	573, -1000, 7969, 10509, 776, 10739, 6341, 6341, -1000, -1000,
	6341, 610, -1000, 6341, -1000, -1000, -1000, 573, 573, 573,
	416, -1000, 776, 529, -1000, -1000, -1000, -133, -144, -1000,
	-1000, 2636, -1000, 2636, 10509, -1000, 376, 370, -1000, -1000,
	630, 71, -1000, -1000, -1000, 483, 75, 75, -1000, 155,
	-1000, -1000, -1000, 433, -1000, 429, 506, 426, 10969, -1000,
	-1000, 505, -1000, 140, -1000, -1000, 10509, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10509,
	10969, -1000, -1000, -1000, -1000, -1000, 10509, -1000, -1000, 354,
	6341, -1000, -1000, -1000, 3644, -1000, 785, 9128, -1000, -1000,
	363, -1000, 6801, 2151, 2151, -1000, -1000, 363, 596, 596,
	-1000, 596, 608, -1000, 596, -24, 596, -25, 363, 363,
	1673, 1885, -1000, 1319, 1837, 573, -165, -1000, 224, 6341,
	-1000, 737, 486, 503, -1000, -1000, 5382, 363, 423, 73,
	416, 763, -1000, 224, 224, 224, 10509, 224, 10509, 10509,
	10509, 7739, 10509, 763, -1000, -1000, -1000, -1000, 2384, -1000,
	411, -1000, 596, -1000, -1000, -71, 797, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -42, 341,
	-42, 280, -1000, 269, 2888, 3644, 2636, -1000, 589, -1000,
	-1000, -1000, -1000, 745, -1000, 224, 783, 504, -1000, 2151,
	-1000, -1000, 95, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6801, 6801, -1000, 6801, 6801, 6801, 363, 340,
	224, 740, -1000, 573, -1000, -1000, 576, 10509, 10509, -1000,
	-1000, 395, -1000, 387, 387, 387, 114, -1000, -1000, 109,
	10509, -1000, 134, -1000, -148, 75, -1000, 75, 476, 463,
	-1000, -1000, -1000, 10509, 573, 780, 765, -1000, -1000, 1785,
	1785, 1785, 1785, 12, -1000, -1000, 790, -1000, 573, -1000,
	590, 72, -1000, 10509, -1000, -1000, -1000, -1000, -1000, 109,
	-1000, 359, 139, 336, -1000, 198, 734, -1000, 733, -1000,
	-1000, -1000, -1000, -1000, 369, 8, -1000, 6341, 6341, -1000,
	-1000, -1000, -1000, 363, 42, -177, 10739, 503, 363, 10509,
	-1000, -1000, -1000, 250, -1000, -1000, -1000, 247, -1000, -1000,
	570, 366, -1000, 10509, 224, 498, -1000, 685, -171, -180,
	485, -1000, -1000, -1000, -1000, -173, -1000, 8, 706, -1000,
	679, -1000, -1000, -1000, 5, -174, 3, -178, 573, -181,
	6571, -1000, 1785, 363, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1023, 19, 530, 1022, 1021, 1019, 1018, 1017, 1014,
	1013, 1012, 1010, 1008, 1007, 1006, 1005, 1003, 1002, 999,
	998, 997, 996, 993, 121, 990, 985, 984, 68, 982,
	63, 981, 979, 36, 140, 59, 34, 101, 976, 26,
	60, 55, 975, 40, 971, 964, 73, 961, 53, 960,
	955, 957, 954, 950, 13, 30, 949, 947, 946, 945,
	65, 1038, 944, 943, 942, 941, 940, 939, 43, 3,
	5, 12, 11, 938, 127, 6, 936, 42, 935, 934,
	933, 932, 28, 929, 47, 927, 22, 46, 926, 23,
	52, 32, 21, 8, 64, 49, 925, 31, 50, 38,
	924, 922, 340, 917, 916, 914, 913, 911, 910, 143,
	338, 907, 900, 897, 895, 45, 167, 451, 766, 58,
	892, 883, 882, 1262, 54, 61, 17, 881, 25, 724,
	35, 880, 879, 33, 875, 874, 872, 866, 864, 863,
	862, 41, 858, 857, 856, 14, 18, 852, 843, 51,
	15, 838, 837, 835, 39, 57, 834, 44, 828, 827,
	826, 824, 27, 16, 822, 10, 821, 9, 819, 818,
	4, 817, 29, 816, 7, 814, 2, 37, 813, 812,
	0, 24, 811, 808, 99,
}

var yyR1 = [...]int{
	0, 178, 179, 179, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 182,
	182, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 176, 176, 175,
	174, 174, 173, 173, 172, 16, 159, 160, 160, 160,
	155, 134, 134, 134, 134, 137, 137, 135, 135, 135,
	135, 135, 135, 135, 136, 136, 136, 136, 136, 138,
	138, 138, 138, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 140, 140, 140, 140, 140, 154, 154, 141,
	141, 149, 149, 150, 150, 150, 147, 147, 148, 148,
	151, 151, 151, 142, 142, 142, 142, 142, 142, 142,
	144, 144, 152, 152, 145, 145, 145, 146, 146, 153,
	153, 153, 153, 153, 143, 143, 156, 156, 168, 168,
	167, 167, 167, 158, 158, 164, 164, 164, 164, 164,
	157, 157, 166, 166, 165, 161, 161, 161, 162, 162,
	162, 163, 163, 163, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 171, 169, 169, 170, 170, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 107, 107, 104, 104, 105, 105, 106, 106, 106,
	108, 108, 108, 132, 132, 132, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 183, 24, 25,
	25, 26, 26, 26, 30, 30, 30, 28, 28, 29,
	29, 35, 35, 34, 34, 36, 36, 36, 36, 120,
	120, 120, 119, 119, 38, 38, 39, 39, 40, 40,
	41, 41, 41, 53, 53, 89, 89, 91, 91, 42,
	42, 42, 42, 43, 43, 44, 44, 45, 45, 127,
	127, 126, 126, 126, 125, 125, 47, 47, 47, 49,
	48, 48, 48, 48, 50, 50, 52, 52, 51, 51,
	54, 54, 54, 54, 55, 55, 37, 37, 37, 37,
	37, 37, 37, 103, 103, 57, 57, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 33, 33, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 184, 184, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 130, 130, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	92, 92, 70, 70, 72, 72, 71, 73, 93, 93,
	97, 94, 94, 98, 98, 98, 96, 96, 96, 122,
	122, 122, 101, 101, 109, 109, 110, 110, 102, 102,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	112, 112, 112, 113, 113, 114, 114, 114, 121, 121,
	117, 117, 118, 118, 123, 123, 124, 124, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 180, 181,
	128, 129, 129, 129,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 2, 2, 2, 2, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 0,
	2, 1, 2, 1, 0, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 3, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 12, 7, 7,
	7, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 7, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 3, 3, 3, 3, 3, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -178, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	119, 120, 122, 121, 147, 123, 140, 49, 159, 160,
	162, 163, 25, 141, 142, 145, 146, -180, 8, 242,
	53, -179, 257, -82, 15, -26, 5, -24, -183, -24,
	-24, -24, -24, -24, -159, 53, -114, 128, 70, 155,
	234, 125, 126, 132, -117, 56, -116, 250, 159, 170,
	164, 191, 183, 181, 184, 221, 65, 162, 230, 143,
	179, 175, 173, 27, 196, 255, 174, 138, 137, 197,
	201, 222, 168, 169, 224, 195, 139, 32, 252, 34,
	151, 225, 199, 194, 190, 193, 167, 189, 38, 203,
	202, 204, 220, 186, 176, 18, 228, 146, 149, 198,
	200, 133, 153, 254, 226, 172, 150, 145, 229, 163,
	223, 232, 37, 208, 166, 136, 160, 157, 187, 152,
	177, 178, 192, 165, 188, 161, 154, 147, 231, 209,
	256, 185, 182, 158, 156, 213, 214, 215, 216, 253,
	227, 180, 210, -102, 128, 130, 126, 126, 127, 128,
	234, 125, 126, -51, -123, 56, -116, 128, 155, 126,
	106, 184, 119, 211, 127, 32, 153, -132, 126, -104,
	156, 213, 214, 215, 216, 56, 223, 222, 217, -123,
	161, -128, -128, -128, -128, -128, -2, -86, 17, 16,
	-5, -3, -180, 6, 20, 21, -30, 39, 40, -25,
	-36, 97, -37, -123, -56, 72, -61, 29, 56, -116,
	23, -60, -57, -75, -73, -74, 106, 107, 95, 96,
	103, 73, 108, -65, -63, -64, -66, 58, 57, 66,
	59, 60, 61, 62, 67, 68, 69, -117, -71, -180,
	43, 44, 243, 244, 245, 246, 249, 247, 75, 33,
	233, 241, 240, 239, 237, 238, 235, 236, 131, 234,
	101, 242, -102, -39, -40, -41, -42, -53, -74, -180,
	-51, 11, -46, -51, -94, -131, 161, -98, 223, 222,
	-118, -96, -117, -115, 221, 184, 220, 124, 71, 22,
	24, 206, 74, 106, 16, 75, 105, 243, 119, 47,
	235, 236, 233, 245, 246, 234, 211, 29, 10, 25,
	141, 21, 99, 121, 78, 79, 144, 23, 142, 69,
	19, 50, 11, 13, 14, 131, 130, 90, 127, 45,
	8, 108, 26, 87, 41, 28, 43, 88, 17, 237,
	238, 31, 249, 148, 101, 48, 35, 72, 67, 51,
	70, 15, 46, 89, 122, 242, 44, 125, 6, 248,
	30, 140, 42, 126, 212, 77, 129, 68, 5, 132,
	9, 49, 52, 239, 240, 241, 33, 76, 12, -160,
	-155, 56, 127, -51, 242, -117, -110, 131, -110, -110,
	126, -51, -51, -109, 131, 56, -109, -109, -109, -51,
	109, -51, 56, 30, 234, 56, 153, 126, 154, 128,
	-129, -180, -118, -129, -129, -129, 157, 158, -129, -105,
	218, 51, -129, -181, 55, -87, 19, 31, -37, -123,
	-83, -84, -37, -82, -2, -24, 35, -28, 21, 64,
	11, -120, 71, 70, 87, -119, 22, -117, 58, 109,
	-37, -58, 90, 72, 88, 89, 114, 115, 116, 117,
	118, 74, 92, 91, 102, 95, 96, 97, 98, 99,
	100, 101, 93, 94, 110, 111, 112, 113, 105, 80,
	81, 82, 83, 84, 85, 86, -103, -180, -74, -180,
	-61, -61, -61, -61, -61, -61, -61, -180, -2, -69,
	-37, -180, -180, -180, -180, -180, -180, -180, -180, -180,
	-78, -37, -180, -184, -180, -184, -184, -184, -184, -184,
	-184, -184, -180, -180, -180, -180, -52, 26, -51, 30,
	54, -47, -49, -48, -50, 41, 45, 47, 42, 43,
	44, 48, -127, 22, -39, -180, -126, 149, -125, 22,
	-123, 58, -51, -46, -182, 54, 11, 52, 54, -94,
	161, -95, -99, 224, 226, 80, -122, -117, 58, 29,
	30, 55, 54, -134, -137, -139, -138, -140, -135, -136,
	181, 182, 106, 185, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 30, 143, 177, 178, 179, 180,
	197, 198, 199, 200, 201, 202, 203, 204, 164, 165,
	166, 167, 168, 169, 170, 172, 173, 174, 175, 176,
	56, -129, 128, -176, 52, 56, 72, 56, -51, -51,
	-129, 129, -51, 23, 51, -51, 56, 56, -124, -123,
	-115, -129, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -107, 212, 219, -51, 9, 90, 54, 18, 109,
	54, -85, 24, 25, -86, -181, -30, -62, -117, 59,
	62, -29, 42, -51, -37, -37, -67, 67, 72, 68,
	69, -119, 97, -124, -118, -115, -61, -68, -71, -74,
	63, 90, 88, 89, 74, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -60, -60, -60, -60, -130,
	56, 58, 56, -117, -35, 21, -34, -36, -181, 54,
	-181, -2, -34, -34, -37, -37, -75, -117, -123, -75,
	-34, -28, -76, -77, 76, -75, -181, -34, -35, -34,
	-34, -90, 149, -51, -93, -97, -75, -40, -41, -41,
	-40, -41, 41, 41, 41, 46, 41, 46, 41, -48,
	-123, -181, -54, 49, 130, 50, -180, -125, -90, 52,
	-39, -51, -98, -95, 54, 225, 227, 228, 51, -37,
	-146, 105, -161, -162, -163, -118, 58, 59, -155, -156,
	-164, 133, 136, 132, -157, 127, 28, -151, 67, 72,
	-147, 209, -141, 53, -141, -141, -141, -141, -145, 184,
	-145, -145, -145, 53, 53, -141, -141, -141, -149, 53,
	-149, -149, -150, 53, -150, -121, 52, -51, -174, 253,
	-175, 56, -129, 23, -129, -111, 124, 121, 122, -171,
	120, 206, 184, 65, 29, 15, 243, 149, 256, 56,
	150, -51, -51, -129, -106, 11, 90, 37, -37, -37,
	-124, -84, -87, -101, 19, 11, 33, 33, -34, 67,
	68, 69, 109, -180, -68, -61, -61, -61, -33, 144,
	71, -181, -181, -34, 54, -37, -181, -181, -181, 54,
	52, 22, 54, 11, 109, 54, 11, -181, -34, -79,
	-77, 78, -37, -181, -181, -181, -181, -181, -59, 30,
	33, -2, -180, -180, -55, 54, 12, 80, -44, -43,
	51, 52, -45, 51, -43, 41, 41, 127, 127, 127,
	-91, -117, -55, -39, -55, -99, -100, 229, 226, 232,
	56, 54, -163, 80, 53, 28, -157, -157, 56, 56,
	-142, 29, 67, -148, 210, 59, -145, -145, -146, 30,
	-146, -146, -146, -154, 58, -154, 59, 59, 51, -117,
	-129, -173, -172, -118, -128, -177, 155, 134, 135, 138,
	137, 56, 127, 28, 133, 136, 149, 132, -177, 155,
	-112, -113, 129, 22, 127, 28, 149, -129, -108, 88,
	12, -123, -123, 38, 109, -51, -38, 11, 97, -118,
	-35, -33, 71, -61, -61, -181, -36, -133, 106, 181,
	143, 179, 175, 195, 186, 208, 177, 209, -130, -133,
	-61, -61, -118, -61, -61, 250, -82, 79, -37, 77,
	-92, 51, -93, -70, -72, -71, -180, -2, -88, -117,
	-91, -82, -97, -37, -37, -37, 53, -37, -180, -180,
	-180, -181, 54, -82, -55, 226, 230, 231, -162, -163,
	-166, -165, -117, 56, 56, -144, 51, 58, 59, 60,
	67, 233, 66, 55, -146, -146, 56, 106, 55, 54,
	55, 54, 55, 54, -51, 54, 80, -128, -117, -128,
	-117, -51, -128, -117, 58, -37, -55, -39, -181, -61,
	-181, -141, -141, -141, -150, -141, 169, -141, 169, -181,
	-181, -181, 54, 19, -181, 54, 19, -180, -32, 248,
	-37, 27, -92, 54, -181, -181, -181, 54, 109, -181,
	-86, -89, -117, -89, -89, -89, -126, -117, -86, 55,
	54, -141, -152, 206, 9, -145, 58, -145, 59, 59,
	-129, -172, -163, 53, 26, -80, 13, -145, 56, -61,
	-61, -61, -61, -61, -181, 58, 28, -72, 33, -2,
	-180, -117, -117, 54, 55, -181, -181, -181, -54, -168,
	-167, 52, 139, 65, -165, -153, 133, 28, 132, 233,
	-146, -146, 55, 55, -89, -180, -81, 14, 16, -181,
	-181, -181, -181, -31, 90, 253, 9, -70, -2, 109,
	-117, -167, 56, -158, 80, 58, -143, 65, 28, 28,
	55, -169, -170, 149, -37, -69, -181, 251, 48, 254,
	-93, -181, -117, 59, 58, -176, -181, 54, -117, 38,
	252, 255, -174, -170, 33, 38, 151, 253, 152, 254,
	-180, 255, -61, 148, -181, -181,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 515, 0, 277, 277, 277, 277, 277, 277, 0,
	585, 568, 0, 0, 0, 0, -2, 267, 268, 0,
	270, 271, 790, 790, 790, 790, 790, 0, 33, 34,
	788, 1, 3, 523, 0, 0, 281, 284, 279, 0,
	568, 0, 0, 0, 60, 0, 0, 777, 0, 778,
	566, 566, 566, 586, 587, 590, 591, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 0, 0, 569, 0, 564, 0, 564,
	564, 564, 0, 226, 348, 594, 595, 777, 778, 0,
	0, 0, 0, 791, 791, 791, 791, 0, 791, 255,
	244, 246, 247, 248, 249, 791, 264, 265, 254, 266,
	269, 272, 273, 274, 275, 276, 27, 527, 0, 0,
	515, 29, 0, 277, 282, 283, 287, 285, 286, 278,
	0, 295, 299, 0, 356, 0, 361, 363, -2, -2,
	0, 403, 404, 405, 406, 407, 0, 0, 0, 0,
	0, 0, 0, 432, 433, 434, 435, 500, 501, 502,
	503, 504, 505, 506, 507, 365, 366, 497, 547, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 488, 0,
	462, 462, 462, 462, 462, 462, 462, 462, 0, 0,
	0, 0, 0, 0, 306, 308, 309, 310, 329, 0,
	331, 0, 0, 41, 45, 0, 768, 551, -2, -2,
	0, 0, 592, 593, -2, 697, -2, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 0,
	77, 0, 0, 791, 0, 67, 0, 0, 0, 0,
	0, 791, 0, 0, 0, 0, 0, 0, 0, 225,
	0, 227, 791, 791, 791, 791, 791, 791, 791, 791,
	236, 792, 793, 237, 238, 239, 791, 791, 241, 0,
	256, 0, 250, 28, 789, 22, 0, 0, 524, 0,
	516, 517, 520, 523, 27, 284, 0, 289, 288, 280,
	0, 296, 0, 0, 0, 300, 0, 302, 303, 0,
	359, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 388,
	389, 390, 391, 392, 393, 394, 362, 0, 381, 0,
	425, 426, 427, 428, 429, 430, 0, 291, 27, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 287,
	0, 489, 0, 454, 0, 455, 456, 457, 458, 459,
	460, 461, 0, 291, 0, 0, 43, 0, 347, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 339, 0,
	0, 0, 0, 330, 0, 0, 350, 741, 332, 0,
	334, 335, -2, 0, 0, 0, 39, 40, 0, 46,
	768, 48, 49, 0, 0, 0, 157, 559, 560, 561,
	557, 185, 0, 140, 136, 82, 83, 84, 129, 86,
	129, 129, 129, 129, 154, 154, 154, 154, 112, 113,
	114, 115, 116, 0, 0, 99, 129, 129, 129, 103,
	119, 120, 121, 122, 123, 124, 125, 126, 87, 88,
	89, 90, 91, 92, 93, 131, 131, 131, 133, 133,
	588, 62, 0, 70, 0, 791, 0, 791, 75, 0,
	201, 0, 220, 565, 0, 791, 223, 224, 349, 596,
	597, 228, 229, 230, 231, 232, 233, 234, 235, 240,
	243, 257, 251, 252, 245, 528, 0, 0, 0, 0,
	0, 519, 521, 522, 527, 30, 287, 0, 508, 0,
	0, 0, 290, 25, 357, 358, 360, 382, 0, 384,
	386, 301, 297, 0, 498, -2, 367, 368, 397, 398,
	399, 0, 0, 0, 0, 395, 372, 374, 375, 376,
	377, 378, 0, 408, 409, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
	473, 474, 0, 431, 0, 0, 292, 293, 400, 0,
	546, 27, 0, 0, 0, 0, 0, 497, 0, 0,
	0, 0, 495, 492, 0, 0, 463, 0, 0, 0,
	0, 0, 0, 346, 354, 548, 0, 307, 325, 327,
	0, 322, 337, 338, 340, 0, 342, 0, 344, 345,
	311, 312, 313, 0, 0, 0, 0, 333, 354, 0,
	354, 42, 552, 47, 0, 0, 52, 53, 553, 554,
	555, 0, 76, 186, 188, 191, 192, 193, 78, 79,
	0, 0, 0, 0, 0, 180, 181, 143, 141, 0,
	138, 137, 85, 0, 154, 154, 106, 107, 157, 0,
	157, 157, 157, 0, 0, 100, 101, 102, 94, 0,
	95, 96, 97, 0, 98, 0, 0, 791, 64, 0,
	68, 69, 65, 567, 66, 790, 0, 0, 580, 202,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	0, 219, 791, 222, 260, 0, 0, 0, 525, 526,
	0, 518, 23, 0, 562, 563, 509, 510, 304, 383,
	385, 387, 0, 291, 369, 395, 373, 0, 370, 0,
	0, 364, 436, 0, 0, 402, -2, 439, 440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 515, 0,
	493, 0, 0, 453, 464, 465, 466, 467, 540, 0,
	0, -2, 0, 0, 515, 0, 0, 0, 319, 326,
	0, 0, 320, 0, 321, 341, 343, 0, 0, 0,
	0, 317, 515, 354, 38, 50, 51, 0, 0, 57,
	158, 0, 189, 0, 0, 175, 0, 0, 178, 179,
	150, 0, 142, 81, 139, 0, 157, 157, 108, 0,
	109, 110, 111, 0, 127, 0, 0, 0, 0, 589,
	63, 71, 72, 0, 194, 790, 0, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 790, 0,
	0, 790, 581, 582, 583, 584, 0, 221, 242, 0,
	0, 258, 259, 529, 0, 24, 354, 0, 298, 499,
	0, 371, 0, 396, 379, 437, 294, 0, 129, 129,
	478, 129, 133, 481, 129, 483, 129, 486, 0, 0,
	0, 0, 498, 0, 0, 0, 490, 452, 496, 0,
	31, 0, 540, 530, 542, 544, 0, 27, 0, 536,
	0, 523, 549, 355, 550, 323, 0, 328, 0, 0,
	0, 331, 0, 523, 37, 54, 55, 56, 187, 190,
	0, 182, 129, 176, 177, 152, 0, 144, 145, 146,
	147, 148, 149, 130, 104, 105, 155, 156, 154, 0,
	154, 0, 134, 0, 791, 0, 0, 195, 0, 196,
	198, 199, 200, 0, 261, 262, 511, 305, 438, 380,
	441, 475, 154, 479, 480, 482, 484, 485, 487, 443,
	442, 444, 0, 0, 447, 0, 0, 0, 0, 0,
	494, 0, 32, 0, 545, -2, 0, 0, 0, 44,
	35, 0, 315, 0, 0, 0, 350, 318, 36, 167,
	0, 184, 159, 153, 0, 157, 128, 157, 0, 0,
	61, 73, 74, 0, 0, 513, 0, 476, 477, 0,
	0, 0, 0, 468, 451, 491, 0, 543, 0, -2,
	0, 538, 537, 0, 324, 351, 352, 353, 314, 166,
	168, 0, 173, 0, 183, 164, 0, 161, 163, 151,
	117, 118, 132, 135, 0, 0, 26, 0, 0, 445,
	446, 448, 449, 0, 0, 0, 0, 533, 27, 0,
	316, 169, 170, 0, 174, 172, 80, 0, 160, 162,
	67, 0, 215, 0, 514, 512, 450, 0, 0, 0,
	541, -2, 539, 171, 165, 70, 214, 0, 0, 469,
	0, 472, 197, 216, 0, 470, 0, 0, 0, 0,
	0, 471, 0, 0, 217, 218,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 257,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:307
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:312
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:313
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:317
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:340
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:348
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:352
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:358
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:365
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:375
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:381
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:385
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:392
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:404
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:416
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:420
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:426
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:432
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:436
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:440
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:445
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:450
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:454
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:459
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:463
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:469
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:473
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:487
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:491
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:497
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:501
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:505
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:533
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:539
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:544
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:549
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:553
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:557
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:565
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:574
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:578
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:584
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:589
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:605
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:611
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:617
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:624
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:631
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:636
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:640
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:646
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:657
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:668
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:673
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:699
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:727
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:767
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:865
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:870
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:874
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:879
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:883
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:891
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:895
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:901
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:909
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:918
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:922
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:928
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:936
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:941
		{
			yyVAL.optVal = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:945
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:949
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:953
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:961
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:965
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:970
		{
			yyVAL.optVal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:974
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:979
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:988
		{
			yyVAL.str = ""
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:992
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:996
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1001
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1005
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1010
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1014
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1018
		{
			yyVAL.colKeyOpt = colKey
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1022
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1026
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1041
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1045
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1055
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1061
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1065
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1076
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1098
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1102
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1133
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1137
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1141
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1149
		{
			yyVAL.str = yyDollar[1].str
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1177
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1181
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1185
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1189
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1202
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1212
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1217
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1222
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1226
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1245
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1255
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1261
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1265
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1271
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1277
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1285
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1290
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1298
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1312
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1317
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1323
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1331
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1352
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1356
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1360
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1380
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1390
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1394
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1414
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1430
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1434
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1440
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1444
		{
			yyVAL.str = "extended "
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1450
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1454
		{
			yyVAL.str = "full "
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1460
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1474
		{
			yyVAL.showFilter = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1478
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1482
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1488
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = SessionStr
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = GlobalStr
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &Begin{}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &Begin{}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Commit{}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &Rollback{}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &OtherRead{}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &OtherRead{}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &OtherRead{}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1555
		{
			setAllowComments(yylex, true)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1565
		{
			yyVAL.bytes2 = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1575
		{
			yyVAL.str = UnionStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1579
		{
			yyVAL.str = UnionAllStr
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.str = UnionDistinctStr
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1588
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1596
		{
			yyVAL.str = SQLCacheStr
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1601
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1605
		{
			yyVAL.str = DistinctStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1610
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1614
		{
			yyVAL.str = StraightJoinHint
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1619
		{
			yyVAL.selectExprs = nil
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1623
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1629
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1633
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1639
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1643
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1647
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1651
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1656
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1660
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1671
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1676
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1686
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1690
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1708
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1714
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 314:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1718
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1724
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1728
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1751
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1755
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1759
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1763
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1769
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1771
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1775
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1781
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1783
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1786
		{
			yyVAL.empty = struct{}{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1788
		{
			yyVAL.empty = struct{}{}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1799
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1806
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.str = JoinStr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1816
		{
			yyVAL.str = JoinStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = JoinStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = StraightJoinStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1832
		{
			yyVAL.str = LeftJoinStr
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1836
		{
			yyVAL.str = LeftJoinStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1840
		{
			yyVAL.str = RightJoinStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = RightJoinStr
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1850
		{
			yyVAL.str = NaturalJoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1864
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1874
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1878
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1883
		{
			yyVAL.indexHints = nil
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1887
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 352:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1891
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1895
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.expr = nil
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1904
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1914
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1918
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1922
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1926
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1930
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1934
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1940
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1944
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1960
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1964
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1968
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1972
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1976
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1980
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1984
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1988
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONTextStrExistsOp, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1992
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAnyKeysExistOp, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1996
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONAllKeysExistOp, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2000
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONLeftContainsRightOp, Right: yyDollar[3].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2004
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: JSONRightContainsLeftOp, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2008
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2012
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2016
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = IsNullStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = IsNotNullStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = IsTrueStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2034
		{
			yyVAL.str = IsNotTrueStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2038
		{
			yyVAL.str = IsFalseStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2042
		{
			yyVAL.str = IsNotFalseStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.str = EqualStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.str = LessThanStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.str = GreaterThanStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2060
		{
			yyVAL.str = LessEqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = GreaterEqualStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = NotEqualStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2077
		{
			yyVAL.expr = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2101
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2107
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2111
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2121
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2125
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2129
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2145
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2149
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2153
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2161
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2165
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONSubObjectOp, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: JSONUnquoteSubObjectOp, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2213
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2221
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2235
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2239
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2243
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2261
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2265
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2269
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2279
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2283
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2287
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2291
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2295
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2299
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2303
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 446:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2307
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2311
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2315
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 449:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2319
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 450:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2323
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2327
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2331
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2335
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2345
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2349
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2357
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2367
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2372
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2403
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2409
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2413
		{
			yyVAL.str = BooleanModeStr
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2417
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 471:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2421
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = QueryExpansionStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2431
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2441
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2453
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2457
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2467
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2475
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2483
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = nil
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2500
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2505
		{
			yyVAL.str = string("")
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2515
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2525
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = nil
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2534
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2540
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2544
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2548
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2562
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2566
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2582
		{
			yyVAL.expr = &NullVal{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2588
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2606
		{
			yyVAL.exprs = nil
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2610
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = nil
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2624
		{
			yyVAL.orderBy = nil
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2634
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2638
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2644
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2649
		{
			yyVAL.str = AscScr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2653
		{
			yyVAL.str = AscScr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2657
		{
			yyVAL.str = DescScr
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2662
		{
			yyVAL.limit = nil
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2670
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2674
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2679
		{
			yyVAL.str = ""
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = ForUpdateStr
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = ShareModeStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2708
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2713
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2717
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2721
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2740
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2745
		{
			yyVAL.updateExprs = nil
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2749
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2755
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2759
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2775
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2795
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2801
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2817
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2821
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2825
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.bytes = []byte("charset")
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &Default{}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2856
		{
			yyVAL.byt = 0
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.byt = 1
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2861
		{
			yyVAL.empty = struct{}{}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2866
		{
			yyVAL.str = ""
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.str = IgnoreStr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2876
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2893
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2897
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2903
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2906
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2913
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2919
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2923
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3172
		{
			decNesting(yylex)
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3177
		{
			forceEOF(yylex)
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3182
		{
			forceEOF(yylex)
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			forceEOF(yylex)
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
